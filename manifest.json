{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.3", "generated_at": "2023-09-12T19:44:34.993609Z", "invocation_id": "a66d13dd-193c-4c17-abd2-3c24657ce14e", "env": {}, "project_id": "ca818801058e20832b1d5132e5dcbb9c", "user_id": "f2b367e3-a0fa-4574-bf34-8f1b0ad4cba0", "send_anonymous_usage_stats": true, "adapter_type": "athena"}, "nodes": {"model.VoluntaryChurnABT.estadisticos_mensual": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "estadisticos_mensual", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics\\estadisticos_mensual.sql", "original_file_path": "models\\analytics\\estadisticos_mensual.sql", "unique_id": "model.VoluntaryChurnABT.estadisticos_mensual", "fqn": ["VoluntaryChurnABT", "analytics", "estadisticos_mensual"], "alias": "estadisticos_mensual", "checksum": {"name": "sha256", "checksum": "197e4392015501098c594b2727d0763e84c526cc1035b3ad1fc309f6aae50cac"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de cuenta.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_max_ttl": {"name": "avg_max_ttl", "description": "Promedio mensual de max_ttl semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_max_amt_due": {"name": "avg_max_amt_due", "description": "Promedio mensual de max_amt_due semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_max_unexp_amt": {"name": "avg_max_unexp_amt", "description": "Promedio mensual de max_unexp_amt semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_trfc_dwld_snr_deg": {"name": "avg_trfc_dwld_snr_deg", "description": "Promedio mensual de trfc_dwld_snr_deg semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_trfc_dwld_cm_us": {"name": "avg_trfc_dwld_cm_us", "description": "Promedio mensual de trfc_dwld_cm_us semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_unexp_amt_rel": {"name": "avg_unexp_amt_rel", "description": "Promedio mensual de unexp_amt_rel semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_unexp_amt_ttl": {"name": "avg_unexp_amt_ttl", "description": "Promedio mensual de unexp_amt_ttl semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_max_trfc_dwld": {"name": "avg_max_trfc_dwld", "description": "Promedio mensual de max_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_avg_trfc_dwld": {"name": "avg_avg_trfc_dwld", "description": "Promedio mensual de avg_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_sum_trfc_dwld": {"name": "avg_sum_trfc_dwld", "description": "Promedio mensual de sum_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_max_trfc_upld": {"name": "avg_max_trfc_upld", "description": "Promedio mensual de max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_avg_max_trfc_upld": {"name": "avg_avg_max_trfc_upld", "description": "Promedio mensual de avg_max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_sum_max_trfc_upld": {"name": "avg_sum_max_trfc_upld", "description": "Promedio mensual de sum_max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_max_ttl": {"name": "max_max_ttl", "description": "M\u00e1ximo mensual de max_ttl semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_max_amt_due": {"name": "max_max_amt_due", "description": "M\u00e1ximo mensual de max_amt_due semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_max_unexp_amt": {"name": "max_max_unexp_amt", "description": "M\u00e1ximo mensual de max_unexp_amt semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_trfc_dwld_snr_deg": {"name": "max_trfc_dwld_snr_deg", "description": "M\u00e1ximo mensual de trfc_dwld_snr_deg semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_trfc_dwld_cm_us": {"name": "max_trfc_dwld_cm_us", "description": "M\u00e1ximo mensual de trfc_dwld_cm_us semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_unexp_amt_rel": {"name": "max_unexp_amt_rel", "description": "M\u00e1ximo mensual de unexp_amt_rel semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_unexp_amt_ttl": {"name": "max_unexp_amt_ttl", "description": "M\u00e1ximo mensual de unexp_amt_ttl semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_max_trfc_dwld": {"name": "max_max_trfc_dwld", "description": "M\u00e1ximo mensual de max_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_avg_trfc_dwld": {"name": "max_avg_trfc_dwld", "description": "M\u00e1ximo mensual de avg_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_sum_trfc_dwld": {"name": "max_sum_trfc_dwld", "description": "M\u00e1ximo mensual de sum_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_max_trfc_upld": {"name": "max_max_trfc_upld", "description": "M\u00e1ximo mensual de max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_avg_max_trfc_upld": {"name": "max_avg_max_trfc_upld", "description": "M\u00e1ximo mensual de avg_max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_sum_max_trfc_upld": {"name": "max_sum_max_trfc_upld", "description": "M\u00e1ximo mensual de sum_max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_max_ttl": {"name": "sum_max_ttl", "description": "Suma mensual de max_ttl semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_max_amt_due": {"name": "sum_max_amt_due", "description": "Suma mensual de max_amt_due semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_max_unexp_amt": {"name": "sum_max_unexp_amt", "description": "Suma mensual de max_unexp_amt semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_trfc_dwld_snr_deg": {"name": "sum_trfc_dwld_snr_deg", "description": "Suma mensual de trfc_dwld_snr_deg semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_trfc_dwld_cm_us": {"name": "sum_trfc_dwld_cm_us", "description": "Suma mensual de trfc_dwld_cm_us semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_unexp_amt_rel": {"name": "sum_unexp_amt_rel", "description": "Suma mensual de unexp_amt_rel semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_unexp_amt_ttl": {"name": "sum_unexp_amt_ttl", "description": "Suma mensual de unexp_amt_ttl semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_max_trfc_dwld": {"name": "sum_max_trfc_dwld", "description": "Suma mensual de max_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_avg_trfc_dwld": {"name": "sum_avg_trfc_dwld", "description": "Suma mensual de avg_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_sum_trfc_dwld": {"name": "sum_sum_trfc_dwld", "description": "Suma mensual de sum_trfc_dwld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_max_trfc_upld": {"name": "sum_max_trfc_upld", "description": "Suma mensual de max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_avg_max_trfc_upld": {"name": "sum_avg_max_trfc_upld", "description": "Suma mensual de avg_max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_sum_max_trfc_upld": {"name": "sum_sum_max_trfc_upld", "description": "Suma mensual de sum_max_trfc_upld semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rango_tiempo": {"name": "rango_tiempo", "description": "Mes comprendido.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o de partici\u00f3n.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes de partici\u00f3n.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda de partici\u00f3n.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\analytics\\analytics.yml", "build_path": "target\\run\\VoluntaryChurnABT\\models\\analytics\\estadisticos_mensual.sql", "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547879.395744, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\n{%- if var('modo')[0] == 'default' -%}\r\n\r\n    {% set start_date = ((modules.datetime.datetime.today() - modules.datetime.timedelta(days=7)).date()).strftime('%Y-%m-%d') %}\r\n    {% set end_date = (modules.datetime.datetime.today()).strftime('%Y-%m-%d') %}\r\n{%- elif var('modo')[0] == \"rango\" -%}\r\n    {% set start_date =  var('modo')[1] %}\r\n    {% set end_date = var('modo')[2] %}\r\n\r\n{%- endif -%}\r\n\r\n{% set mondays_list = get_mondays_between_dates_month(start_date, end_date) %}\r\n{% set cleaned_list = mondays_list.split(\",\") | map('trim') | map('replace', '[', '') | map('replace', ']', '') | list %}\r\n\r\n    WITH ultimas_semanas AS (\r\n        SELECT *\r\n        FROM {{ ref('estadisticos_semanal') }}\r\n        WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\n    ),\r\n\r\nclasificacion_conversion AS (\r\n\r\n{% for monday in cleaned_list %}\r\n(\r\n    SELECT  hh_cd,\r\n            desc_clss_snr,\r\n            nodo,\r\n            desc_clss_ucer,\r\n            desc_clss_npa,\r\n            CAST({{monday}} AS date) AS monday,\r\n            desc_ut_us,\r\n            bandwdth_key,\r\n            {{ get_max_value([ 'max_antiguedad_ultimo_ctt_tel','max_antiguedad_ultimo_ctt_int','max_antiguedad_ultimo_ctt_tv','bandwdth_key','cm_us','numr','samp','ucer_deg','snr_deg','pct_npa','pct_ucer','es_gold','max_intencion_producto_int','max_intencion_producto_tv','max_intencion_producto_tel','max_dt_pcs_cnl_dif_seconds','flag_cncl','actn_cncl_cancelar_proceso','actn_cncl_requiere_visita_tecnica','actn_cncl_correccion_logica','actn_cncl_no_requiere_visita_tecnica','actn_cncl_retencion','actn_cncl_resto','max_cgy_cncl_economico','max_cgy_cncl_personales','max_cgy_cncl_insatisfaccion','max_cgy_cncl_comercial','max_cgy_cncl_competencia','max_cgy_cncl_resto','max_dsc_pcs_cnl_cancelacion','max_dsc_pcs_cnl_resto','max_ln_bsn_tv','max_ln_bsn_tel','max_ln_bsn_int','max_mtv_cncl_muchosgastos','max_mtv_cncl_saldoalto','max_mtv_cncl_aumentotarifa','max_mtv_cncl_documentacion','max_mtv_cncl_sininquilino','max_mtv_cncl_resto','max_pd_nm_cablemodem','max_pd_nm_cabletvhd','max_pd_nm_cabletvdigital','max_pd_nm_redinterna','max_pd_nm_hboondemand','max_pd_nm_resto','max_rsn_cncl_cancelacionusuario','max_rsn_cncl_cambioplan','max_rsn_cncl_procedimientosinternos','max_rsn_cncl_digitalizacion','max_rsn_cncl_resto','max_trfc_dwld','avg_trfc_dwld','sum_trfc_dwld','max_trfc_upld','avg_trfc_upld','sum_trfc_upld','dsc_cablemodem','dsc_cajahd','dsc_cajadigital','dsc_redinterna','dsc_pd_resto','rsn_opn_ctt_sinsenalcaja','rsn_opn_ctt_intermitencia','rsn_opn_ctt_nivelesincorrectos','rsn_opn_ctt_sinsenal','rsn_opn_ctt_resto','rsn_cls_ctt_cierreautomatico','rsn_cls_ctt_resto','avg_dt_pcs_dif_ctt_seconds','sum_dt_pcs_dif_ctt_seconds','max_dt_pcs_dif_ctt_seconds','avg_arpu_opening','max_arpu_opening','min_arpu_opening','avg_cncls','max_cncls','min_cncls','avg_cncls_mtd','max_cncls_mtd','min_cncls_mtd','avg_cm_affcttd','max_cm_affcttd','min_cm_affcttd','avg_dcctns_vlntrs','max_dcctns_vlntrs','min_dcctns_vlntrs','avg_dtrctr_sprt','max_dtrctr_sprt','min_dtrctr_sprt','avg_dtrctr_use','max_dtrctr_use','min_dtrctr_use','avg_hhcc_cls','max_hhcc_cls','min_hhcc_cls','avg_hhcc_opening','max_hhcc_opening','min_hhcc_opening','avg_hrs_affcttn','max_hrs_affcttn','min_hrs_affcttn','avg_ingrss_opening','max_ingrss_opening','min_ingrss_opening','avg_intns','max_intns','min_intns','avg_intns_mtd','max_intns_mtd','min_intns_mtd','avg_prmtr_sprt','max_prmtr_sprt','min_prmtr_sprt','avg_prmtr_use','max_prmtr_use','min_prmtr_use','avg_rtnts','max_rtnts','min_rtnts','avg_rtnts_mtd','max_rtnts_mtd','min_rtnts_mtd','avg_tms_unavl','max_tms_unavl','min_tms_unavl','dsc_st_pcs_rtn_finalizado','dsc_st_pcs_rtn_working','max_dt_pcs_rtn_dif_seconds','avg_dt_pcs_rtn_dif_seconds','desc_segmentation_cd','desc_segmentation_d','desc_segmentation_abcplus','desc_segmentation_resto','rslt_rtn_retenido','rslt_rtn_no_retenido','rslt_rtn_no_aplica','rslt_rtn_efectivo','rslt_rtn_no_localizado','rslt_rtn_resto','rsn_rtn_economicas','rsn_rtn_comercial','rsn_rtn_insatisfaccion','rsn_rtn_proyecto_correctivo','rsn_rtn_personales','rsn_rtn_competencia','rsn_rtn_casa_vacia','rsn_rtn_resto','tp_rtn_reactiva','tp_rtn_proactiva','tp_rtn_traslado','tp_rtn_premium','tp_rtn_resto','max_ctt_producto_tel','max_ctt_producto_int','max_ctt_producto_tv','avg_ctt_producto_tel','avg_ctt_producto_int','avg_ctt_producto_tv','max_dsc_st_pcs_co_finalizado','max_dsc_st_pcs_co_working','max_dsc_st_pcs_co_cancelado','max_dsc_st_pcs_co_abortado','max_cnl_sale_callcenter','max_cnl_sale_redessociales','max_dept_to_scl_programacion','max_dept_to_scl_cobros','max_dept_to_scl_callcenter','max_dept_to_scl_cortes','max_dept_to_scl_resto','max_dtl_cnslt_generales','max_dtl_cnslt_acciones_de_cobro','max_dtl_cnslt_sin_servicio','max_dtl_cnslt_consulta_saldo','max_dtl_cnslt_otros','max_dtl_cnslt_resto','max_mth_ctc_telefono','max_mth_ctc_redes_sociales','max_mth_ctc_resto','max_rsn_cnslt_sin_servicio','max_rsn_cnslt_consulta_generales_administrativos','max_rsn_cnslt_consulta_saldo','max_rsn_cnslt_seguimiento_a_la_cita','max_rsn_cnslt_consulta_de_restricciones','max_rsn_cnslt_resto','max_tp_cnl_chat','max_tp_cnl_twitter','max_tp_cnl_resto','max_tp_cnslt_informacion','max_tp_cnslt_dano_de_area','max_tp_cnslt_visita','max_tp_cnslt_gestion_tecnica','max_tp_cnslt_resto','avg_dt_pcs_co_dif_seconds','min_dt_pcs_co_dif_seconds']) }}\r\n            CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\r\n            max(max_resultado_intencion_int) as max_resultado_intencion_int,\r\n            max(max_resultado_intencion_tv) as max_resultado_intencion_tv,\r\n            max(max_resultado_intencion_tel) as max_resultado_intencion_tel,\r\n            max(max_dsc_seg) as max_dsc_seg,\r\n            avg(avg_DT_PCS_CO_DIF_SECONDS) as avg_DT_PCS_CO_DIF_SECONDS,\r\n            min(min_DT_PCS_CO_DIF_SECONDS) as min_DT_PCS_CO_DIF_SECONDS,\r\n            max(max_DT_PCS_CO_DIF_SECONDS) as max_DT_PCS_CO_DIF_SECONDS\r\n    FROM ultimas_semanas\r\n    GROUP BY hh_cd,    desc_clss_snr,\r\n            nodo,\r\n            desc_clss_ucer,\r\n            desc_clss_npa,\r\n            desc_ut_us,\r\n            bandwdth_key\r\n)  \r\n    {% if not loop.last %}\r\n        union all\r\n    {% endif %}\r\n{% endfor %}\r\n)\r\nselect\r\n*,\r\n{{ partition('monday') }}\r\nfrom clasificacion_conversion", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_mondays_between_dates_month", "macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target\\compiled\\VoluntaryChurnABT\\models\\analytics\\estadisticos_mensual.sql", "compiled": true, "compiled_code": "\n    \n\n\n    WITH ultimas_semanas AS (\n        SELECT *\n        FROM \"AwsDataCatalog\".\"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"\n        WHERE DATE(fecha_inicio_semana) < date_trunc('week', CURRENT_DATE)\n        AND DATE(fecha_inicio_semana) BETWEEN date_trunc('week',DATE('2023-02-01')) AND date_add('day',6,date_trunc('week',DATE('2023-08-07')))\n    ),\n\nclasificacion_conversion AS (\n\n\n(\n    SELECT  hh_cd,\n            desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            CAST('2023-07-17' AS date) AS monday,\n            desc_ut_us,\n            bandwdth_key,\n            \n\n    \n    max(case when max_antiguedad_ultimo_ctt_tel = -1 then 0 else max_antiguedad_ultimo_ctt_tel end) as max_max_antiguedad_ultimo_ctt_tel, \n    \n    max(case when max_antiguedad_ultimo_ctt_int = -1 then 0 else max_antiguedad_ultimo_ctt_int end) as max_max_antiguedad_ultimo_ctt_int, \n    \n    max(case when max_antiguedad_ultimo_ctt_tv = -1 then 0 else max_antiguedad_ultimo_ctt_tv end) as max_max_antiguedad_ultimo_ctt_tv, \n    \n    max(case when bandwdth_key = -1 then 0 else bandwdth_key end) as max_bandwdth_key, \n    \n    max(case when cm_us = -1 then 0 else cm_us end) as max_cm_us, \n    \n    max(case when numr = -1 then 0 else numr end) as max_numr, \n    \n    max(case when samp = -1 then 0 else samp end) as max_samp, \n    \n    max(case when ucer_deg = -1 then 0 else ucer_deg end) as max_ucer_deg, \n    \n    max(case when snr_deg = -1 then 0 else snr_deg end) as max_snr_deg, \n    \n    max(case when pct_npa = -1 then 0 else pct_npa end) as max_pct_npa, \n    \n    max(case when pct_ucer = -1 then 0 else pct_ucer end) as max_pct_ucer, \n    \n    max(case when es_gold = -1 then 0 else es_gold end) as max_es_gold, \n    \n    max(case when max_intencion_producto_int = -1 then 0 else max_intencion_producto_int end) as max_max_intencion_producto_int, \n    \n    max(case when max_intencion_producto_tv = -1 then 0 else max_intencion_producto_tv end) as max_max_intencion_producto_tv, \n    \n    max(case when max_intencion_producto_tel = -1 then 0 else max_intencion_producto_tel end) as max_max_intencion_producto_tel, \n    \n    max(case when max_dt_pcs_cnl_dif_seconds = -1 then 0 else max_dt_pcs_cnl_dif_seconds end) as max_max_dt_pcs_cnl_dif_seconds, \n    \n    max(case when flag_cncl = -1 then 0 else flag_cncl end) as max_flag_cncl, \n    \n    max(case when actn_cncl_cancelar_proceso = -1 then 0 else actn_cncl_cancelar_proceso end) as max_actn_cncl_cancelar_proceso, \n    \n    max(case when actn_cncl_requiere_visita_tecnica = -1 then 0 else actn_cncl_requiere_visita_tecnica end) as max_actn_cncl_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_correccion_logica = -1 then 0 else actn_cncl_correccion_logica end) as max_actn_cncl_correccion_logica, \n    \n    max(case when actn_cncl_no_requiere_visita_tecnica = -1 then 0 else actn_cncl_no_requiere_visita_tecnica end) as max_actn_cncl_no_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_retencion = -1 then 0 else actn_cncl_retencion end) as max_actn_cncl_retencion, \n    \n    max(case when actn_cncl_resto = -1 then 0 else actn_cncl_resto end) as max_actn_cncl_resto, \n    \n    max(case when max_cgy_cncl_economico = -1 then 0 else max_cgy_cncl_economico end) as max_max_cgy_cncl_economico, \n    \n    max(case when max_cgy_cncl_personales = -1 then 0 else max_cgy_cncl_personales end) as max_max_cgy_cncl_personales, \n    \n    max(case when max_cgy_cncl_insatisfaccion = -1 then 0 else max_cgy_cncl_insatisfaccion end) as max_max_cgy_cncl_insatisfaccion, \n    \n    max(case when max_cgy_cncl_comercial = -1 then 0 else max_cgy_cncl_comercial end) as max_max_cgy_cncl_comercial, \n    \n    max(case when max_cgy_cncl_competencia = -1 then 0 else max_cgy_cncl_competencia end) as max_max_cgy_cncl_competencia, \n    \n    max(case when max_cgy_cncl_resto = -1 then 0 else max_cgy_cncl_resto end) as max_max_cgy_cncl_resto, \n    \n    max(case when max_dsc_pcs_cnl_cancelacion = -1 then 0 else max_dsc_pcs_cnl_cancelacion end) as max_max_dsc_pcs_cnl_cancelacion, \n    \n    max(case when max_dsc_pcs_cnl_resto = -1 then 0 else max_dsc_pcs_cnl_resto end) as max_max_dsc_pcs_cnl_resto, \n    \n    max(case when max_ln_bsn_tv = -1 then 0 else max_ln_bsn_tv end) as max_max_ln_bsn_tv, \n    \n    max(case when max_ln_bsn_tel = -1 then 0 else max_ln_bsn_tel end) as max_max_ln_bsn_tel, \n    \n    max(case when max_ln_bsn_int = -1 then 0 else max_ln_bsn_int end) as max_max_ln_bsn_int, \n    \n    max(case when max_mtv_cncl_muchosgastos = -1 then 0 else max_mtv_cncl_muchosgastos end) as max_max_mtv_cncl_muchosgastos, \n    \n    max(case when max_mtv_cncl_saldoalto = -1 then 0 else max_mtv_cncl_saldoalto end) as max_max_mtv_cncl_saldoalto, \n    \n    max(case when max_mtv_cncl_aumentotarifa = -1 then 0 else max_mtv_cncl_aumentotarifa end) as max_max_mtv_cncl_aumentotarifa, \n    \n    max(case when max_mtv_cncl_documentacion = -1 then 0 else max_mtv_cncl_documentacion end) as max_max_mtv_cncl_documentacion, \n    \n    max(case when max_mtv_cncl_sininquilino = -1 then 0 else max_mtv_cncl_sininquilino end) as max_max_mtv_cncl_sininquilino, \n    \n    max(case when max_mtv_cncl_resto = -1 then 0 else max_mtv_cncl_resto end) as max_max_mtv_cncl_resto, \n    \n    max(case when max_pd_nm_cablemodem = -1 then 0 else max_pd_nm_cablemodem end) as max_max_pd_nm_cablemodem, \n    \n    max(case when max_pd_nm_cabletvhd = -1 then 0 else max_pd_nm_cabletvhd end) as max_max_pd_nm_cabletvhd, \n    \n    max(case when max_pd_nm_cabletvdigital = -1 then 0 else max_pd_nm_cabletvdigital end) as max_max_pd_nm_cabletvdigital, \n    \n    max(case when max_pd_nm_redinterna = -1 then 0 else max_pd_nm_redinterna end) as max_max_pd_nm_redinterna, \n    \n    max(case when max_pd_nm_hboondemand = -1 then 0 else max_pd_nm_hboondemand end) as max_max_pd_nm_hboondemand, \n    \n    max(case when max_pd_nm_resto = -1 then 0 else max_pd_nm_resto end) as max_max_pd_nm_resto, \n    \n    max(case when max_rsn_cncl_cancelacionusuario = -1 then 0 else max_rsn_cncl_cancelacionusuario end) as max_max_rsn_cncl_cancelacionusuario, \n    \n    max(case when max_rsn_cncl_cambioplan = -1 then 0 else max_rsn_cncl_cambioplan end) as max_max_rsn_cncl_cambioplan, \n    \n    max(case when max_rsn_cncl_procedimientosinternos = -1 then 0 else max_rsn_cncl_procedimientosinternos end) as max_max_rsn_cncl_procedimientosinternos, \n    \n    max(case when max_rsn_cncl_digitalizacion = -1 then 0 else max_rsn_cncl_digitalizacion end) as max_max_rsn_cncl_digitalizacion, \n    \n    max(case when max_rsn_cncl_resto = -1 then 0 else max_rsn_cncl_resto end) as max_max_rsn_cncl_resto, \n    \n    max(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as max_max_trfc_dwld, \n    \n    max(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as max_avg_trfc_dwld, \n    \n    max(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as max_sum_trfc_dwld, \n    \n    max(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as max_max_trfc_upld, \n    \n    max(case when avg_trfc_upld = -1 then 0 else avg_trfc_upld end) as max_avg_trfc_upld, \n    \n    max(case when sum_trfc_upld = -1 then 0 else sum_trfc_upld end) as max_sum_trfc_upld, \n    \n    max(case when dsc_cablemodem = -1 then 0 else dsc_cablemodem end) as max_dsc_cablemodem, \n    \n    max(case when dsc_cajahd = -1 then 0 else dsc_cajahd end) as max_dsc_cajahd, \n    \n    max(case when dsc_cajadigital = -1 then 0 else dsc_cajadigital end) as max_dsc_cajadigital, \n    \n    max(case when dsc_redinterna = -1 then 0 else dsc_redinterna end) as max_dsc_redinterna, \n    \n    max(case when dsc_pd_resto = -1 then 0 else dsc_pd_resto end) as max_dsc_pd_resto, \n    \n    max(case when rsn_opn_ctt_sinsenalcaja = -1 then 0 else rsn_opn_ctt_sinsenalcaja end) as max_rsn_opn_ctt_sinsenalcaja, \n    \n    max(case when rsn_opn_ctt_intermitencia = -1 then 0 else rsn_opn_ctt_intermitencia end) as max_rsn_opn_ctt_intermitencia, \n    \n    max(case when rsn_opn_ctt_nivelesincorrectos = -1 then 0 else rsn_opn_ctt_nivelesincorrectos end) as max_rsn_opn_ctt_nivelesincorrectos, \n    \n    max(case when rsn_opn_ctt_sinsenal = -1 then 0 else rsn_opn_ctt_sinsenal end) as max_rsn_opn_ctt_sinsenal, \n    \n    max(case when rsn_opn_ctt_resto = -1 then 0 else rsn_opn_ctt_resto end) as max_rsn_opn_ctt_resto, \n    \n    max(case when rsn_cls_ctt_cierreautomatico = -1 then 0 else rsn_cls_ctt_cierreautomatico end) as max_rsn_cls_ctt_cierreautomatico, \n    \n    max(case when rsn_cls_ctt_resto = -1 then 0 else rsn_cls_ctt_resto end) as max_rsn_cls_ctt_resto, \n    \n    max(case when avg_dt_pcs_dif_ctt_seconds = -1 then 0 else avg_dt_pcs_dif_ctt_seconds end) as max_avg_dt_pcs_dif_ctt_seconds, \n    \n    max(case when sum_dt_pcs_dif_ctt_seconds = -1 then 0 else sum_dt_pcs_dif_ctt_seconds end) as max_sum_dt_pcs_dif_ctt_seconds, \n    \n    max(case when max_dt_pcs_dif_ctt_seconds = -1 then 0 else max_dt_pcs_dif_ctt_seconds end) as max_max_dt_pcs_dif_ctt_seconds, \n    \n    max(case when avg_arpu_opening = -1 then 0 else avg_arpu_opening end) as max_avg_arpu_opening, \n    \n    max(case when max_arpu_opening = -1 then 0 else max_arpu_opening end) as max_max_arpu_opening, \n    \n    max(case when min_arpu_opening = -1 then 0 else min_arpu_opening end) as max_min_arpu_opening, \n    \n    max(case when avg_cncls = -1 then 0 else avg_cncls end) as max_avg_cncls, \n    \n    max(case when max_cncls = -1 then 0 else max_cncls end) as max_max_cncls, \n    \n    max(case when min_cncls = -1 then 0 else min_cncls end) as max_min_cncls, \n    \n    max(case when avg_cncls_mtd = -1 then 0 else avg_cncls_mtd end) as max_avg_cncls_mtd, \n    \n    max(case when max_cncls_mtd = -1 then 0 else max_cncls_mtd end) as max_max_cncls_mtd, \n    \n    max(case when min_cncls_mtd = -1 then 0 else min_cncls_mtd end) as max_min_cncls_mtd, \n    \n    max(case when avg_cm_affcttd = -1 then 0 else avg_cm_affcttd end) as max_avg_cm_affcttd, \n    \n    max(case when max_cm_affcttd = -1 then 0 else max_cm_affcttd end) as max_max_cm_affcttd, \n    \n    max(case when min_cm_affcttd = -1 then 0 else min_cm_affcttd end) as max_min_cm_affcttd, \n    \n    max(case when avg_dcctns_vlntrs = -1 then 0 else avg_dcctns_vlntrs end) as max_avg_dcctns_vlntrs, \n    \n    max(case when max_dcctns_vlntrs = -1 then 0 else max_dcctns_vlntrs end) as max_max_dcctns_vlntrs, \n    \n    max(case when min_dcctns_vlntrs = -1 then 0 else min_dcctns_vlntrs end) as max_min_dcctns_vlntrs, \n    \n    max(case when avg_dtrctr_sprt = -1 then 0 else avg_dtrctr_sprt end) as max_avg_dtrctr_sprt, \n    \n    max(case when max_dtrctr_sprt = -1 then 0 else max_dtrctr_sprt end) as max_max_dtrctr_sprt, \n    \n    max(case when min_dtrctr_sprt = -1 then 0 else min_dtrctr_sprt end) as max_min_dtrctr_sprt, \n    \n    max(case when avg_dtrctr_use = -1 then 0 else avg_dtrctr_use end) as max_avg_dtrctr_use, \n    \n    max(case when max_dtrctr_use = -1 then 0 else max_dtrctr_use end) as max_max_dtrctr_use, \n    \n    max(case when min_dtrctr_use = -1 then 0 else min_dtrctr_use end) as max_min_dtrctr_use, \n    \n    max(case when avg_hhcc_cls = -1 then 0 else avg_hhcc_cls end) as max_avg_hhcc_cls, \n    \n    max(case when max_hhcc_cls = -1 then 0 else max_hhcc_cls end) as max_max_hhcc_cls, \n    \n    max(case when min_hhcc_cls = -1 then 0 else min_hhcc_cls end) as max_min_hhcc_cls, \n    \n    max(case when avg_hhcc_opening = -1 then 0 else avg_hhcc_opening end) as max_avg_hhcc_opening, \n    \n    max(case when max_hhcc_opening = -1 then 0 else max_hhcc_opening end) as max_max_hhcc_opening, \n    \n    max(case when min_hhcc_opening = -1 then 0 else min_hhcc_opening end) as max_min_hhcc_opening, \n    \n    max(case when avg_hrs_affcttn = -1 then 0 else avg_hrs_affcttn end) as max_avg_hrs_affcttn, \n    \n    max(case when max_hrs_affcttn = -1 then 0 else max_hrs_affcttn end) as max_max_hrs_affcttn, \n    \n    max(case when min_hrs_affcttn = -1 then 0 else min_hrs_affcttn end) as max_min_hrs_affcttn, \n    \n    max(case when avg_ingrss_opening = -1 then 0 else avg_ingrss_opening end) as max_avg_ingrss_opening, \n    \n    max(case when max_ingrss_opening = -1 then 0 else max_ingrss_opening end) as max_max_ingrss_opening, \n    \n    max(case when min_ingrss_opening = -1 then 0 else min_ingrss_opening end) as max_min_ingrss_opening, \n    \n    max(case when avg_intns = -1 then 0 else avg_intns end) as max_avg_intns, \n    \n    max(case when max_intns = -1 then 0 else max_intns end) as max_max_intns, \n    \n    max(case when min_intns = -1 then 0 else min_intns end) as max_min_intns, \n    \n    max(case when avg_intns_mtd = -1 then 0 else avg_intns_mtd end) as max_avg_intns_mtd, \n    \n    max(case when max_intns_mtd = -1 then 0 else max_intns_mtd end) as max_max_intns_mtd, \n    \n    max(case when min_intns_mtd = -1 then 0 else min_intns_mtd end) as max_min_intns_mtd, \n    \n    max(case when avg_prmtr_sprt = -1 then 0 else avg_prmtr_sprt end) as max_avg_prmtr_sprt, \n    \n    max(case when max_prmtr_sprt = -1 then 0 else max_prmtr_sprt end) as max_max_prmtr_sprt, \n    \n    max(case when min_prmtr_sprt = -1 then 0 else min_prmtr_sprt end) as max_min_prmtr_sprt, \n    \n    max(case when avg_prmtr_use = -1 then 0 else avg_prmtr_use end) as max_avg_prmtr_use, \n    \n    max(case when max_prmtr_use = -1 then 0 else max_prmtr_use end) as max_max_prmtr_use, \n    \n    max(case when min_prmtr_use = -1 then 0 else min_prmtr_use end) as max_min_prmtr_use, \n    \n    max(case when avg_rtnts = -1 then 0 else avg_rtnts end) as max_avg_rtnts, \n    \n    max(case when max_rtnts = -1 then 0 else max_rtnts end) as max_max_rtnts, \n    \n    max(case when min_rtnts = -1 then 0 else min_rtnts end) as max_min_rtnts, \n    \n    max(case when avg_rtnts_mtd = -1 then 0 else avg_rtnts_mtd end) as max_avg_rtnts_mtd, \n    \n    max(case when max_rtnts_mtd = -1 then 0 else max_rtnts_mtd end) as max_max_rtnts_mtd, \n    \n    max(case when min_rtnts_mtd = -1 then 0 else min_rtnts_mtd end) as max_min_rtnts_mtd, \n    \n    max(case when avg_tms_unavl = -1 then 0 else avg_tms_unavl end) as max_avg_tms_unavl, \n    \n    max(case when max_tms_unavl = -1 then 0 else max_tms_unavl end) as max_max_tms_unavl, \n    \n    max(case when min_tms_unavl = -1 then 0 else min_tms_unavl end) as max_min_tms_unavl, \n    \n    max(case when dsc_st_pcs_rtn_finalizado = -1 then 0 else dsc_st_pcs_rtn_finalizado end) as max_dsc_st_pcs_rtn_finalizado, \n    \n    max(case when dsc_st_pcs_rtn_working = -1 then 0 else dsc_st_pcs_rtn_working end) as max_dsc_st_pcs_rtn_working, \n    \n    max(case when max_dt_pcs_rtn_dif_seconds = -1 then 0 else max_dt_pcs_rtn_dif_seconds end) as max_max_dt_pcs_rtn_dif_seconds, \n    \n    max(case when avg_dt_pcs_rtn_dif_seconds = -1 then 0 else avg_dt_pcs_rtn_dif_seconds end) as max_avg_dt_pcs_rtn_dif_seconds, \n    \n    max(case when desc_segmentation_cd = -1 then 0 else desc_segmentation_cd end) as max_desc_segmentation_cd, \n    \n    max(case when desc_segmentation_d = -1 then 0 else desc_segmentation_d end) as max_desc_segmentation_d, \n    \n    max(case when desc_segmentation_abcplus = -1 then 0 else desc_segmentation_abcplus end) as max_desc_segmentation_abcplus, \n    \n    max(case when desc_segmentation_resto = -1 then 0 else desc_segmentation_resto end) as max_desc_segmentation_resto, \n    \n    max(case when rslt_rtn_retenido = -1 then 0 else rslt_rtn_retenido end) as max_rslt_rtn_retenido, \n    \n    max(case when rslt_rtn_no_retenido = -1 then 0 else rslt_rtn_no_retenido end) as max_rslt_rtn_no_retenido, \n    \n    max(case when rslt_rtn_no_aplica = -1 then 0 else rslt_rtn_no_aplica end) as max_rslt_rtn_no_aplica, \n    \n    max(case when rslt_rtn_efectivo = -1 then 0 else rslt_rtn_efectivo end) as max_rslt_rtn_efectivo, \n    \n    max(case when rslt_rtn_no_localizado = -1 then 0 else rslt_rtn_no_localizado end) as max_rslt_rtn_no_localizado, \n    \n    max(case when rslt_rtn_resto = -1 then 0 else rslt_rtn_resto end) as max_rslt_rtn_resto, \n    \n    max(case when rsn_rtn_economicas = -1 then 0 else rsn_rtn_economicas end) as max_rsn_rtn_economicas, \n    \n    max(case when rsn_rtn_comercial = -1 then 0 else rsn_rtn_comercial end) as max_rsn_rtn_comercial, \n    \n    max(case when rsn_rtn_insatisfaccion = -1 then 0 else rsn_rtn_insatisfaccion end) as max_rsn_rtn_insatisfaccion, \n    \n    max(case when rsn_rtn_proyecto_correctivo = -1 then 0 else rsn_rtn_proyecto_correctivo end) as max_rsn_rtn_proyecto_correctivo, \n    \n    max(case when rsn_rtn_personales = -1 then 0 else rsn_rtn_personales end) as max_rsn_rtn_personales, \n    \n    max(case when rsn_rtn_competencia = -1 then 0 else rsn_rtn_competencia end) as max_rsn_rtn_competencia, \n    \n    max(case when rsn_rtn_casa_vacia = -1 then 0 else rsn_rtn_casa_vacia end) as max_rsn_rtn_casa_vacia, \n    \n    max(case when rsn_rtn_resto = -1 then 0 else rsn_rtn_resto end) as max_rsn_rtn_resto, \n    \n    max(case when tp_rtn_reactiva = -1 then 0 else tp_rtn_reactiva end) as max_tp_rtn_reactiva, \n    \n    max(case when tp_rtn_proactiva = -1 then 0 else tp_rtn_proactiva end) as max_tp_rtn_proactiva, \n    \n    max(case when tp_rtn_traslado = -1 then 0 else tp_rtn_traslado end) as max_tp_rtn_traslado, \n    \n    max(case when tp_rtn_premium = -1 then 0 else tp_rtn_premium end) as max_tp_rtn_premium, \n    \n    max(case when tp_rtn_resto = -1 then 0 else tp_rtn_resto end) as max_tp_rtn_resto, \n    \n    max(case when max_ctt_producto_tel = -1 then 0 else max_ctt_producto_tel end) as max_max_ctt_producto_tel, \n    \n    max(case when max_ctt_producto_int = -1 then 0 else max_ctt_producto_int end) as max_max_ctt_producto_int, \n    \n    max(case when max_ctt_producto_tv = -1 then 0 else max_ctt_producto_tv end) as max_max_ctt_producto_tv, \n    \n    max(case when avg_ctt_producto_tel = -1 then 0 else avg_ctt_producto_tel end) as max_avg_ctt_producto_tel, \n    \n    max(case when avg_ctt_producto_int = -1 then 0 else avg_ctt_producto_int end) as max_avg_ctt_producto_int, \n    \n    max(case when avg_ctt_producto_tv = -1 then 0 else avg_ctt_producto_tv end) as max_avg_ctt_producto_tv, \n    \n    max(case when max_dsc_st_pcs_co_finalizado = -1 then 0 else max_dsc_st_pcs_co_finalizado end) as max_max_dsc_st_pcs_co_finalizado, \n    \n    max(case when max_dsc_st_pcs_co_working = -1 then 0 else max_dsc_st_pcs_co_working end) as max_max_dsc_st_pcs_co_working, \n    \n    max(case when max_dsc_st_pcs_co_cancelado = -1 then 0 else max_dsc_st_pcs_co_cancelado end) as max_max_dsc_st_pcs_co_cancelado, \n    \n    max(case when max_dsc_st_pcs_co_abortado = -1 then 0 else max_dsc_st_pcs_co_abortado end) as max_max_dsc_st_pcs_co_abortado, \n    \n    max(case when max_cnl_sale_callcenter = -1 then 0 else max_cnl_sale_callcenter end) as max_max_cnl_sale_callcenter, \n    \n    max(case when max_cnl_sale_redessociales = -1 then 0 else max_cnl_sale_redessociales end) as max_max_cnl_sale_redessociales, \n    \n    max(case when max_dept_to_scl_programacion = -1 then 0 else max_dept_to_scl_programacion end) as max_max_dept_to_scl_programacion, \n    \n    max(case when max_dept_to_scl_cobros = -1 then 0 else max_dept_to_scl_cobros end) as max_max_dept_to_scl_cobros, \n    \n    max(case when max_dept_to_scl_callcenter = -1 then 0 else max_dept_to_scl_callcenter end) as max_max_dept_to_scl_callcenter, \n    \n    max(case when max_dept_to_scl_cortes = -1 then 0 else max_dept_to_scl_cortes end) as max_max_dept_to_scl_cortes, \n    \n    max(case when max_dept_to_scl_resto = -1 then 0 else max_dept_to_scl_resto end) as max_max_dept_to_scl_resto, \n    \n    max(case when max_dtl_cnslt_generales = -1 then 0 else max_dtl_cnslt_generales end) as max_max_dtl_cnslt_generales, \n    \n    max(case when max_dtl_cnslt_acciones_de_cobro = -1 then 0 else max_dtl_cnslt_acciones_de_cobro end) as max_max_dtl_cnslt_acciones_de_cobro, \n    \n    max(case when max_dtl_cnslt_sin_servicio = -1 then 0 else max_dtl_cnslt_sin_servicio end) as max_max_dtl_cnslt_sin_servicio, \n    \n    max(case when max_dtl_cnslt_consulta_saldo = -1 then 0 else max_dtl_cnslt_consulta_saldo end) as max_max_dtl_cnslt_consulta_saldo, \n    \n    max(case when max_dtl_cnslt_otros = -1 then 0 else max_dtl_cnslt_otros end) as max_max_dtl_cnslt_otros, \n    \n    max(case when max_dtl_cnslt_resto = -1 then 0 else max_dtl_cnslt_resto end) as max_max_dtl_cnslt_resto, \n    \n    max(case when max_mth_ctc_telefono = -1 then 0 else max_mth_ctc_telefono end) as max_max_mth_ctc_telefono, \n    \n    max(case when max_mth_ctc_redes_sociales = -1 then 0 else max_mth_ctc_redes_sociales end) as max_max_mth_ctc_redes_sociales, \n    \n    max(case when max_mth_ctc_resto = -1 then 0 else max_mth_ctc_resto end) as max_max_mth_ctc_resto, \n    \n    max(case when max_rsn_cnslt_sin_servicio = -1 then 0 else max_rsn_cnslt_sin_servicio end) as max_max_rsn_cnslt_sin_servicio, \n    \n    max(case when max_rsn_cnslt_consulta_generales_administrativos = -1 then 0 else max_rsn_cnslt_consulta_generales_administrativos end) as max_max_rsn_cnslt_consulta_generales_administrativos, \n    \n    max(case when max_rsn_cnslt_consulta_saldo = -1 then 0 else max_rsn_cnslt_consulta_saldo end) as max_max_rsn_cnslt_consulta_saldo, \n    \n    max(case when max_rsn_cnslt_seguimiento_a_la_cita = -1 then 0 else max_rsn_cnslt_seguimiento_a_la_cita end) as max_max_rsn_cnslt_seguimiento_a_la_cita, \n    \n    max(case when max_rsn_cnslt_consulta_de_restricciones = -1 then 0 else max_rsn_cnslt_consulta_de_restricciones end) as max_max_rsn_cnslt_consulta_de_restricciones, \n    \n    max(case when max_rsn_cnslt_resto = -1 then 0 else max_rsn_cnslt_resto end) as max_max_rsn_cnslt_resto, \n    \n    max(case when max_tp_cnl_chat = -1 then 0 else max_tp_cnl_chat end) as max_max_tp_cnl_chat, \n    \n    max(case when max_tp_cnl_twitter = -1 then 0 else max_tp_cnl_twitter end) as max_max_tp_cnl_twitter, \n    \n    max(case when max_tp_cnl_resto = -1 then 0 else max_tp_cnl_resto end) as max_max_tp_cnl_resto, \n    \n    max(case when max_tp_cnslt_informacion = -1 then 0 else max_tp_cnslt_informacion end) as max_max_tp_cnslt_informacion, \n    \n    max(case when max_tp_cnslt_dano_de_area = -1 then 0 else max_tp_cnslt_dano_de_area end) as max_max_tp_cnslt_dano_de_area, \n    \n    max(case when max_tp_cnslt_visita = -1 then 0 else max_tp_cnslt_visita end) as max_max_tp_cnslt_visita, \n    \n    max(case when max_tp_cnslt_gestion_tecnica = -1 then 0 else max_tp_cnslt_gestion_tecnica end) as max_max_tp_cnslt_gestion_tecnica, \n    \n    max(case when max_tp_cnslt_resto = -1 then 0 else max_tp_cnslt_resto end) as max_max_tp_cnslt_resto, \n    \n    max(case when avg_dt_pcs_co_dif_seconds = -1 then 0 else avg_dt_pcs_co_dif_seconds end) as max_avg_dt_pcs_co_dif_seconds, \n    \n    max(case when min_dt_pcs_co_dif_seconds = -1 then 0 else min_dt_pcs_co_dif_seconds end) as max_min_dt_pcs_co_dif_seconds, \n    \n\n\n            CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\n            max(max_resultado_intencion_int) as max_resultado_intencion_int,\n            max(max_resultado_intencion_tv) as max_resultado_intencion_tv,\n            max(max_resultado_intencion_tel) as max_resultado_intencion_tel,\n            max(max_dsc_seg) as max_dsc_seg,\n            avg(avg_DT_PCS_CO_DIF_SECONDS) as avg_DT_PCS_CO_DIF_SECONDS,\n            min(min_DT_PCS_CO_DIF_SECONDS) as min_DT_PCS_CO_DIF_SECONDS,\n            max(max_DT_PCS_CO_DIF_SECONDS) as max_DT_PCS_CO_DIF_SECONDS\n    FROM ultimas_semanas\n    GROUP BY hh_cd,    desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            desc_ut_us,\n            bandwdth_key\n)  \n    \n        union all\n    \n\n(\n    SELECT  hh_cd,\n            desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            CAST('2023-07-24' AS date) AS monday,\n            desc_ut_us,\n            bandwdth_key,\n            \n\n    \n    max(case when max_antiguedad_ultimo_ctt_tel = -1 then 0 else max_antiguedad_ultimo_ctt_tel end) as max_max_antiguedad_ultimo_ctt_tel, \n    \n    max(case when max_antiguedad_ultimo_ctt_int = -1 then 0 else max_antiguedad_ultimo_ctt_int end) as max_max_antiguedad_ultimo_ctt_int, \n    \n    max(case when max_antiguedad_ultimo_ctt_tv = -1 then 0 else max_antiguedad_ultimo_ctt_tv end) as max_max_antiguedad_ultimo_ctt_tv, \n    \n    max(case when bandwdth_key = -1 then 0 else bandwdth_key end) as max_bandwdth_key, \n    \n    max(case when cm_us = -1 then 0 else cm_us end) as max_cm_us, \n    \n    max(case when numr = -1 then 0 else numr end) as max_numr, \n    \n    max(case when samp = -1 then 0 else samp end) as max_samp, \n    \n    max(case when ucer_deg = -1 then 0 else ucer_deg end) as max_ucer_deg, \n    \n    max(case when snr_deg = -1 then 0 else snr_deg end) as max_snr_deg, \n    \n    max(case when pct_npa = -1 then 0 else pct_npa end) as max_pct_npa, \n    \n    max(case when pct_ucer = -1 then 0 else pct_ucer end) as max_pct_ucer, \n    \n    max(case when es_gold = -1 then 0 else es_gold end) as max_es_gold, \n    \n    max(case when max_intencion_producto_int = -1 then 0 else max_intencion_producto_int end) as max_max_intencion_producto_int, \n    \n    max(case when max_intencion_producto_tv = -1 then 0 else max_intencion_producto_tv end) as max_max_intencion_producto_tv, \n    \n    max(case when max_intencion_producto_tel = -1 then 0 else max_intencion_producto_tel end) as max_max_intencion_producto_tel, \n    \n    max(case when max_dt_pcs_cnl_dif_seconds = -1 then 0 else max_dt_pcs_cnl_dif_seconds end) as max_max_dt_pcs_cnl_dif_seconds, \n    \n    max(case when flag_cncl = -1 then 0 else flag_cncl end) as max_flag_cncl, \n    \n    max(case when actn_cncl_cancelar_proceso = -1 then 0 else actn_cncl_cancelar_proceso end) as max_actn_cncl_cancelar_proceso, \n    \n    max(case when actn_cncl_requiere_visita_tecnica = -1 then 0 else actn_cncl_requiere_visita_tecnica end) as max_actn_cncl_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_correccion_logica = -1 then 0 else actn_cncl_correccion_logica end) as max_actn_cncl_correccion_logica, \n    \n    max(case when actn_cncl_no_requiere_visita_tecnica = -1 then 0 else actn_cncl_no_requiere_visita_tecnica end) as max_actn_cncl_no_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_retencion = -1 then 0 else actn_cncl_retencion end) as max_actn_cncl_retencion, \n    \n    max(case when actn_cncl_resto = -1 then 0 else actn_cncl_resto end) as max_actn_cncl_resto, \n    \n    max(case when max_cgy_cncl_economico = -1 then 0 else max_cgy_cncl_economico end) as max_max_cgy_cncl_economico, \n    \n    max(case when max_cgy_cncl_personales = -1 then 0 else max_cgy_cncl_personales end) as max_max_cgy_cncl_personales, \n    \n    max(case when max_cgy_cncl_insatisfaccion = -1 then 0 else max_cgy_cncl_insatisfaccion end) as max_max_cgy_cncl_insatisfaccion, \n    \n    max(case when max_cgy_cncl_comercial = -1 then 0 else max_cgy_cncl_comercial end) as max_max_cgy_cncl_comercial, \n    \n    max(case when max_cgy_cncl_competencia = -1 then 0 else max_cgy_cncl_competencia end) as max_max_cgy_cncl_competencia, \n    \n    max(case when max_cgy_cncl_resto = -1 then 0 else max_cgy_cncl_resto end) as max_max_cgy_cncl_resto, \n    \n    max(case when max_dsc_pcs_cnl_cancelacion = -1 then 0 else max_dsc_pcs_cnl_cancelacion end) as max_max_dsc_pcs_cnl_cancelacion, \n    \n    max(case when max_dsc_pcs_cnl_resto = -1 then 0 else max_dsc_pcs_cnl_resto end) as max_max_dsc_pcs_cnl_resto, \n    \n    max(case when max_ln_bsn_tv = -1 then 0 else max_ln_bsn_tv end) as max_max_ln_bsn_tv, \n    \n    max(case when max_ln_bsn_tel = -1 then 0 else max_ln_bsn_tel end) as max_max_ln_bsn_tel, \n    \n    max(case when max_ln_bsn_int = -1 then 0 else max_ln_bsn_int end) as max_max_ln_bsn_int, \n    \n    max(case when max_mtv_cncl_muchosgastos = -1 then 0 else max_mtv_cncl_muchosgastos end) as max_max_mtv_cncl_muchosgastos, \n    \n    max(case when max_mtv_cncl_saldoalto = -1 then 0 else max_mtv_cncl_saldoalto end) as max_max_mtv_cncl_saldoalto, \n    \n    max(case when max_mtv_cncl_aumentotarifa = -1 then 0 else max_mtv_cncl_aumentotarifa end) as max_max_mtv_cncl_aumentotarifa, \n    \n    max(case when max_mtv_cncl_documentacion = -1 then 0 else max_mtv_cncl_documentacion end) as max_max_mtv_cncl_documentacion, \n    \n    max(case when max_mtv_cncl_sininquilino = -1 then 0 else max_mtv_cncl_sininquilino end) as max_max_mtv_cncl_sininquilino, \n    \n    max(case when max_mtv_cncl_resto = -1 then 0 else max_mtv_cncl_resto end) as max_max_mtv_cncl_resto, \n    \n    max(case when max_pd_nm_cablemodem = -1 then 0 else max_pd_nm_cablemodem end) as max_max_pd_nm_cablemodem, \n    \n    max(case when max_pd_nm_cabletvhd = -1 then 0 else max_pd_nm_cabletvhd end) as max_max_pd_nm_cabletvhd, \n    \n    max(case when max_pd_nm_cabletvdigital = -1 then 0 else max_pd_nm_cabletvdigital end) as max_max_pd_nm_cabletvdigital, \n    \n    max(case when max_pd_nm_redinterna = -1 then 0 else max_pd_nm_redinterna end) as max_max_pd_nm_redinterna, \n    \n    max(case when max_pd_nm_hboondemand = -1 then 0 else max_pd_nm_hboondemand end) as max_max_pd_nm_hboondemand, \n    \n    max(case when max_pd_nm_resto = -1 then 0 else max_pd_nm_resto end) as max_max_pd_nm_resto, \n    \n    max(case when max_rsn_cncl_cancelacionusuario = -1 then 0 else max_rsn_cncl_cancelacionusuario end) as max_max_rsn_cncl_cancelacionusuario, \n    \n    max(case when max_rsn_cncl_cambioplan = -1 then 0 else max_rsn_cncl_cambioplan end) as max_max_rsn_cncl_cambioplan, \n    \n    max(case when max_rsn_cncl_procedimientosinternos = -1 then 0 else max_rsn_cncl_procedimientosinternos end) as max_max_rsn_cncl_procedimientosinternos, \n    \n    max(case when max_rsn_cncl_digitalizacion = -1 then 0 else max_rsn_cncl_digitalizacion end) as max_max_rsn_cncl_digitalizacion, \n    \n    max(case when max_rsn_cncl_resto = -1 then 0 else max_rsn_cncl_resto end) as max_max_rsn_cncl_resto, \n    \n    max(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as max_max_trfc_dwld, \n    \n    max(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as max_avg_trfc_dwld, \n    \n    max(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as max_sum_trfc_dwld, \n    \n    max(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as max_max_trfc_upld, \n    \n    max(case when avg_trfc_upld = -1 then 0 else avg_trfc_upld end) as max_avg_trfc_upld, \n    \n    max(case when sum_trfc_upld = -1 then 0 else sum_trfc_upld end) as max_sum_trfc_upld, \n    \n    max(case when dsc_cablemodem = -1 then 0 else dsc_cablemodem end) as max_dsc_cablemodem, \n    \n    max(case when dsc_cajahd = -1 then 0 else dsc_cajahd end) as max_dsc_cajahd, \n    \n    max(case when dsc_cajadigital = -1 then 0 else dsc_cajadigital end) as max_dsc_cajadigital, \n    \n    max(case when dsc_redinterna = -1 then 0 else dsc_redinterna end) as max_dsc_redinterna, \n    \n    max(case when dsc_pd_resto = -1 then 0 else dsc_pd_resto end) as max_dsc_pd_resto, \n    \n    max(case when rsn_opn_ctt_sinsenalcaja = -1 then 0 else rsn_opn_ctt_sinsenalcaja end) as max_rsn_opn_ctt_sinsenalcaja, \n    \n    max(case when rsn_opn_ctt_intermitencia = -1 then 0 else rsn_opn_ctt_intermitencia end) as max_rsn_opn_ctt_intermitencia, \n    \n    max(case when rsn_opn_ctt_nivelesincorrectos = -1 then 0 else rsn_opn_ctt_nivelesincorrectos end) as max_rsn_opn_ctt_nivelesincorrectos, \n    \n    max(case when rsn_opn_ctt_sinsenal = -1 then 0 else rsn_opn_ctt_sinsenal end) as max_rsn_opn_ctt_sinsenal, \n    \n    max(case when rsn_opn_ctt_resto = -1 then 0 else rsn_opn_ctt_resto end) as max_rsn_opn_ctt_resto, \n    \n    max(case when rsn_cls_ctt_cierreautomatico = -1 then 0 else rsn_cls_ctt_cierreautomatico end) as max_rsn_cls_ctt_cierreautomatico, \n    \n    max(case when rsn_cls_ctt_resto = -1 then 0 else rsn_cls_ctt_resto end) as max_rsn_cls_ctt_resto, \n    \n    max(case when avg_dt_pcs_dif_ctt_seconds = -1 then 0 else avg_dt_pcs_dif_ctt_seconds end) as max_avg_dt_pcs_dif_ctt_seconds, \n    \n    max(case when sum_dt_pcs_dif_ctt_seconds = -1 then 0 else sum_dt_pcs_dif_ctt_seconds end) as max_sum_dt_pcs_dif_ctt_seconds, \n    \n    max(case when max_dt_pcs_dif_ctt_seconds = -1 then 0 else max_dt_pcs_dif_ctt_seconds end) as max_max_dt_pcs_dif_ctt_seconds, \n    \n    max(case when avg_arpu_opening = -1 then 0 else avg_arpu_opening end) as max_avg_arpu_opening, \n    \n    max(case when max_arpu_opening = -1 then 0 else max_arpu_opening end) as max_max_arpu_opening, \n    \n    max(case when min_arpu_opening = -1 then 0 else min_arpu_opening end) as max_min_arpu_opening, \n    \n    max(case when avg_cncls = -1 then 0 else avg_cncls end) as max_avg_cncls, \n    \n    max(case when max_cncls = -1 then 0 else max_cncls end) as max_max_cncls, \n    \n    max(case when min_cncls = -1 then 0 else min_cncls end) as max_min_cncls, \n    \n    max(case when avg_cncls_mtd = -1 then 0 else avg_cncls_mtd end) as max_avg_cncls_mtd, \n    \n    max(case when max_cncls_mtd = -1 then 0 else max_cncls_mtd end) as max_max_cncls_mtd, \n    \n    max(case when min_cncls_mtd = -1 then 0 else min_cncls_mtd end) as max_min_cncls_mtd, \n    \n    max(case when avg_cm_affcttd = -1 then 0 else avg_cm_affcttd end) as max_avg_cm_affcttd, \n    \n    max(case when max_cm_affcttd = -1 then 0 else max_cm_affcttd end) as max_max_cm_affcttd, \n    \n    max(case when min_cm_affcttd = -1 then 0 else min_cm_affcttd end) as max_min_cm_affcttd, \n    \n    max(case when avg_dcctns_vlntrs = -1 then 0 else avg_dcctns_vlntrs end) as max_avg_dcctns_vlntrs, \n    \n    max(case when max_dcctns_vlntrs = -1 then 0 else max_dcctns_vlntrs end) as max_max_dcctns_vlntrs, \n    \n    max(case when min_dcctns_vlntrs = -1 then 0 else min_dcctns_vlntrs end) as max_min_dcctns_vlntrs, \n    \n    max(case when avg_dtrctr_sprt = -1 then 0 else avg_dtrctr_sprt end) as max_avg_dtrctr_sprt, \n    \n    max(case when max_dtrctr_sprt = -1 then 0 else max_dtrctr_sprt end) as max_max_dtrctr_sprt, \n    \n    max(case when min_dtrctr_sprt = -1 then 0 else min_dtrctr_sprt end) as max_min_dtrctr_sprt, \n    \n    max(case when avg_dtrctr_use = -1 then 0 else avg_dtrctr_use end) as max_avg_dtrctr_use, \n    \n    max(case when max_dtrctr_use = -1 then 0 else max_dtrctr_use end) as max_max_dtrctr_use, \n    \n    max(case when min_dtrctr_use = -1 then 0 else min_dtrctr_use end) as max_min_dtrctr_use, \n    \n    max(case when avg_hhcc_cls = -1 then 0 else avg_hhcc_cls end) as max_avg_hhcc_cls, \n    \n    max(case when max_hhcc_cls = -1 then 0 else max_hhcc_cls end) as max_max_hhcc_cls, \n    \n    max(case when min_hhcc_cls = -1 then 0 else min_hhcc_cls end) as max_min_hhcc_cls, \n    \n    max(case when avg_hhcc_opening = -1 then 0 else avg_hhcc_opening end) as max_avg_hhcc_opening, \n    \n    max(case when max_hhcc_opening = -1 then 0 else max_hhcc_opening end) as max_max_hhcc_opening, \n    \n    max(case when min_hhcc_opening = -1 then 0 else min_hhcc_opening end) as max_min_hhcc_opening, \n    \n    max(case when avg_hrs_affcttn = -1 then 0 else avg_hrs_affcttn end) as max_avg_hrs_affcttn, \n    \n    max(case when max_hrs_affcttn = -1 then 0 else max_hrs_affcttn end) as max_max_hrs_affcttn, \n    \n    max(case when min_hrs_affcttn = -1 then 0 else min_hrs_affcttn end) as max_min_hrs_affcttn, \n    \n    max(case when avg_ingrss_opening = -1 then 0 else avg_ingrss_opening end) as max_avg_ingrss_opening, \n    \n    max(case when max_ingrss_opening = -1 then 0 else max_ingrss_opening end) as max_max_ingrss_opening, \n    \n    max(case when min_ingrss_opening = -1 then 0 else min_ingrss_opening end) as max_min_ingrss_opening, \n    \n    max(case when avg_intns = -1 then 0 else avg_intns end) as max_avg_intns, \n    \n    max(case when max_intns = -1 then 0 else max_intns end) as max_max_intns, \n    \n    max(case when min_intns = -1 then 0 else min_intns end) as max_min_intns, \n    \n    max(case when avg_intns_mtd = -1 then 0 else avg_intns_mtd end) as max_avg_intns_mtd, \n    \n    max(case when max_intns_mtd = -1 then 0 else max_intns_mtd end) as max_max_intns_mtd, \n    \n    max(case when min_intns_mtd = -1 then 0 else min_intns_mtd end) as max_min_intns_mtd, \n    \n    max(case when avg_prmtr_sprt = -1 then 0 else avg_prmtr_sprt end) as max_avg_prmtr_sprt, \n    \n    max(case when max_prmtr_sprt = -1 then 0 else max_prmtr_sprt end) as max_max_prmtr_sprt, \n    \n    max(case when min_prmtr_sprt = -1 then 0 else min_prmtr_sprt end) as max_min_prmtr_sprt, \n    \n    max(case when avg_prmtr_use = -1 then 0 else avg_prmtr_use end) as max_avg_prmtr_use, \n    \n    max(case when max_prmtr_use = -1 then 0 else max_prmtr_use end) as max_max_prmtr_use, \n    \n    max(case when min_prmtr_use = -1 then 0 else min_prmtr_use end) as max_min_prmtr_use, \n    \n    max(case when avg_rtnts = -1 then 0 else avg_rtnts end) as max_avg_rtnts, \n    \n    max(case when max_rtnts = -1 then 0 else max_rtnts end) as max_max_rtnts, \n    \n    max(case when min_rtnts = -1 then 0 else min_rtnts end) as max_min_rtnts, \n    \n    max(case when avg_rtnts_mtd = -1 then 0 else avg_rtnts_mtd end) as max_avg_rtnts_mtd, \n    \n    max(case when max_rtnts_mtd = -1 then 0 else max_rtnts_mtd end) as max_max_rtnts_mtd, \n    \n    max(case when min_rtnts_mtd = -1 then 0 else min_rtnts_mtd end) as max_min_rtnts_mtd, \n    \n    max(case when avg_tms_unavl = -1 then 0 else avg_tms_unavl end) as max_avg_tms_unavl, \n    \n    max(case when max_tms_unavl = -1 then 0 else max_tms_unavl end) as max_max_tms_unavl, \n    \n    max(case when min_tms_unavl = -1 then 0 else min_tms_unavl end) as max_min_tms_unavl, \n    \n    max(case when dsc_st_pcs_rtn_finalizado = -1 then 0 else dsc_st_pcs_rtn_finalizado end) as max_dsc_st_pcs_rtn_finalizado, \n    \n    max(case when dsc_st_pcs_rtn_working = -1 then 0 else dsc_st_pcs_rtn_working end) as max_dsc_st_pcs_rtn_working, \n    \n    max(case when max_dt_pcs_rtn_dif_seconds = -1 then 0 else max_dt_pcs_rtn_dif_seconds end) as max_max_dt_pcs_rtn_dif_seconds, \n    \n    max(case when avg_dt_pcs_rtn_dif_seconds = -1 then 0 else avg_dt_pcs_rtn_dif_seconds end) as max_avg_dt_pcs_rtn_dif_seconds, \n    \n    max(case when desc_segmentation_cd = -1 then 0 else desc_segmentation_cd end) as max_desc_segmentation_cd, \n    \n    max(case when desc_segmentation_d = -1 then 0 else desc_segmentation_d end) as max_desc_segmentation_d, \n    \n    max(case when desc_segmentation_abcplus = -1 then 0 else desc_segmentation_abcplus end) as max_desc_segmentation_abcplus, \n    \n    max(case when desc_segmentation_resto = -1 then 0 else desc_segmentation_resto end) as max_desc_segmentation_resto, \n    \n    max(case when rslt_rtn_retenido = -1 then 0 else rslt_rtn_retenido end) as max_rslt_rtn_retenido, \n    \n    max(case when rslt_rtn_no_retenido = -1 then 0 else rslt_rtn_no_retenido end) as max_rslt_rtn_no_retenido, \n    \n    max(case when rslt_rtn_no_aplica = -1 then 0 else rslt_rtn_no_aplica end) as max_rslt_rtn_no_aplica, \n    \n    max(case when rslt_rtn_efectivo = -1 then 0 else rslt_rtn_efectivo end) as max_rslt_rtn_efectivo, \n    \n    max(case when rslt_rtn_no_localizado = -1 then 0 else rslt_rtn_no_localizado end) as max_rslt_rtn_no_localizado, \n    \n    max(case when rslt_rtn_resto = -1 then 0 else rslt_rtn_resto end) as max_rslt_rtn_resto, \n    \n    max(case when rsn_rtn_economicas = -1 then 0 else rsn_rtn_economicas end) as max_rsn_rtn_economicas, \n    \n    max(case when rsn_rtn_comercial = -1 then 0 else rsn_rtn_comercial end) as max_rsn_rtn_comercial, \n    \n    max(case when rsn_rtn_insatisfaccion = -1 then 0 else rsn_rtn_insatisfaccion end) as max_rsn_rtn_insatisfaccion, \n    \n    max(case when rsn_rtn_proyecto_correctivo = -1 then 0 else rsn_rtn_proyecto_correctivo end) as max_rsn_rtn_proyecto_correctivo, \n    \n    max(case when rsn_rtn_personales = -1 then 0 else rsn_rtn_personales end) as max_rsn_rtn_personales, \n    \n    max(case when rsn_rtn_competencia = -1 then 0 else rsn_rtn_competencia end) as max_rsn_rtn_competencia, \n    \n    max(case when rsn_rtn_casa_vacia = -1 then 0 else rsn_rtn_casa_vacia end) as max_rsn_rtn_casa_vacia, \n    \n    max(case when rsn_rtn_resto = -1 then 0 else rsn_rtn_resto end) as max_rsn_rtn_resto, \n    \n    max(case when tp_rtn_reactiva = -1 then 0 else tp_rtn_reactiva end) as max_tp_rtn_reactiva, \n    \n    max(case when tp_rtn_proactiva = -1 then 0 else tp_rtn_proactiva end) as max_tp_rtn_proactiva, \n    \n    max(case when tp_rtn_traslado = -1 then 0 else tp_rtn_traslado end) as max_tp_rtn_traslado, \n    \n    max(case when tp_rtn_premium = -1 then 0 else tp_rtn_premium end) as max_tp_rtn_premium, \n    \n    max(case when tp_rtn_resto = -1 then 0 else tp_rtn_resto end) as max_tp_rtn_resto, \n    \n    max(case when max_ctt_producto_tel = -1 then 0 else max_ctt_producto_tel end) as max_max_ctt_producto_tel, \n    \n    max(case when max_ctt_producto_int = -1 then 0 else max_ctt_producto_int end) as max_max_ctt_producto_int, \n    \n    max(case when max_ctt_producto_tv = -1 then 0 else max_ctt_producto_tv end) as max_max_ctt_producto_tv, \n    \n    max(case when avg_ctt_producto_tel = -1 then 0 else avg_ctt_producto_tel end) as max_avg_ctt_producto_tel, \n    \n    max(case when avg_ctt_producto_int = -1 then 0 else avg_ctt_producto_int end) as max_avg_ctt_producto_int, \n    \n    max(case when avg_ctt_producto_tv = -1 then 0 else avg_ctt_producto_tv end) as max_avg_ctt_producto_tv, \n    \n    max(case when max_dsc_st_pcs_co_finalizado = -1 then 0 else max_dsc_st_pcs_co_finalizado end) as max_max_dsc_st_pcs_co_finalizado, \n    \n    max(case when max_dsc_st_pcs_co_working = -1 then 0 else max_dsc_st_pcs_co_working end) as max_max_dsc_st_pcs_co_working, \n    \n    max(case when max_dsc_st_pcs_co_cancelado = -1 then 0 else max_dsc_st_pcs_co_cancelado end) as max_max_dsc_st_pcs_co_cancelado, \n    \n    max(case when max_dsc_st_pcs_co_abortado = -1 then 0 else max_dsc_st_pcs_co_abortado end) as max_max_dsc_st_pcs_co_abortado, \n    \n    max(case when max_cnl_sale_callcenter = -1 then 0 else max_cnl_sale_callcenter end) as max_max_cnl_sale_callcenter, \n    \n    max(case when max_cnl_sale_redessociales = -1 then 0 else max_cnl_sale_redessociales end) as max_max_cnl_sale_redessociales, \n    \n    max(case when max_dept_to_scl_programacion = -1 then 0 else max_dept_to_scl_programacion end) as max_max_dept_to_scl_programacion, \n    \n    max(case when max_dept_to_scl_cobros = -1 then 0 else max_dept_to_scl_cobros end) as max_max_dept_to_scl_cobros, \n    \n    max(case when max_dept_to_scl_callcenter = -1 then 0 else max_dept_to_scl_callcenter end) as max_max_dept_to_scl_callcenter, \n    \n    max(case when max_dept_to_scl_cortes = -1 then 0 else max_dept_to_scl_cortes end) as max_max_dept_to_scl_cortes, \n    \n    max(case when max_dept_to_scl_resto = -1 then 0 else max_dept_to_scl_resto end) as max_max_dept_to_scl_resto, \n    \n    max(case when max_dtl_cnslt_generales = -1 then 0 else max_dtl_cnslt_generales end) as max_max_dtl_cnslt_generales, \n    \n    max(case when max_dtl_cnslt_acciones_de_cobro = -1 then 0 else max_dtl_cnslt_acciones_de_cobro end) as max_max_dtl_cnslt_acciones_de_cobro, \n    \n    max(case when max_dtl_cnslt_sin_servicio = -1 then 0 else max_dtl_cnslt_sin_servicio end) as max_max_dtl_cnslt_sin_servicio, \n    \n    max(case when max_dtl_cnslt_consulta_saldo = -1 then 0 else max_dtl_cnslt_consulta_saldo end) as max_max_dtl_cnslt_consulta_saldo, \n    \n    max(case when max_dtl_cnslt_otros = -1 then 0 else max_dtl_cnslt_otros end) as max_max_dtl_cnslt_otros, \n    \n    max(case when max_dtl_cnslt_resto = -1 then 0 else max_dtl_cnslt_resto end) as max_max_dtl_cnslt_resto, \n    \n    max(case when max_mth_ctc_telefono = -1 then 0 else max_mth_ctc_telefono end) as max_max_mth_ctc_telefono, \n    \n    max(case when max_mth_ctc_redes_sociales = -1 then 0 else max_mth_ctc_redes_sociales end) as max_max_mth_ctc_redes_sociales, \n    \n    max(case when max_mth_ctc_resto = -1 then 0 else max_mth_ctc_resto end) as max_max_mth_ctc_resto, \n    \n    max(case when max_rsn_cnslt_sin_servicio = -1 then 0 else max_rsn_cnslt_sin_servicio end) as max_max_rsn_cnslt_sin_servicio, \n    \n    max(case when max_rsn_cnslt_consulta_generales_administrativos = -1 then 0 else max_rsn_cnslt_consulta_generales_administrativos end) as max_max_rsn_cnslt_consulta_generales_administrativos, \n    \n    max(case when max_rsn_cnslt_consulta_saldo = -1 then 0 else max_rsn_cnslt_consulta_saldo end) as max_max_rsn_cnslt_consulta_saldo, \n    \n    max(case when max_rsn_cnslt_seguimiento_a_la_cita = -1 then 0 else max_rsn_cnslt_seguimiento_a_la_cita end) as max_max_rsn_cnslt_seguimiento_a_la_cita, \n    \n    max(case when max_rsn_cnslt_consulta_de_restricciones = -1 then 0 else max_rsn_cnslt_consulta_de_restricciones end) as max_max_rsn_cnslt_consulta_de_restricciones, \n    \n    max(case when max_rsn_cnslt_resto = -1 then 0 else max_rsn_cnslt_resto end) as max_max_rsn_cnslt_resto, \n    \n    max(case when max_tp_cnl_chat = -1 then 0 else max_tp_cnl_chat end) as max_max_tp_cnl_chat, \n    \n    max(case when max_tp_cnl_twitter = -1 then 0 else max_tp_cnl_twitter end) as max_max_tp_cnl_twitter, \n    \n    max(case when max_tp_cnl_resto = -1 then 0 else max_tp_cnl_resto end) as max_max_tp_cnl_resto, \n    \n    max(case when max_tp_cnslt_informacion = -1 then 0 else max_tp_cnslt_informacion end) as max_max_tp_cnslt_informacion, \n    \n    max(case when max_tp_cnslt_dano_de_area = -1 then 0 else max_tp_cnslt_dano_de_area end) as max_max_tp_cnslt_dano_de_area, \n    \n    max(case when max_tp_cnslt_visita = -1 then 0 else max_tp_cnslt_visita end) as max_max_tp_cnslt_visita, \n    \n    max(case when max_tp_cnslt_gestion_tecnica = -1 then 0 else max_tp_cnslt_gestion_tecnica end) as max_max_tp_cnslt_gestion_tecnica, \n    \n    max(case when max_tp_cnslt_resto = -1 then 0 else max_tp_cnslt_resto end) as max_max_tp_cnslt_resto, \n    \n    max(case when avg_dt_pcs_co_dif_seconds = -1 then 0 else avg_dt_pcs_co_dif_seconds end) as max_avg_dt_pcs_co_dif_seconds, \n    \n    max(case when min_dt_pcs_co_dif_seconds = -1 then 0 else min_dt_pcs_co_dif_seconds end) as max_min_dt_pcs_co_dif_seconds, \n    \n\n\n            CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\n            max(max_resultado_intencion_int) as max_resultado_intencion_int,\n            max(max_resultado_intencion_tv) as max_resultado_intencion_tv,\n            max(max_resultado_intencion_tel) as max_resultado_intencion_tel,\n            max(max_dsc_seg) as max_dsc_seg,\n            avg(avg_DT_PCS_CO_DIF_SECONDS) as avg_DT_PCS_CO_DIF_SECONDS,\n            min(min_DT_PCS_CO_DIF_SECONDS) as min_DT_PCS_CO_DIF_SECONDS,\n            max(max_DT_PCS_CO_DIF_SECONDS) as max_DT_PCS_CO_DIF_SECONDS\n    FROM ultimas_semanas\n    GROUP BY hh_cd,    desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            desc_ut_us,\n            bandwdth_key\n)  \n    \n        union all\n    \n\n(\n    SELECT  hh_cd,\n            desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            CAST('2023-07-31' AS date) AS monday,\n            desc_ut_us,\n            bandwdth_key,\n            \n\n    \n    max(case when max_antiguedad_ultimo_ctt_tel = -1 then 0 else max_antiguedad_ultimo_ctt_tel end) as max_max_antiguedad_ultimo_ctt_tel, \n    \n    max(case when max_antiguedad_ultimo_ctt_int = -1 then 0 else max_antiguedad_ultimo_ctt_int end) as max_max_antiguedad_ultimo_ctt_int, \n    \n    max(case when max_antiguedad_ultimo_ctt_tv = -1 then 0 else max_antiguedad_ultimo_ctt_tv end) as max_max_antiguedad_ultimo_ctt_tv, \n    \n    max(case when bandwdth_key = -1 then 0 else bandwdth_key end) as max_bandwdth_key, \n    \n    max(case when cm_us = -1 then 0 else cm_us end) as max_cm_us, \n    \n    max(case when numr = -1 then 0 else numr end) as max_numr, \n    \n    max(case when samp = -1 then 0 else samp end) as max_samp, \n    \n    max(case when ucer_deg = -1 then 0 else ucer_deg end) as max_ucer_deg, \n    \n    max(case when snr_deg = -1 then 0 else snr_deg end) as max_snr_deg, \n    \n    max(case when pct_npa = -1 then 0 else pct_npa end) as max_pct_npa, \n    \n    max(case when pct_ucer = -1 then 0 else pct_ucer end) as max_pct_ucer, \n    \n    max(case when es_gold = -1 then 0 else es_gold end) as max_es_gold, \n    \n    max(case when max_intencion_producto_int = -1 then 0 else max_intencion_producto_int end) as max_max_intencion_producto_int, \n    \n    max(case when max_intencion_producto_tv = -1 then 0 else max_intencion_producto_tv end) as max_max_intencion_producto_tv, \n    \n    max(case when max_intencion_producto_tel = -1 then 0 else max_intencion_producto_tel end) as max_max_intencion_producto_tel, \n    \n    max(case when max_dt_pcs_cnl_dif_seconds = -1 then 0 else max_dt_pcs_cnl_dif_seconds end) as max_max_dt_pcs_cnl_dif_seconds, \n    \n    max(case when flag_cncl = -1 then 0 else flag_cncl end) as max_flag_cncl, \n    \n    max(case when actn_cncl_cancelar_proceso = -1 then 0 else actn_cncl_cancelar_proceso end) as max_actn_cncl_cancelar_proceso, \n    \n    max(case when actn_cncl_requiere_visita_tecnica = -1 then 0 else actn_cncl_requiere_visita_tecnica end) as max_actn_cncl_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_correccion_logica = -1 then 0 else actn_cncl_correccion_logica end) as max_actn_cncl_correccion_logica, \n    \n    max(case when actn_cncl_no_requiere_visita_tecnica = -1 then 0 else actn_cncl_no_requiere_visita_tecnica end) as max_actn_cncl_no_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_retencion = -1 then 0 else actn_cncl_retencion end) as max_actn_cncl_retencion, \n    \n    max(case when actn_cncl_resto = -1 then 0 else actn_cncl_resto end) as max_actn_cncl_resto, \n    \n    max(case when max_cgy_cncl_economico = -1 then 0 else max_cgy_cncl_economico end) as max_max_cgy_cncl_economico, \n    \n    max(case when max_cgy_cncl_personales = -1 then 0 else max_cgy_cncl_personales end) as max_max_cgy_cncl_personales, \n    \n    max(case when max_cgy_cncl_insatisfaccion = -1 then 0 else max_cgy_cncl_insatisfaccion end) as max_max_cgy_cncl_insatisfaccion, \n    \n    max(case when max_cgy_cncl_comercial = -1 then 0 else max_cgy_cncl_comercial end) as max_max_cgy_cncl_comercial, \n    \n    max(case when max_cgy_cncl_competencia = -1 then 0 else max_cgy_cncl_competencia end) as max_max_cgy_cncl_competencia, \n    \n    max(case when max_cgy_cncl_resto = -1 then 0 else max_cgy_cncl_resto end) as max_max_cgy_cncl_resto, \n    \n    max(case when max_dsc_pcs_cnl_cancelacion = -1 then 0 else max_dsc_pcs_cnl_cancelacion end) as max_max_dsc_pcs_cnl_cancelacion, \n    \n    max(case when max_dsc_pcs_cnl_resto = -1 then 0 else max_dsc_pcs_cnl_resto end) as max_max_dsc_pcs_cnl_resto, \n    \n    max(case when max_ln_bsn_tv = -1 then 0 else max_ln_bsn_tv end) as max_max_ln_bsn_tv, \n    \n    max(case when max_ln_bsn_tel = -1 then 0 else max_ln_bsn_tel end) as max_max_ln_bsn_tel, \n    \n    max(case when max_ln_bsn_int = -1 then 0 else max_ln_bsn_int end) as max_max_ln_bsn_int, \n    \n    max(case when max_mtv_cncl_muchosgastos = -1 then 0 else max_mtv_cncl_muchosgastos end) as max_max_mtv_cncl_muchosgastos, \n    \n    max(case when max_mtv_cncl_saldoalto = -1 then 0 else max_mtv_cncl_saldoalto end) as max_max_mtv_cncl_saldoalto, \n    \n    max(case when max_mtv_cncl_aumentotarifa = -1 then 0 else max_mtv_cncl_aumentotarifa end) as max_max_mtv_cncl_aumentotarifa, \n    \n    max(case when max_mtv_cncl_documentacion = -1 then 0 else max_mtv_cncl_documentacion end) as max_max_mtv_cncl_documentacion, \n    \n    max(case when max_mtv_cncl_sininquilino = -1 then 0 else max_mtv_cncl_sininquilino end) as max_max_mtv_cncl_sininquilino, \n    \n    max(case when max_mtv_cncl_resto = -1 then 0 else max_mtv_cncl_resto end) as max_max_mtv_cncl_resto, \n    \n    max(case when max_pd_nm_cablemodem = -1 then 0 else max_pd_nm_cablemodem end) as max_max_pd_nm_cablemodem, \n    \n    max(case when max_pd_nm_cabletvhd = -1 then 0 else max_pd_nm_cabletvhd end) as max_max_pd_nm_cabletvhd, \n    \n    max(case when max_pd_nm_cabletvdigital = -1 then 0 else max_pd_nm_cabletvdigital end) as max_max_pd_nm_cabletvdigital, \n    \n    max(case when max_pd_nm_redinterna = -1 then 0 else max_pd_nm_redinterna end) as max_max_pd_nm_redinterna, \n    \n    max(case when max_pd_nm_hboondemand = -1 then 0 else max_pd_nm_hboondemand end) as max_max_pd_nm_hboondemand, \n    \n    max(case when max_pd_nm_resto = -1 then 0 else max_pd_nm_resto end) as max_max_pd_nm_resto, \n    \n    max(case when max_rsn_cncl_cancelacionusuario = -1 then 0 else max_rsn_cncl_cancelacionusuario end) as max_max_rsn_cncl_cancelacionusuario, \n    \n    max(case when max_rsn_cncl_cambioplan = -1 then 0 else max_rsn_cncl_cambioplan end) as max_max_rsn_cncl_cambioplan, \n    \n    max(case when max_rsn_cncl_procedimientosinternos = -1 then 0 else max_rsn_cncl_procedimientosinternos end) as max_max_rsn_cncl_procedimientosinternos, \n    \n    max(case when max_rsn_cncl_digitalizacion = -1 then 0 else max_rsn_cncl_digitalizacion end) as max_max_rsn_cncl_digitalizacion, \n    \n    max(case when max_rsn_cncl_resto = -1 then 0 else max_rsn_cncl_resto end) as max_max_rsn_cncl_resto, \n    \n    max(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as max_max_trfc_dwld, \n    \n    max(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as max_avg_trfc_dwld, \n    \n    max(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as max_sum_trfc_dwld, \n    \n    max(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as max_max_trfc_upld, \n    \n    max(case when avg_trfc_upld = -1 then 0 else avg_trfc_upld end) as max_avg_trfc_upld, \n    \n    max(case when sum_trfc_upld = -1 then 0 else sum_trfc_upld end) as max_sum_trfc_upld, \n    \n    max(case when dsc_cablemodem = -1 then 0 else dsc_cablemodem end) as max_dsc_cablemodem, \n    \n    max(case when dsc_cajahd = -1 then 0 else dsc_cajahd end) as max_dsc_cajahd, \n    \n    max(case when dsc_cajadigital = -1 then 0 else dsc_cajadigital end) as max_dsc_cajadigital, \n    \n    max(case when dsc_redinterna = -1 then 0 else dsc_redinterna end) as max_dsc_redinterna, \n    \n    max(case when dsc_pd_resto = -1 then 0 else dsc_pd_resto end) as max_dsc_pd_resto, \n    \n    max(case when rsn_opn_ctt_sinsenalcaja = -1 then 0 else rsn_opn_ctt_sinsenalcaja end) as max_rsn_opn_ctt_sinsenalcaja, \n    \n    max(case when rsn_opn_ctt_intermitencia = -1 then 0 else rsn_opn_ctt_intermitencia end) as max_rsn_opn_ctt_intermitencia, \n    \n    max(case when rsn_opn_ctt_nivelesincorrectos = -1 then 0 else rsn_opn_ctt_nivelesincorrectos end) as max_rsn_opn_ctt_nivelesincorrectos, \n    \n    max(case when rsn_opn_ctt_sinsenal = -1 then 0 else rsn_opn_ctt_sinsenal end) as max_rsn_opn_ctt_sinsenal, \n    \n    max(case when rsn_opn_ctt_resto = -1 then 0 else rsn_opn_ctt_resto end) as max_rsn_opn_ctt_resto, \n    \n    max(case when rsn_cls_ctt_cierreautomatico = -1 then 0 else rsn_cls_ctt_cierreautomatico end) as max_rsn_cls_ctt_cierreautomatico, \n    \n    max(case when rsn_cls_ctt_resto = -1 then 0 else rsn_cls_ctt_resto end) as max_rsn_cls_ctt_resto, \n    \n    max(case when avg_dt_pcs_dif_ctt_seconds = -1 then 0 else avg_dt_pcs_dif_ctt_seconds end) as max_avg_dt_pcs_dif_ctt_seconds, \n    \n    max(case when sum_dt_pcs_dif_ctt_seconds = -1 then 0 else sum_dt_pcs_dif_ctt_seconds end) as max_sum_dt_pcs_dif_ctt_seconds, \n    \n    max(case when max_dt_pcs_dif_ctt_seconds = -1 then 0 else max_dt_pcs_dif_ctt_seconds end) as max_max_dt_pcs_dif_ctt_seconds, \n    \n    max(case when avg_arpu_opening = -1 then 0 else avg_arpu_opening end) as max_avg_arpu_opening, \n    \n    max(case when max_arpu_opening = -1 then 0 else max_arpu_opening end) as max_max_arpu_opening, \n    \n    max(case when min_arpu_opening = -1 then 0 else min_arpu_opening end) as max_min_arpu_opening, \n    \n    max(case when avg_cncls = -1 then 0 else avg_cncls end) as max_avg_cncls, \n    \n    max(case when max_cncls = -1 then 0 else max_cncls end) as max_max_cncls, \n    \n    max(case when min_cncls = -1 then 0 else min_cncls end) as max_min_cncls, \n    \n    max(case when avg_cncls_mtd = -1 then 0 else avg_cncls_mtd end) as max_avg_cncls_mtd, \n    \n    max(case when max_cncls_mtd = -1 then 0 else max_cncls_mtd end) as max_max_cncls_mtd, \n    \n    max(case when min_cncls_mtd = -1 then 0 else min_cncls_mtd end) as max_min_cncls_mtd, \n    \n    max(case when avg_cm_affcttd = -1 then 0 else avg_cm_affcttd end) as max_avg_cm_affcttd, \n    \n    max(case when max_cm_affcttd = -1 then 0 else max_cm_affcttd end) as max_max_cm_affcttd, \n    \n    max(case when min_cm_affcttd = -1 then 0 else min_cm_affcttd end) as max_min_cm_affcttd, \n    \n    max(case when avg_dcctns_vlntrs = -1 then 0 else avg_dcctns_vlntrs end) as max_avg_dcctns_vlntrs, \n    \n    max(case when max_dcctns_vlntrs = -1 then 0 else max_dcctns_vlntrs end) as max_max_dcctns_vlntrs, \n    \n    max(case when min_dcctns_vlntrs = -1 then 0 else min_dcctns_vlntrs end) as max_min_dcctns_vlntrs, \n    \n    max(case when avg_dtrctr_sprt = -1 then 0 else avg_dtrctr_sprt end) as max_avg_dtrctr_sprt, \n    \n    max(case when max_dtrctr_sprt = -1 then 0 else max_dtrctr_sprt end) as max_max_dtrctr_sprt, \n    \n    max(case when min_dtrctr_sprt = -1 then 0 else min_dtrctr_sprt end) as max_min_dtrctr_sprt, \n    \n    max(case when avg_dtrctr_use = -1 then 0 else avg_dtrctr_use end) as max_avg_dtrctr_use, \n    \n    max(case when max_dtrctr_use = -1 then 0 else max_dtrctr_use end) as max_max_dtrctr_use, \n    \n    max(case when min_dtrctr_use = -1 then 0 else min_dtrctr_use end) as max_min_dtrctr_use, \n    \n    max(case when avg_hhcc_cls = -1 then 0 else avg_hhcc_cls end) as max_avg_hhcc_cls, \n    \n    max(case when max_hhcc_cls = -1 then 0 else max_hhcc_cls end) as max_max_hhcc_cls, \n    \n    max(case when min_hhcc_cls = -1 then 0 else min_hhcc_cls end) as max_min_hhcc_cls, \n    \n    max(case when avg_hhcc_opening = -1 then 0 else avg_hhcc_opening end) as max_avg_hhcc_opening, \n    \n    max(case when max_hhcc_opening = -1 then 0 else max_hhcc_opening end) as max_max_hhcc_opening, \n    \n    max(case when min_hhcc_opening = -1 then 0 else min_hhcc_opening end) as max_min_hhcc_opening, \n    \n    max(case when avg_hrs_affcttn = -1 then 0 else avg_hrs_affcttn end) as max_avg_hrs_affcttn, \n    \n    max(case when max_hrs_affcttn = -1 then 0 else max_hrs_affcttn end) as max_max_hrs_affcttn, \n    \n    max(case when min_hrs_affcttn = -1 then 0 else min_hrs_affcttn end) as max_min_hrs_affcttn, \n    \n    max(case when avg_ingrss_opening = -1 then 0 else avg_ingrss_opening end) as max_avg_ingrss_opening, \n    \n    max(case when max_ingrss_opening = -1 then 0 else max_ingrss_opening end) as max_max_ingrss_opening, \n    \n    max(case when min_ingrss_opening = -1 then 0 else min_ingrss_opening end) as max_min_ingrss_opening, \n    \n    max(case when avg_intns = -1 then 0 else avg_intns end) as max_avg_intns, \n    \n    max(case when max_intns = -1 then 0 else max_intns end) as max_max_intns, \n    \n    max(case when min_intns = -1 then 0 else min_intns end) as max_min_intns, \n    \n    max(case when avg_intns_mtd = -1 then 0 else avg_intns_mtd end) as max_avg_intns_mtd, \n    \n    max(case when max_intns_mtd = -1 then 0 else max_intns_mtd end) as max_max_intns_mtd, \n    \n    max(case when min_intns_mtd = -1 then 0 else min_intns_mtd end) as max_min_intns_mtd, \n    \n    max(case when avg_prmtr_sprt = -1 then 0 else avg_prmtr_sprt end) as max_avg_prmtr_sprt, \n    \n    max(case when max_prmtr_sprt = -1 then 0 else max_prmtr_sprt end) as max_max_prmtr_sprt, \n    \n    max(case when min_prmtr_sprt = -1 then 0 else min_prmtr_sprt end) as max_min_prmtr_sprt, \n    \n    max(case when avg_prmtr_use = -1 then 0 else avg_prmtr_use end) as max_avg_prmtr_use, \n    \n    max(case when max_prmtr_use = -1 then 0 else max_prmtr_use end) as max_max_prmtr_use, \n    \n    max(case when min_prmtr_use = -1 then 0 else min_prmtr_use end) as max_min_prmtr_use, \n    \n    max(case when avg_rtnts = -1 then 0 else avg_rtnts end) as max_avg_rtnts, \n    \n    max(case when max_rtnts = -1 then 0 else max_rtnts end) as max_max_rtnts, \n    \n    max(case when min_rtnts = -1 then 0 else min_rtnts end) as max_min_rtnts, \n    \n    max(case when avg_rtnts_mtd = -1 then 0 else avg_rtnts_mtd end) as max_avg_rtnts_mtd, \n    \n    max(case when max_rtnts_mtd = -1 then 0 else max_rtnts_mtd end) as max_max_rtnts_mtd, \n    \n    max(case when min_rtnts_mtd = -1 then 0 else min_rtnts_mtd end) as max_min_rtnts_mtd, \n    \n    max(case when avg_tms_unavl = -1 then 0 else avg_tms_unavl end) as max_avg_tms_unavl, \n    \n    max(case when max_tms_unavl = -1 then 0 else max_tms_unavl end) as max_max_tms_unavl, \n    \n    max(case when min_tms_unavl = -1 then 0 else min_tms_unavl end) as max_min_tms_unavl, \n    \n    max(case when dsc_st_pcs_rtn_finalizado = -1 then 0 else dsc_st_pcs_rtn_finalizado end) as max_dsc_st_pcs_rtn_finalizado, \n    \n    max(case when dsc_st_pcs_rtn_working = -1 then 0 else dsc_st_pcs_rtn_working end) as max_dsc_st_pcs_rtn_working, \n    \n    max(case when max_dt_pcs_rtn_dif_seconds = -1 then 0 else max_dt_pcs_rtn_dif_seconds end) as max_max_dt_pcs_rtn_dif_seconds, \n    \n    max(case when avg_dt_pcs_rtn_dif_seconds = -1 then 0 else avg_dt_pcs_rtn_dif_seconds end) as max_avg_dt_pcs_rtn_dif_seconds, \n    \n    max(case when desc_segmentation_cd = -1 then 0 else desc_segmentation_cd end) as max_desc_segmentation_cd, \n    \n    max(case when desc_segmentation_d = -1 then 0 else desc_segmentation_d end) as max_desc_segmentation_d, \n    \n    max(case when desc_segmentation_abcplus = -1 then 0 else desc_segmentation_abcplus end) as max_desc_segmentation_abcplus, \n    \n    max(case when desc_segmentation_resto = -1 then 0 else desc_segmentation_resto end) as max_desc_segmentation_resto, \n    \n    max(case when rslt_rtn_retenido = -1 then 0 else rslt_rtn_retenido end) as max_rslt_rtn_retenido, \n    \n    max(case when rslt_rtn_no_retenido = -1 then 0 else rslt_rtn_no_retenido end) as max_rslt_rtn_no_retenido, \n    \n    max(case when rslt_rtn_no_aplica = -1 then 0 else rslt_rtn_no_aplica end) as max_rslt_rtn_no_aplica, \n    \n    max(case when rslt_rtn_efectivo = -1 then 0 else rslt_rtn_efectivo end) as max_rslt_rtn_efectivo, \n    \n    max(case when rslt_rtn_no_localizado = -1 then 0 else rslt_rtn_no_localizado end) as max_rslt_rtn_no_localizado, \n    \n    max(case when rslt_rtn_resto = -1 then 0 else rslt_rtn_resto end) as max_rslt_rtn_resto, \n    \n    max(case when rsn_rtn_economicas = -1 then 0 else rsn_rtn_economicas end) as max_rsn_rtn_economicas, \n    \n    max(case when rsn_rtn_comercial = -1 then 0 else rsn_rtn_comercial end) as max_rsn_rtn_comercial, \n    \n    max(case when rsn_rtn_insatisfaccion = -1 then 0 else rsn_rtn_insatisfaccion end) as max_rsn_rtn_insatisfaccion, \n    \n    max(case when rsn_rtn_proyecto_correctivo = -1 then 0 else rsn_rtn_proyecto_correctivo end) as max_rsn_rtn_proyecto_correctivo, \n    \n    max(case when rsn_rtn_personales = -1 then 0 else rsn_rtn_personales end) as max_rsn_rtn_personales, \n    \n    max(case when rsn_rtn_competencia = -1 then 0 else rsn_rtn_competencia end) as max_rsn_rtn_competencia, \n    \n    max(case when rsn_rtn_casa_vacia = -1 then 0 else rsn_rtn_casa_vacia end) as max_rsn_rtn_casa_vacia, \n    \n    max(case when rsn_rtn_resto = -1 then 0 else rsn_rtn_resto end) as max_rsn_rtn_resto, \n    \n    max(case when tp_rtn_reactiva = -1 then 0 else tp_rtn_reactiva end) as max_tp_rtn_reactiva, \n    \n    max(case when tp_rtn_proactiva = -1 then 0 else tp_rtn_proactiva end) as max_tp_rtn_proactiva, \n    \n    max(case when tp_rtn_traslado = -1 then 0 else tp_rtn_traslado end) as max_tp_rtn_traslado, \n    \n    max(case when tp_rtn_premium = -1 then 0 else tp_rtn_premium end) as max_tp_rtn_premium, \n    \n    max(case when tp_rtn_resto = -1 then 0 else tp_rtn_resto end) as max_tp_rtn_resto, \n    \n    max(case when max_ctt_producto_tel = -1 then 0 else max_ctt_producto_tel end) as max_max_ctt_producto_tel, \n    \n    max(case when max_ctt_producto_int = -1 then 0 else max_ctt_producto_int end) as max_max_ctt_producto_int, \n    \n    max(case when max_ctt_producto_tv = -1 then 0 else max_ctt_producto_tv end) as max_max_ctt_producto_tv, \n    \n    max(case when avg_ctt_producto_tel = -1 then 0 else avg_ctt_producto_tel end) as max_avg_ctt_producto_tel, \n    \n    max(case when avg_ctt_producto_int = -1 then 0 else avg_ctt_producto_int end) as max_avg_ctt_producto_int, \n    \n    max(case when avg_ctt_producto_tv = -1 then 0 else avg_ctt_producto_tv end) as max_avg_ctt_producto_tv, \n    \n    max(case when max_dsc_st_pcs_co_finalizado = -1 then 0 else max_dsc_st_pcs_co_finalizado end) as max_max_dsc_st_pcs_co_finalizado, \n    \n    max(case when max_dsc_st_pcs_co_working = -1 then 0 else max_dsc_st_pcs_co_working end) as max_max_dsc_st_pcs_co_working, \n    \n    max(case when max_dsc_st_pcs_co_cancelado = -1 then 0 else max_dsc_st_pcs_co_cancelado end) as max_max_dsc_st_pcs_co_cancelado, \n    \n    max(case when max_dsc_st_pcs_co_abortado = -1 then 0 else max_dsc_st_pcs_co_abortado end) as max_max_dsc_st_pcs_co_abortado, \n    \n    max(case when max_cnl_sale_callcenter = -1 then 0 else max_cnl_sale_callcenter end) as max_max_cnl_sale_callcenter, \n    \n    max(case when max_cnl_sale_redessociales = -1 then 0 else max_cnl_sale_redessociales end) as max_max_cnl_sale_redessociales, \n    \n    max(case when max_dept_to_scl_programacion = -1 then 0 else max_dept_to_scl_programacion end) as max_max_dept_to_scl_programacion, \n    \n    max(case when max_dept_to_scl_cobros = -1 then 0 else max_dept_to_scl_cobros end) as max_max_dept_to_scl_cobros, \n    \n    max(case when max_dept_to_scl_callcenter = -1 then 0 else max_dept_to_scl_callcenter end) as max_max_dept_to_scl_callcenter, \n    \n    max(case when max_dept_to_scl_cortes = -1 then 0 else max_dept_to_scl_cortes end) as max_max_dept_to_scl_cortes, \n    \n    max(case when max_dept_to_scl_resto = -1 then 0 else max_dept_to_scl_resto end) as max_max_dept_to_scl_resto, \n    \n    max(case when max_dtl_cnslt_generales = -1 then 0 else max_dtl_cnslt_generales end) as max_max_dtl_cnslt_generales, \n    \n    max(case when max_dtl_cnslt_acciones_de_cobro = -1 then 0 else max_dtl_cnslt_acciones_de_cobro end) as max_max_dtl_cnslt_acciones_de_cobro, \n    \n    max(case when max_dtl_cnslt_sin_servicio = -1 then 0 else max_dtl_cnslt_sin_servicio end) as max_max_dtl_cnslt_sin_servicio, \n    \n    max(case when max_dtl_cnslt_consulta_saldo = -1 then 0 else max_dtl_cnslt_consulta_saldo end) as max_max_dtl_cnslt_consulta_saldo, \n    \n    max(case when max_dtl_cnslt_otros = -1 then 0 else max_dtl_cnslt_otros end) as max_max_dtl_cnslt_otros, \n    \n    max(case when max_dtl_cnslt_resto = -1 then 0 else max_dtl_cnslt_resto end) as max_max_dtl_cnslt_resto, \n    \n    max(case when max_mth_ctc_telefono = -1 then 0 else max_mth_ctc_telefono end) as max_max_mth_ctc_telefono, \n    \n    max(case when max_mth_ctc_redes_sociales = -1 then 0 else max_mth_ctc_redes_sociales end) as max_max_mth_ctc_redes_sociales, \n    \n    max(case when max_mth_ctc_resto = -1 then 0 else max_mth_ctc_resto end) as max_max_mth_ctc_resto, \n    \n    max(case when max_rsn_cnslt_sin_servicio = -1 then 0 else max_rsn_cnslt_sin_servicio end) as max_max_rsn_cnslt_sin_servicio, \n    \n    max(case when max_rsn_cnslt_consulta_generales_administrativos = -1 then 0 else max_rsn_cnslt_consulta_generales_administrativos end) as max_max_rsn_cnslt_consulta_generales_administrativos, \n    \n    max(case when max_rsn_cnslt_consulta_saldo = -1 then 0 else max_rsn_cnslt_consulta_saldo end) as max_max_rsn_cnslt_consulta_saldo, \n    \n    max(case when max_rsn_cnslt_seguimiento_a_la_cita = -1 then 0 else max_rsn_cnslt_seguimiento_a_la_cita end) as max_max_rsn_cnslt_seguimiento_a_la_cita, \n    \n    max(case when max_rsn_cnslt_consulta_de_restricciones = -1 then 0 else max_rsn_cnslt_consulta_de_restricciones end) as max_max_rsn_cnslt_consulta_de_restricciones, \n    \n    max(case when max_rsn_cnslt_resto = -1 then 0 else max_rsn_cnslt_resto end) as max_max_rsn_cnslt_resto, \n    \n    max(case when max_tp_cnl_chat = -1 then 0 else max_tp_cnl_chat end) as max_max_tp_cnl_chat, \n    \n    max(case when max_tp_cnl_twitter = -1 then 0 else max_tp_cnl_twitter end) as max_max_tp_cnl_twitter, \n    \n    max(case when max_tp_cnl_resto = -1 then 0 else max_tp_cnl_resto end) as max_max_tp_cnl_resto, \n    \n    max(case when max_tp_cnslt_informacion = -1 then 0 else max_tp_cnslt_informacion end) as max_max_tp_cnslt_informacion, \n    \n    max(case when max_tp_cnslt_dano_de_area = -1 then 0 else max_tp_cnslt_dano_de_area end) as max_max_tp_cnslt_dano_de_area, \n    \n    max(case when max_tp_cnslt_visita = -1 then 0 else max_tp_cnslt_visita end) as max_max_tp_cnslt_visita, \n    \n    max(case when max_tp_cnslt_gestion_tecnica = -1 then 0 else max_tp_cnslt_gestion_tecnica end) as max_max_tp_cnslt_gestion_tecnica, \n    \n    max(case when max_tp_cnslt_resto = -1 then 0 else max_tp_cnslt_resto end) as max_max_tp_cnslt_resto, \n    \n    max(case when avg_dt_pcs_co_dif_seconds = -1 then 0 else avg_dt_pcs_co_dif_seconds end) as max_avg_dt_pcs_co_dif_seconds, \n    \n    max(case when min_dt_pcs_co_dif_seconds = -1 then 0 else min_dt_pcs_co_dif_seconds end) as max_min_dt_pcs_co_dif_seconds, \n    \n\n\n            CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\n            max(max_resultado_intencion_int) as max_resultado_intencion_int,\n            max(max_resultado_intencion_tv) as max_resultado_intencion_tv,\n            max(max_resultado_intencion_tel) as max_resultado_intencion_tel,\n            max(max_dsc_seg) as max_dsc_seg,\n            avg(avg_DT_PCS_CO_DIF_SECONDS) as avg_DT_PCS_CO_DIF_SECONDS,\n            min(min_DT_PCS_CO_DIF_SECONDS) as min_DT_PCS_CO_DIF_SECONDS,\n            max(max_DT_PCS_CO_DIF_SECONDS) as max_DT_PCS_CO_DIF_SECONDS\n    FROM ultimas_semanas\n    GROUP BY hh_cd,    desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            desc_ut_us,\n            bandwdth_key\n)  \n    \n        union all\n    \n\n(\n    SELECT  hh_cd,\n            desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            CAST('2023-08-07' AS date) AS monday,\n            desc_ut_us,\n            bandwdth_key,\n            \n\n    \n    max(case when max_antiguedad_ultimo_ctt_tel = -1 then 0 else max_antiguedad_ultimo_ctt_tel end) as max_max_antiguedad_ultimo_ctt_tel, \n    \n    max(case when max_antiguedad_ultimo_ctt_int = -1 then 0 else max_antiguedad_ultimo_ctt_int end) as max_max_antiguedad_ultimo_ctt_int, \n    \n    max(case when max_antiguedad_ultimo_ctt_tv = -1 then 0 else max_antiguedad_ultimo_ctt_tv end) as max_max_antiguedad_ultimo_ctt_tv, \n    \n    max(case when bandwdth_key = -1 then 0 else bandwdth_key end) as max_bandwdth_key, \n    \n    max(case when cm_us = -1 then 0 else cm_us end) as max_cm_us, \n    \n    max(case when numr = -1 then 0 else numr end) as max_numr, \n    \n    max(case when samp = -1 then 0 else samp end) as max_samp, \n    \n    max(case when ucer_deg = -1 then 0 else ucer_deg end) as max_ucer_deg, \n    \n    max(case when snr_deg = -1 then 0 else snr_deg end) as max_snr_deg, \n    \n    max(case when pct_npa = -1 then 0 else pct_npa end) as max_pct_npa, \n    \n    max(case when pct_ucer = -1 then 0 else pct_ucer end) as max_pct_ucer, \n    \n    max(case when es_gold = -1 then 0 else es_gold end) as max_es_gold, \n    \n    max(case when max_intencion_producto_int = -1 then 0 else max_intencion_producto_int end) as max_max_intencion_producto_int, \n    \n    max(case when max_intencion_producto_tv = -1 then 0 else max_intencion_producto_tv end) as max_max_intencion_producto_tv, \n    \n    max(case when max_intencion_producto_tel = -1 then 0 else max_intencion_producto_tel end) as max_max_intencion_producto_tel, \n    \n    max(case when max_dt_pcs_cnl_dif_seconds = -1 then 0 else max_dt_pcs_cnl_dif_seconds end) as max_max_dt_pcs_cnl_dif_seconds, \n    \n    max(case when flag_cncl = -1 then 0 else flag_cncl end) as max_flag_cncl, \n    \n    max(case when actn_cncl_cancelar_proceso = -1 then 0 else actn_cncl_cancelar_proceso end) as max_actn_cncl_cancelar_proceso, \n    \n    max(case when actn_cncl_requiere_visita_tecnica = -1 then 0 else actn_cncl_requiere_visita_tecnica end) as max_actn_cncl_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_correccion_logica = -1 then 0 else actn_cncl_correccion_logica end) as max_actn_cncl_correccion_logica, \n    \n    max(case when actn_cncl_no_requiere_visita_tecnica = -1 then 0 else actn_cncl_no_requiere_visita_tecnica end) as max_actn_cncl_no_requiere_visita_tecnica, \n    \n    max(case when actn_cncl_retencion = -1 then 0 else actn_cncl_retencion end) as max_actn_cncl_retencion, \n    \n    max(case when actn_cncl_resto = -1 then 0 else actn_cncl_resto end) as max_actn_cncl_resto, \n    \n    max(case when max_cgy_cncl_economico = -1 then 0 else max_cgy_cncl_economico end) as max_max_cgy_cncl_economico, \n    \n    max(case when max_cgy_cncl_personales = -1 then 0 else max_cgy_cncl_personales end) as max_max_cgy_cncl_personales, \n    \n    max(case when max_cgy_cncl_insatisfaccion = -1 then 0 else max_cgy_cncl_insatisfaccion end) as max_max_cgy_cncl_insatisfaccion, \n    \n    max(case when max_cgy_cncl_comercial = -1 then 0 else max_cgy_cncl_comercial end) as max_max_cgy_cncl_comercial, \n    \n    max(case when max_cgy_cncl_competencia = -1 then 0 else max_cgy_cncl_competencia end) as max_max_cgy_cncl_competencia, \n    \n    max(case when max_cgy_cncl_resto = -1 then 0 else max_cgy_cncl_resto end) as max_max_cgy_cncl_resto, \n    \n    max(case when max_dsc_pcs_cnl_cancelacion = -1 then 0 else max_dsc_pcs_cnl_cancelacion end) as max_max_dsc_pcs_cnl_cancelacion, \n    \n    max(case when max_dsc_pcs_cnl_resto = -1 then 0 else max_dsc_pcs_cnl_resto end) as max_max_dsc_pcs_cnl_resto, \n    \n    max(case when max_ln_bsn_tv = -1 then 0 else max_ln_bsn_tv end) as max_max_ln_bsn_tv, \n    \n    max(case when max_ln_bsn_tel = -1 then 0 else max_ln_bsn_tel end) as max_max_ln_bsn_tel, \n    \n    max(case when max_ln_bsn_int = -1 then 0 else max_ln_bsn_int end) as max_max_ln_bsn_int, \n    \n    max(case when max_mtv_cncl_muchosgastos = -1 then 0 else max_mtv_cncl_muchosgastos end) as max_max_mtv_cncl_muchosgastos, \n    \n    max(case when max_mtv_cncl_saldoalto = -1 then 0 else max_mtv_cncl_saldoalto end) as max_max_mtv_cncl_saldoalto, \n    \n    max(case when max_mtv_cncl_aumentotarifa = -1 then 0 else max_mtv_cncl_aumentotarifa end) as max_max_mtv_cncl_aumentotarifa, \n    \n    max(case when max_mtv_cncl_documentacion = -1 then 0 else max_mtv_cncl_documentacion end) as max_max_mtv_cncl_documentacion, \n    \n    max(case when max_mtv_cncl_sininquilino = -1 then 0 else max_mtv_cncl_sininquilino end) as max_max_mtv_cncl_sininquilino, \n    \n    max(case when max_mtv_cncl_resto = -1 then 0 else max_mtv_cncl_resto end) as max_max_mtv_cncl_resto, \n    \n    max(case when max_pd_nm_cablemodem = -1 then 0 else max_pd_nm_cablemodem end) as max_max_pd_nm_cablemodem, \n    \n    max(case when max_pd_nm_cabletvhd = -1 then 0 else max_pd_nm_cabletvhd end) as max_max_pd_nm_cabletvhd, \n    \n    max(case when max_pd_nm_cabletvdigital = -1 then 0 else max_pd_nm_cabletvdigital end) as max_max_pd_nm_cabletvdigital, \n    \n    max(case when max_pd_nm_redinterna = -1 then 0 else max_pd_nm_redinterna end) as max_max_pd_nm_redinterna, \n    \n    max(case when max_pd_nm_hboondemand = -1 then 0 else max_pd_nm_hboondemand end) as max_max_pd_nm_hboondemand, \n    \n    max(case when max_pd_nm_resto = -1 then 0 else max_pd_nm_resto end) as max_max_pd_nm_resto, \n    \n    max(case when max_rsn_cncl_cancelacionusuario = -1 then 0 else max_rsn_cncl_cancelacionusuario end) as max_max_rsn_cncl_cancelacionusuario, \n    \n    max(case when max_rsn_cncl_cambioplan = -1 then 0 else max_rsn_cncl_cambioplan end) as max_max_rsn_cncl_cambioplan, \n    \n    max(case when max_rsn_cncl_procedimientosinternos = -1 then 0 else max_rsn_cncl_procedimientosinternos end) as max_max_rsn_cncl_procedimientosinternos, \n    \n    max(case when max_rsn_cncl_digitalizacion = -1 then 0 else max_rsn_cncl_digitalizacion end) as max_max_rsn_cncl_digitalizacion, \n    \n    max(case when max_rsn_cncl_resto = -1 then 0 else max_rsn_cncl_resto end) as max_max_rsn_cncl_resto, \n    \n    max(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as max_max_trfc_dwld, \n    \n    max(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as max_avg_trfc_dwld, \n    \n    max(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as max_sum_trfc_dwld, \n    \n    max(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as max_max_trfc_upld, \n    \n    max(case when avg_trfc_upld = -1 then 0 else avg_trfc_upld end) as max_avg_trfc_upld, \n    \n    max(case when sum_trfc_upld = -1 then 0 else sum_trfc_upld end) as max_sum_trfc_upld, \n    \n    max(case when dsc_cablemodem = -1 then 0 else dsc_cablemodem end) as max_dsc_cablemodem, \n    \n    max(case when dsc_cajahd = -1 then 0 else dsc_cajahd end) as max_dsc_cajahd, \n    \n    max(case when dsc_cajadigital = -1 then 0 else dsc_cajadigital end) as max_dsc_cajadigital, \n    \n    max(case when dsc_redinterna = -1 then 0 else dsc_redinterna end) as max_dsc_redinterna, \n    \n    max(case when dsc_pd_resto = -1 then 0 else dsc_pd_resto end) as max_dsc_pd_resto, \n    \n    max(case when rsn_opn_ctt_sinsenalcaja = -1 then 0 else rsn_opn_ctt_sinsenalcaja end) as max_rsn_opn_ctt_sinsenalcaja, \n    \n    max(case when rsn_opn_ctt_intermitencia = -1 then 0 else rsn_opn_ctt_intermitencia end) as max_rsn_opn_ctt_intermitencia, \n    \n    max(case when rsn_opn_ctt_nivelesincorrectos = -1 then 0 else rsn_opn_ctt_nivelesincorrectos end) as max_rsn_opn_ctt_nivelesincorrectos, \n    \n    max(case when rsn_opn_ctt_sinsenal = -1 then 0 else rsn_opn_ctt_sinsenal end) as max_rsn_opn_ctt_sinsenal, \n    \n    max(case when rsn_opn_ctt_resto = -1 then 0 else rsn_opn_ctt_resto end) as max_rsn_opn_ctt_resto, \n    \n    max(case when rsn_cls_ctt_cierreautomatico = -1 then 0 else rsn_cls_ctt_cierreautomatico end) as max_rsn_cls_ctt_cierreautomatico, \n    \n    max(case when rsn_cls_ctt_resto = -1 then 0 else rsn_cls_ctt_resto end) as max_rsn_cls_ctt_resto, \n    \n    max(case when avg_dt_pcs_dif_ctt_seconds = -1 then 0 else avg_dt_pcs_dif_ctt_seconds end) as max_avg_dt_pcs_dif_ctt_seconds, \n    \n    max(case when sum_dt_pcs_dif_ctt_seconds = -1 then 0 else sum_dt_pcs_dif_ctt_seconds end) as max_sum_dt_pcs_dif_ctt_seconds, \n    \n    max(case when max_dt_pcs_dif_ctt_seconds = -1 then 0 else max_dt_pcs_dif_ctt_seconds end) as max_max_dt_pcs_dif_ctt_seconds, \n    \n    max(case when avg_arpu_opening = -1 then 0 else avg_arpu_opening end) as max_avg_arpu_opening, \n    \n    max(case when max_arpu_opening = -1 then 0 else max_arpu_opening end) as max_max_arpu_opening, \n    \n    max(case when min_arpu_opening = -1 then 0 else min_arpu_opening end) as max_min_arpu_opening, \n    \n    max(case when avg_cncls = -1 then 0 else avg_cncls end) as max_avg_cncls, \n    \n    max(case when max_cncls = -1 then 0 else max_cncls end) as max_max_cncls, \n    \n    max(case when min_cncls = -1 then 0 else min_cncls end) as max_min_cncls, \n    \n    max(case when avg_cncls_mtd = -1 then 0 else avg_cncls_mtd end) as max_avg_cncls_mtd, \n    \n    max(case when max_cncls_mtd = -1 then 0 else max_cncls_mtd end) as max_max_cncls_mtd, \n    \n    max(case when min_cncls_mtd = -1 then 0 else min_cncls_mtd end) as max_min_cncls_mtd, \n    \n    max(case when avg_cm_affcttd = -1 then 0 else avg_cm_affcttd end) as max_avg_cm_affcttd, \n    \n    max(case when max_cm_affcttd = -1 then 0 else max_cm_affcttd end) as max_max_cm_affcttd, \n    \n    max(case when min_cm_affcttd = -1 then 0 else min_cm_affcttd end) as max_min_cm_affcttd, \n    \n    max(case when avg_dcctns_vlntrs = -1 then 0 else avg_dcctns_vlntrs end) as max_avg_dcctns_vlntrs, \n    \n    max(case when max_dcctns_vlntrs = -1 then 0 else max_dcctns_vlntrs end) as max_max_dcctns_vlntrs, \n    \n    max(case when min_dcctns_vlntrs = -1 then 0 else min_dcctns_vlntrs end) as max_min_dcctns_vlntrs, \n    \n    max(case when avg_dtrctr_sprt = -1 then 0 else avg_dtrctr_sprt end) as max_avg_dtrctr_sprt, \n    \n    max(case when max_dtrctr_sprt = -1 then 0 else max_dtrctr_sprt end) as max_max_dtrctr_sprt, \n    \n    max(case when min_dtrctr_sprt = -1 then 0 else min_dtrctr_sprt end) as max_min_dtrctr_sprt, \n    \n    max(case when avg_dtrctr_use = -1 then 0 else avg_dtrctr_use end) as max_avg_dtrctr_use, \n    \n    max(case when max_dtrctr_use = -1 then 0 else max_dtrctr_use end) as max_max_dtrctr_use, \n    \n    max(case when min_dtrctr_use = -1 then 0 else min_dtrctr_use end) as max_min_dtrctr_use, \n    \n    max(case when avg_hhcc_cls = -1 then 0 else avg_hhcc_cls end) as max_avg_hhcc_cls, \n    \n    max(case when max_hhcc_cls = -1 then 0 else max_hhcc_cls end) as max_max_hhcc_cls, \n    \n    max(case when min_hhcc_cls = -1 then 0 else min_hhcc_cls end) as max_min_hhcc_cls, \n    \n    max(case when avg_hhcc_opening = -1 then 0 else avg_hhcc_opening end) as max_avg_hhcc_opening, \n    \n    max(case when max_hhcc_opening = -1 then 0 else max_hhcc_opening end) as max_max_hhcc_opening, \n    \n    max(case when min_hhcc_opening = -1 then 0 else min_hhcc_opening end) as max_min_hhcc_opening, \n    \n    max(case when avg_hrs_affcttn = -1 then 0 else avg_hrs_affcttn end) as max_avg_hrs_affcttn, \n    \n    max(case when max_hrs_affcttn = -1 then 0 else max_hrs_affcttn end) as max_max_hrs_affcttn, \n    \n    max(case when min_hrs_affcttn = -1 then 0 else min_hrs_affcttn end) as max_min_hrs_affcttn, \n    \n    max(case when avg_ingrss_opening = -1 then 0 else avg_ingrss_opening end) as max_avg_ingrss_opening, \n    \n    max(case when max_ingrss_opening = -1 then 0 else max_ingrss_opening end) as max_max_ingrss_opening, \n    \n    max(case when min_ingrss_opening = -1 then 0 else min_ingrss_opening end) as max_min_ingrss_opening, \n    \n    max(case when avg_intns = -1 then 0 else avg_intns end) as max_avg_intns, \n    \n    max(case when max_intns = -1 then 0 else max_intns end) as max_max_intns, \n    \n    max(case when min_intns = -1 then 0 else min_intns end) as max_min_intns, \n    \n    max(case when avg_intns_mtd = -1 then 0 else avg_intns_mtd end) as max_avg_intns_mtd, \n    \n    max(case when max_intns_mtd = -1 then 0 else max_intns_mtd end) as max_max_intns_mtd, \n    \n    max(case when min_intns_mtd = -1 then 0 else min_intns_mtd end) as max_min_intns_mtd, \n    \n    max(case when avg_prmtr_sprt = -1 then 0 else avg_prmtr_sprt end) as max_avg_prmtr_sprt, \n    \n    max(case when max_prmtr_sprt = -1 then 0 else max_prmtr_sprt end) as max_max_prmtr_sprt, \n    \n    max(case when min_prmtr_sprt = -1 then 0 else min_prmtr_sprt end) as max_min_prmtr_sprt, \n    \n    max(case when avg_prmtr_use = -1 then 0 else avg_prmtr_use end) as max_avg_prmtr_use, \n    \n    max(case when max_prmtr_use = -1 then 0 else max_prmtr_use end) as max_max_prmtr_use, \n    \n    max(case when min_prmtr_use = -1 then 0 else min_prmtr_use end) as max_min_prmtr_use, \n    \n    max(case when avg_rtnts = -1 then 0 else avg_rtnts end) as max_avg_rtnts, \n    \n    max(case when max_rtnts = -1 then 0 else max_rtnts end) as max_max_rtnts, \n    \n    max(case when min_rtnts = -1 then 0 else min_rtnts end) as max_min_rtnts, \n    \n    max(case when avg_rtnts_mtd = -1 then 0 else avg_rtnts_mtd end) as max_avg_rtnts_mtd, \n    \n    max(case when max_rtnts_mtd = -1 then 0 else max_rtnts_mtd end) as max_max_rtnts_mtd, \n    \n    max(case when min_rtnts_mtd = -1 then 0 else min_rtnts_mtd end) as max_min_rtnts_mtd, \n    \n    max(case when avg_tms_unavl = -1 then 0 else avg_tms_unavl end) as max_avg_tms_unavl, \n    \n    max(case when max_tms_unavl = -1 then 0 else max_tms_unavl end) as max_max_tms_unavl, \n    \n    max(case when min_tms_unavl = -1 then 0 else min_tms_unavl end) as max_min_tms_unavl, \n    \n    max(case when dsc_st_pcs_rtn_finalizado = -1 then 0 else dsc_st_pcs_rtn_finalizado end) as max_dsc_st_pcs_rtn_finalizado, \n    \n    max(case when dsc_st_pcs_rtn_working = -1 then 0 else dsc_st_pcs_rtn_working end) as max_dsc_st_pcs_rtn_working, \n    \n    max(case when max_dt_pcs_rtn_dif_seconds = -1 then 0 else max_dt_pcs_rtn_dif_seconds end) as max_max_dt_pcs_rtn_dif_seconds, \n    \n    max(case when avg_dt_pcs_rtn_dif_seconds = -1 then 0 else avg_dt_pcs_rtn_dif_seconds end) as max_avg_dt_pcs_rtn_dif_seconds, \n    \n    max(case when desc_segmentation_cd = -1 then 0 else desc_segmentation_cd end) as max_desc_segmentation_cd, \n    \n    max(case when desc_segmentation_d = -1 then 0 else desc_segmentation_d end) as max_desc_segmentation_d, \n    \n    max(case when desc_segmentation_abcplus = -1 then 0 else desc_segmentation_abcplus end) as max_desc_segmentation_abcplus, \n    \n    max(case when desc_segmentation_resto = -1 then 0 else desc_segmentation_resto end) as max_desc_segmentation_resto, \n    \n    max(case when rslt_rtn_retenido = -1 then 0 else rslt_rtn_retenido end) as max_rslt_rtn_retenido, \n    \n    max(case when rslt_rtn_no_retenido = -1 then 0 else rslt_rtn_no_retenido end) as max_rslt_rtn_no_retenido, \n    \n    max(case when rslt_rtn_no_aplica = -1 then 0 else rslt_rtn_no_aplica end) as max_rslt_rtn_no_aplica, \n    \n    max(case when rslt_rtn_efectivo = -1 then 0 else rslt_rtn_efectivo end) as max_rslt_rtn_efectivo, \n    \n    max(case when rslt_rtn_no_localizado = -1 then 0 else rslt_rtn_no_localizado end) as max_rslt_rtn_no_localizado, \n    \n    max(case when rslt_rtn_resto = -1 then 0 else rslt_rtn_resto end) as max_rslt_rtn_resto, \n    \n    max(case when rsn_rtn_economicas = -1 then 0 else rsn_rtn_economicas end) as max_rsn_rtn_economicas, \n    \n    max(case when rsn_rtn_comercial = -1 then 0 else rsn_rtn_comercial end) as max_rsn_rtn_comercial, \n    \n    max(case when rsn_rtn_insatisfaccion = -1 then 0 else rsn_rtn_insatisfaccion end) as max_rsn_rtn_insatisfaccion, \n    \n    max(case when rsn_rtn_proyecto_correctivo = -1 then 0 else rsn_rtn_proyecto_correctivo end) as max_rsn_rtn_proyecto_correctivo, \n    \n    max(case when rsn_rtn_personales = -1 then 0 else rsn_rtn_personales end) as max_rsn_rtn_personales, \n    \n    max(case when rsn_rtn_competencia = -1 then 0 else rsn_rtn_competencia end) as max_rsn_rtn_competencia, \n    \n    max(case when rsn_rtn_casa_vacia = -1 then 0 else rsn_rtn_casa_vacia end) as max_rsn_rtn_casa_vacia, \n    \n    max(case when rsn_rtn_resto = -1 then 0 else rsn_rtn_resto end) as max_rsn_rtn_resto, \n    \n    max(case when tp_rtn_reactiva = -1 then 0 else tp_rtn_reactiva end) as max_tp_rtn_reactiva, \n    \n    max(case when tp_rtn_proactiva = -1 then 0 else tp_rtn_proactiva end) as max_tp_rtn_proactiva, \n    \n    max(case when tp_rtn_traslado = -1 then 0 else tp_rtn_traslado end) as max_tp_rtn_traslado, \n    \n    max(case when tp_rtn_premium = -1 then 0 else tp_rtn_premium end) as max_tp_rtn_premium, \n    \n    max(case when tp_rtn_resto = -1 then 0 else tp_rtn_resto end) as max_tp_rtn_resto, \n    \n    max(case when max_ctt_producto_tel = -1 then 0 else max_ctt_producto_tel end) as max_max_ctt_producto_tel, \n    \n    max(case when max_ctt_producto_int = -1 then 0 else max_ctt_producto_int end) as max_max_ctt_producto_int, \n    \n    max(case when max_ctt_producto_tv = -1 then 0 else max_ctt_producto_tv end) as max_max_ctt_producto_tv, \n    \n    max(case when avg_ctt_producto_tel = -1 then 0 else avg_ctt_producto_tel end) as max_avg_ctt_producto_tel, \n    \n    max(case when avg_ctt_producto_int = -1 then 0 else avg_ctt_producto_int end) as max_avg_ctt_producto_int, \n    \n    max(case when avg_ctt_producto_tv = -1 then 0 else avg_ctt_producto_tv end) as max_avg_ctt_producto_tv, \n    \n    max(case when max_dsc_st_pcs_co_finalizado = -1 then 0 else max_dsc_st_pcs_co_finalizado end) as max_max_dsc_st_pcs_co_finalizado, \n    \n    max(case when max_dsc_st_pcs_co_working = -1 then 0 else max_dsc_st_pcs_co_working end) as max_max_dsc_st_pcs_co_working, \n    \n    max(case when max_dsc_st_pcs_co_cancelado = -1 then 0 else max_dsc_st_pcs_co_cancelado end) as max_max_dsc_st_pcs_co_cancelado, \n    \n    max(case when max_dsc_st_pcs_co_abortado = -1 then 0 else max_dsc_st_pcs_co_abortado end) as max_max_dsc_st_pcs_co_abortado, \n    \n    max(case when max_cnl_sale_callcenter = -1 then 0 else max_cnl_sale_callcenter end) as max_max_cnl_sale_callcenter, \n    \n    max(case when max_cnl_sale_redessociales = -1 then 0 else max_cnl_sale_redessociales end) as max_max_cnl_sale_redessociales, \n    \n    max(case when max_dept_to_scl_programacion = -1 then 0 else max_dept_to_scl_programacion end) as max_max_dept_to_scl_programacion, \n    \n    max(case when max_dept_to_scl_cobros = -1 then 0 else max_dept_to_scl_cobros end) as max_max_dept_to_scl_cobros, \n    \n    max(case when max_dept_to_scl_callcenter = -1 then 0 else max_dept_to_scl_callcenter end) as max_max_dept_to_scl_callcenter, \n    \n    max(case when max_dept_to_scl_cortes = -1 then 0 else max_dept_to_scl_cortes end) as max_max_dept_to_scl_cortes, \n    \n    max(case when max_dept_to_scl_resto = -1 then 0 else max_dept_to_scl_resto end) as max_max_dept_to_scl_resto, \n    \n    max(case when max_dtl_cnslt_generales = -1 then 0 else max_dtl_cnslt_generales end) as max_max_dtl_cnslt_generales, \n    \n    max(case when max_dtl_cnslt_acciones_de_cobro = -1 then 0 else max_dtl_cnslt_acciones_de_cobro end) as max_max_dtl_cnslt_acciones_de_cobro, \n    \n    max(case when max_dtl_cnslt_sin_servicio = -1 then 0 else max_dtl_cnslt_sin_servicio end) as max_max_dtl_cnslt_sin_servicio, \n    \n    max(case when max_dtl_cnslt_consulta_saldo = -1 then 0 else max_dtl_cnslt_consulta_saldo end) as max_max_dtl_cnslt_consulta_saldo, \n    \n    max(case when max_dtl_cnslt_otros = -1 then 0 else max_dtl_cnslt_otros end) as max_max_dtl_cnslt_otros, \n    \n    max(case when max_dtl_cnslt_resto = -1 then 0 else max_dtl_cnslt_resto end) as max_max_dtl_cnslt_resto, \n    \n    max(case when max_mth_ctc_telefono = -1 then 0 else max_mth_ctc_telefono end) as max_max_mth_ctc_telefono, \n    \n    max(case when max_mth_ctc_redes_sociales = -1 then 0 else max_mth_ctc_redes_sociales end) as max_max_mth_ctc_redes_sociales, \n    \n    max(case when max_mth_ctc_resto = -1 then 0 else max_mth_ctc_resto end) as max_max_mth_ctc_resto, \n    \n    max(case when max_rsn_cnslt_sin_servicio = -1 then 0 else max_rsn_cnslt_sin_servicio end) as max_max_rsn_cnslt_sin_servicio, \n    \n    max(case when max_rsn_cnslt_consulta_generales_administrativos = -1 then 0 else max_rsn_cnslt_consulta_generales_administrativos end) as max_max_rsn_cnslt_consulta_generales_administrativos, \n    \n    max(case when max_rsn_cnslt_consulta_saldo = -1 then 0 else max_rsn_cnslt_consulta_saldo end) as max_max_rsn_cnslt_consulta_saldo, \n    \n    max(case when max_rsn_cnslt_seguimiento_a_la_cita = -1 then 0 else max_rsn_cnslt_seguimiento_a_la_cita end) as max_max_rsn_cnslt_seguimiento_a_la_cita, \n    \n    max(case when max_rsn_cnslt_consulta_de_restricciones = -1 then 0 else max_rsn_cnslt_consulta_de_restricciones end) as max_max_rsn_cnslt_consulta_de_restricciones, \n    \n    max(case when max_rsn_cnslt_resto = -1 then 0 else max_rsn_cnslt_resto end) as max_max_rsn_cnslt_resto, \n    \n    max(case when max_tp_cnl_chat = -1 then 0 else max_tp_cnl_chat end) as max_max_tp_cnl_chat, \n    \n    max(case when max_tp_cnl_twitter = -1 then 0 else max_tp_cnl_twitter end) as max_max_tp_cnl_twitter, \n    \n    max(case when max_tp_cnl_resto = -1 then 0 else max_tp_cnl_resto end) as max_max_tp_cnl_resto, \n    \n    max(case when max_tp_cnslt_informacion = -1 then 0 else max_tp_cnslt_informacion end) as max_max_tp_cnslt_informacion, \n    \n    max(case when max_tp_cnslt_dano_de_area = -1 then 0 else max_tp_cnslt_dano_de_area end) as max_max_tp_cnslt_dano_de_area, \n    \n    max(case when max_tp_cnslt_visita = -1 then 0 else max_tp_cnslt_visita end) as max_max_tp_cnslt_visita, \n    \n    max(case when max_tp_cnslt_gestion_tecnica = -1 then 0 else max_tp_cnslt_gestion_tecnica end) as max_max_tp_cnslt_gestion_tecnica, \n    \n    max(case when max_tp_cnslt_resto = -1 then 0 else max_tp_cnslt_resto end) as max_max_tp_cnslt_resto, \n    \n    max(case when avg_dt_pcs_co_dif_seconds = -1 then 0 else avg_dt_pcs_co_dif_seconds end) as max_avg_dt_pcs_co_dif_seconds, \n    \n    max(case when min_dt_pcs_co_dif_seconds = -1 then 0 else min_dt_pcs_co_dif_seconds end) as max_min_dt_pcs_co_dif_seconds, \n    \n\n\n            CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\n            max(max_resultado_intencion_int) as max_resultado_intencion_int,\n            max(max_resultado_intencion_tv) as max_resultado_intencion_tv,\n            max(max_resultado_intencion_tel) as max_resultado_intencion_tel,\n            max(max_dsc_seg) as max_dsc_seg,\n            avg(avg_DT_PCS_CO_DIF_SECONDS) as avg_DT_PCS_CO_DIF_SECONDS,\n            min(min_DT_PCS_CO_DIF_SECONDS) as min_DT_PCS_CO_DIF_SECONDS,\n            max(max_DT_PCS_CO_DIF_SECONDS) as max_DT_PCS_CO_DIF_SECONDS\n    FROM ultimas_semanas\n    GROUP BY hh_cd,    desc_clss_snr,\n            nodo,\n            desc_clss_ucer,\n            desc_clss_npa,\n            desc_ut_us,\n            bandwdth_key\n)  \n    \n\n)\nselect\n*,\n\nYEAR(date_add('week', 1, monday)) as year,\nMONTH(date_add('week', 1, monday)) as month,\nDAY(date_add('week', 1, monday)) as day \n\nfrom clasificacion_conversion", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.estadisticos_semanal": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "estadisticos_semanal", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics\\estadisticos_semanal.sql", "original_file_path": "models\\analytics\\estadisticos_semanal.sql", "unique_id": "model.VoluntaryChurnABT.estadisticos_semanal", "fqn": ["VoluntaryChurnABT", "analytics", "estadisticos_semanal"], "alias": "estadisticos_semanal", "checksum": {"name": "sha256", "checksum": "5803c5ba11655aaac43b616e98dc0831e8be7a2309434b38b8c6bc7762408379"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "Codigo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nodo": {"name": "nodo", "description": "Nodo al que pertenece la cuenta", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_clss_snr": {"name": "desc_clss_snr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_clss_ucer": {"name": "desc_clss_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_clss_npa": {"name": "desc_clss_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_ut_us": {"name": "desc_ut_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cm_us": {"name": "cm_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numr": {"name": "numr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "samp": {"name": "samp", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ucer_deg": {"name": "ucer_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snr_deg": {"name": "snr_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_npa": {"name": "pct_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_ucer": {"name": "pct_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "es_gold": {"name": "es_gold", "description": "Booleano si nodo es gold", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_trfc_dwld": {"name": "max_trfc_dwld", "description": "M\u00e1ximo de trfc_dwld por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_trfc_dwld": {"name": "avg_trfc_dwld", "description": "Promedio de  trfc_dwld por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_trfc_dwld": {"name": "sum_trfc_dwld", "description": "Suma de trfc_dwld por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_trfc_upld": {"name": "max_trfc_upld", "description": "M\u00e1ximo de trfc_upld por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_max_trfc_upld": {"name": "avg_max_trfc_upld", "description": "Promedio de  trfc_upld por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_max_trfc_upld": {"name": "sum_max_trfc_upld", "description": "Suma de trfc_upld por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ttl_factura": {"name": "avg_ttl_factura", "description": "Promedio de ttl_factura por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_ttl_factura": {"name": "sum_ttl_factura", "description": "Suma ttl_factura por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ttl_factura": {"name": "max_ttl_factura", "description": "M\u00e1ximo de ttl_factura por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ttl_no_factura": {"name": "avg_ttl_no_factura", "description": "Promedio de ttl_no_factura por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sum_ttl_no_factura": {"name": "sum_ttl_no_factura", "description": "Suma ttl_no_factura por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ttl_no_factura": {"name": "max_ttl_no_factura", "description": "M\u00e1ximo de ttl_no_factura por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfc_dwld_snr_deg": {"name": "trfc_dwld_snr_deg", "description": "Divisi\u00f3n max_trfc_dwld sobre snr_deg", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfc_dwld_cm_us": {"name": "trfc_dwld_cm_us", "description": "Divisi\u00f3n max_trfc_dwld sobre cm_us", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unexp_amt_rel": {"name": "unexp_amt_rel", "description": "Divisi\u00f3n max_unexp_amt sobre (max_amt_due + max_unexp_amt)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unexp_amt_ttl": {"name": "unexp_amt_ttl", "description": "Divisi\u00f3n max_unexp_amt sobre max_ttl_factura", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ctt": {"name": "max_ctt", "description": "M\u00e1ximo de ctt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_amt_due": {"name": "max_amt_due", "description": "M\u00e1ximo de amt_due", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_unexp_amt": {"name": "max_unexp_amt", "description": "M\u00e1ximo de unexp_amt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_30_amt": {"name": "max_at_30_amt", "description": "M\u00e1ximo de at_30_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_60_amt": {"name": "max_at_60_amt", "description": "M\u00e1ximo de at_60_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_90_amt": {"name": "max_at_90_amt", "description": "M\u00e1ximo de at_90_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_120_amt": {"name": "max_at_120_amt", "description": "M\u00e1ximo de at_120_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_150_amt": {"name": "max_at_150_amt", "description": "M\u00e1ximo de at_150_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_180_amt": {"name": "max_at_180_amt", "description": "M\u00e1ximo de at_180_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_210_amt": {"name": "max_at_210_amt", "description": "M\u00e1ximo de at_210_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_240_amt": {"name": "max_at_240_amt", "description": "M\u00e1ximo de at_240_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_270_amt": {"name": "max_at_270_amt", "description": "M\u00e1ximo de at_270_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_300_amt": {"name": "max_at_300_amt", "description": "M\u00e1ximo de at_300_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_330_amt": {"name": "max_at_330_amt", "description": "M\u00e1ximo de at_330_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_at_360_amt": {"name": "max_at_360_amt", "description": "M\u00e1ximo de at_360_amt de ultima semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ttl": {"name": "max_ttl", "description": "Factura total maxima por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ctt_producto_tel": {"name": "max_ctt_producto_tel", "description": "M\u00e1ximo ctt del producto tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ctt_producto_int": {"name": "max_ctt_producto_int", "description": "M\u00e1ximo ctt del producto int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ctt_producto_tv": {"name": "max_ctt_producto_tv", "description": "M\u00e1ximo ctt del producto tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_tiene_descuento_int": {"name": "max_tiene_descuento_int", "description": "Tiene descuento en int", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_tiene_descuento_tel": {"name": "max_tiene_descuento_tel", "description": "Tiene descuento en tel", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_tiene_descuento_tv": {"name": "max_tiene_descuento_tv", "description": "Tiene descuento en tv", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_cliente_arreglo_pago": {"name": "max_cliente_arreglo_pago", "description": "M\u00e1ximo arreglo pago por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_intencion_producto_int": {"name": "max_intencion_producto_int", "description": "M\u00e1xima intencion_producto_int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_intencion_producto_tv": {"name": "max_intencion_producto_tv", "description": "M\u00e1xima intencion_producto_tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_intencion_producto_tel": {"name": "max_intencion_producto_tel", "description": "M\u00e1xima intencion_producto_tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_antiguedad_ultimo_ctt_tel": {"name": "max_antiguedad_ultimo_ctt_tel", "description": "M\u00e1xima antiguedad_ultimo_ctt_tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_antiguedad_ultimo_ctt_int": {"name": "max_antiguedad_ultimo_ctt_int", "description": "M\u00e1xima antiguedad_ultimo_ctt_int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_antiguedad_ultimo_ctt_tv": {"name": "max_antiguedad_ultimo_ctt_tv", "description": "M\u00e1xima antiguedad_ultimo_ctt_tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_ar_actvn_dt": {"name": "max_ar_actvn_dt", "description": "M\u00e1ximo ar_actvn_dt por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ctt": {"name": "avg_ctt", "description": "Promedio de ctt por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_amt_due": {"name": "avg_amt_due", "description": "Promedio amt_due por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_unexp_amt": {"name": "avg_unexp_amt", "description": "Promedio unexp_amt por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ttl": {"name": "avg_ttl", "description": "Promedio ttl por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ctt_producto_tel": {"name": "avg_ctt_producto_tel", "description": "Promedio ctt_producto_tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ctt_producto_int": {"name": "avg_ctt_producto_int", "description": "Promedio ctt_producto_int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_ctt_producto_tv": {"name": "avg_ctt_producto_tv", "description": "Promedio ctt_producto_tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_descuento_int": {"name": "max_descuento_int", "description": "Tiene descuento_int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_descuento_tel": {"name": "max_descuento_tel", "description": "Tiene descuento_tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_descuento_tv": {"name": "max_descuento_tv", "description": "Tiene descuento_tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_resultado_intencion_int": {"name": "max_resultado_intencion_int", "description": "Resultado de intencion_int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_resultado_intencion_tv": {"name": "max_resultado_intencion_tv", "description": "Resultado de intencion_tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_resultado_intencion_tel": {"name": "max_resultado_intencion_tel", "description": "Resultado de intencion_tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_motivo_intencion_tel": {"name": "max_motivo_intencion_tel", "description": "Motivo de intencion_tel por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_motivo_intencion_int": {"name": "max_motivo_intencion_int", "description": "Motivo de intencion_int por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_motivo_intencion_tv": {"name": "max_motivo_intencion_tv", "description": "Motivo de intencion_tv por semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "st_hh_cd": {"name": "st_hh_cd", "description": "Estado de cuenta", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\analytics\\analytics.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547879.3685846, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n-- depends_on: {{ ref('int_consumos_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_facturas_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_nodos_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_features_engineering_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_metricas_morosidad_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_ctt_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_ctt_producto_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_metricas_descuentos_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_resultado_intencion_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_intencion_producto_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_antiguedad_ultimo_ctt_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_motivo_intencion_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_antiguedad_cuenta_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_customers_consults_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_ctt_fix_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_products_tigo_vs_competence_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_new_offers_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_new_orders_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_bandwith_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_cancelaciones_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_churn_node_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_ntt_aggregated_to_week') }}\r\n-- depends_on: {{ ref('int_retenciones_aggregated_to_week') }}\r\n\r\n\r\n{% set sql_statement_columnas %}\r\n    SELECT \r\n    table_name, \r\n    column_name\r\n    FROM   information_schema.columns\r\n    WHERE  table_schema = '{{ target.name + \"_voluntary_churn_intermediate\"}}'\r\n    and table_name like 'int_%'\r\n    and table_name not like '%temp%'\r\n    and column_name NOT IN ('hh_cd', 'st_hh_cd', 'fecha_inicio_semana', 'fecha_final_semana', 'year', 'month', 'day')\r\n\r\n{% endset %}\r\n\r\n{%- set tablas_columnas = dbt_utils.get_query_results_as_dict(sql_statement_columnas) -%}\r\n\r\nSELECT\r\n{{ref('stg_360_staging__cartera_detallada')}}.hh_cd,\r\n{{ref('stg_360_staging__cartera_detallada')}}.st_hh_cd,\r\n{{ref('stg_360_staging__cartera_detallada')}}.fecha_inicio_semana,\r\n{{ref('stg_360_staging__cartera_detallada')}}.fecha_final_semana,\r\n{{ref('stg_360_staging__cartera_detallada')}}.doc_tp_nm,\r\n{{ref('stg_360_staging__cartera_detallada')}}.ntw_tchnlgy,\r\n{% for columna in tablas_columnas['column_name'] %}\r\n    {{tablas_columnas['table_name'][loop.index0]}}.{{columna}},\r\n{% endfor %}\r\n-- year(date_add('day', 1, {{ref('stg_360_staging__cartera_detallada')}}.fecha_final_semana)) as year,\r\n-- month(date_add('day', 1, {{ref('stg_360_staging__cartera_detallada')}}.fecha_final_semana)) as month,\r\n-- day(date_add('day', 1, {{ref('stg_360_staging__cartera_detallada')}}.fecha_final_semana)) as day\r\n{{ partition(\"stg_360_staging__cartera_detallada.fecha_inicio_semana\")}}\r\nFROM {{ref('stg_360_staging__cartera_detallada')}}\r\n{% for tabla in set(tablas_columnas['table_name']) %}\r\n    {% if tabla != 'stg_360_staging__cartera_detallada' %}\r\n        left join  {{ref(tabla)}} ON cast({{tabla}}.hh_cd as varchar) = {{ref('stg_360_staging__cartera_detallada')}}.hh_cd and {{tabla}}.fecha_inicio_semana = {{ref('stg_360_staging__cartera_detallada')}}.fecha_inicio_semana\r\n    {% endif %} \r\n{% endfor %}\r\nWHERE {{ run_mode('stg_360_staging__cartera_detallada.fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [{"name": "int_consumos_aggregated_to_week", "package": null, "version": null}, {"name": "int_facturas_aggregated_to_week", "package": null, "version": null}, {"name": "int_nodos_aggregated_to_week", "package": null, "version": null}, {"name": "int_features_engineering_aggregated_to_week", "package": null, "version": null}, {"name": "int_metricas_morosidad_aggregated_to_week", "package": null, "version": null}, {"name": "int_ctt_aggregated_to_week", "package": null, "version": null}, {"name": "int_ctt_producto_aggregated_to_week", "package": null, "version": null}, {"name": "int_metricas_descuentos_aggregated_to_week", "package": null, "version": null}, {"name": "int_resultado_intencion_aggregated_to_week", "package": null, "version": null}, {"name": "int_intencion_producto_aggregated_to_week", "package": null, "version": null}, {"name": "int_antiguedad_ultimo_ctt_aggregated_to_week", "package": null, "version": null}, {"name": "int_motivo_intencion_aggregated_to_week", "package": null, "version": null}, {"name": "int_antiguedad_cuenta_aggregated_to_week", "package": null, "version": null}, {"name": "int_customers_consults_aggregated_to_week", "package": null, "version": null}, {"name": "int_ctt_fix_aggregated_to_week", "package": null, "version": null}, {"name": "int_products_tigo_vs_competence_aggregated_to_week", "package": null, "version": null}, {"name": "int_new_offers_aggregated_to_week", "package": null, "version": null}, {"name": "int_new_orders_aggregated_to_week", "package": null, "version": null}, {"name": "int_bandwith_aggregated_to_week", "package": null, "version": null}, {"name": "int_cancelaciones_aggregated_to_week", "package": null, "version": null}, {"name": "int_churn_node_aggregated_to_week", "package": null, "version": null}, {"name": "int_ntt_aggregated_to_week", "package": null, "version": null}, {"name": "int_retenciones_aggregated_to_week", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week", "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week", "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week", "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week", "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week", "model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week", "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week", "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week", "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week", "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week", "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week", "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week", "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week", "model.VoluntaryChurnABT.int_ntt_aggregated_to_week", "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.intenciones_semanal": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "intenciones_semanal", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics\\intenciones_semanal.sql", "original_file_path": "models\\analytics\\intenciones_semanal.sql", "unique_id": "model.VoluntaryChurnABT.intenciones_semanal", "fqn": ["VoluntaryChurnABT", "analytics", "intenciones_semanal"], "alias": "intenciones_semanal", "checksum": {"name": "sha256", "checksum": "7e6cdf246dd92ce89b8a1ca001a706d96b5c8c640e006c4e9b4d0c5c0d5a22b1"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.0778942, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_analytics\".\"intenciones_semanal\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nSELECT \r\nhh_cd, \r\nfecha_inicio_semana,\r\nfecha_final_semana,\r\ncut_date,\r\nrslt_rtn,\r\nCASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END AS intencion,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM {{ref('stg__intenciones')}}\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd, rslt_rtn, cut_date", "language": "sql", "refs": [{"name": "stg__intenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg__intenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.target_semanal": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "target_semanal", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics\\target_semanal.sql", "original_file_path": "models\\analytics\\target_semanal.sql", "unique_id": "model.VoluntaryChurnABT.target_semanal", "fqn": ["VoluntaryChurnABT", "analytics", "target_semanal"], "alias": "target_semanal", "checksum": {"name": "sha256", "checksum": "5fbe815791b67b84d7bb4bd8f35fc1c65079b1af94c7a860e8478867105cfee1"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de cuenta.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target": {"name": "target", "description": "Target semanal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o de partici\u00f3n.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes de partici\u00f3n.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda de partici\u00f3n.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\analytics\\analytics.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547879.401718, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_analytics\".\"target_semanal\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\n{%- if var('modo')[0] == 'default' -%}\r\n    \r\n    {% set start_date = ((modules.datetime.datetime.today() - modules.datetime.timedelta(days=7)).date()).strftime('%Y-%m-%d') %}\r\n    {% set end_date = (modules.datetime.datetime.today()).strftime('%Y-%m-%d') %}\r\n\r\n{%- elif var('modo')[0] == \"rango\" -%}\r\n    {% set start_date =  var('modo')[1] %}\r\n    {% set end_date = var('modo')[2] %}\r\n\r\n{%- endif -%}\r\n\r\n{% set mondays_list = get_mondays_between_dates(start_date, end_date) %}\r\n{% set cleaned_list = mondays_list.split(\",\") | map('trim') | map('replace', '[', '') | map('replace', ']', '') | list %}\r\n\r\n{% if cleaned_list %}\r\n    {% set last_monday = cleaned_list[-1] %}\r\n{% else %}\r\n    {% set last_monday = None %}\r\n{% endif %}\r\nwith intenciones as(\r\n\r\n    SELECT\r\n    hh_cd,\r\n    rslt_rtn,\r\n    intencion as target,\r\n    fecha_inicio_semana,\r\n    CAST({{last_monday}} AS date) AS last_monday\r\n\r\n    FROM {{ref('intenciones_semanal')}}\r\n    WHERE fecha_inicio_semana BETWEEN date_add('week', -3, CAST({{last_monday}} AS date)) AND   CAST({{last_monday}} AS date)\r\n\r\n    ),\r\n    clasificacion_conversion as(\r\n    Select distinct *, \r\n    date_add('week', -8, date_trunc('week', last_monday)) as cut_date\r\n    from intenciones\r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\n    group by hh_cd, rslt_rtn, target, fecha_inicio_semana, last_monday\r\n    )\r\n\r\n    SELECT hh_cd, rslt_rtn, cut_date, fecha_inicio_semana, target, {{ partition('cut_date')}} \r\n\r\n    from clasificacion_conversion \r\n\r\n    group by hh_cd, rslt_rtn, target, cut_date, fecha_inicio_semana", "language": "sql", "refs": [{"name": "intenciones_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_mondays_between_dates", "macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.intenciones_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_antiguedad_cuenta_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_antiguedad_cuenta_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_antiguedad_cuenta_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_antiguedad_cuenta_aggregated_to_week"], "alias": "int_antiguedad_cuenta_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "2bedc801ffa5230a825834c44f7323703c756236d8e1b7edf7127792176f502a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.134632, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_antiguedad_cuenta_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith tablon as(\r\n\r\n    select \r\n    cart.hh_cd,\r\n    cart.st_hh_cd,\r\n    mot.ar_actvn_dt,\r\n    cart.fecha_inicio_semana\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_360_staging__antiguedad_cuenta')}} as mot on cart.hh_cd = mot.hh_cd \r\n    \r\n    GROUP BY  cart.hh_cd, cart.st_hh_cd, mot.ar_actvn_dt, cart.fecha_inicio_semana\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    st_hh_cd,\r\n    fecha_inicio_semana, \r\n    CAST(\r\n    (CASE\r\n        WHEN ar_actvn_dt IS NULL THEN -1.0\r\n        ELSE CAST(ar_actvn_dt AS DOUBLE)\r\n    END) AS DOUBLE) AS ar_actvn_dt,\r\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana order by fecha_inicio_semana desc) as rn\r\n    from tablon\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_tablon.hh_cd,\r\nmax(ultimos.ar_actvn_dt) as max_ar_actvn_dt,\r\nmax(ultimos.st_hh_cd) as st_hh_cd,\r\nts_tablon.fecha_inicio_semana, \r\n{{ partition('ts_tablon.fecha_inicio_semana')}}\r\nfrom tablon as ts_tablon\r\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_tablon.fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__antiguedad_cuenta", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__antiguedad_cuenta"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_antiguedad_ultimo_ctt_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_antiguedad_ultimo_ctt_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_antiguedad_ultimo_ctt_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_antiguedad_ultimo_ctt_aggregated_to_week"], "alias": "int_antiguedad_ultimo_ctt_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "e3a87171e88b456a6a328259f0df5952792f6ef0ca0d055bf4b83479e6db073a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.1497436, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_antiguedad_ultimo_ctt_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith tablon as(\r\n\r\n    select \r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana,\r\n    mot.antiguedad_ultimo_ctt_tel,\r\n    mot.antiguedad_ultimo_ctt_int,\r\n    mot.antiguedad_ultimo_ctt_tv\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__antiguedad_ultimo_ctt')}} as mot on cart.hh_cd = mot.hh_cd \r\n    group by    \r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana,\r\n    mot.antiguedad_ultimo_ctt_tel,\r\n    mot.antiguedad_ultimo_ctt_int,\r\n    mot.antiguedad_ultimo_ctt_tv\r\n\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    COALESCE(antiguedad_ultimo_ctt_tel, -1) AS antiguedad_ultimo_ctt_tel,\r\n    COALESCE(antiguedad_ultimo_ctt_int, -1) AS antiguedad_ultimo_ctt_int,\r\n    COALESCE(antiguedad_ultimo_ctt_tv, -1) AS antiguedad_ultimo_ctt_tv,\r\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana order by fecha_inicio_semana desc) as rn\r\n    from tablon\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_tablon.hh_cd,\r\n{{ get_max_value(['ts_tablon.antiguedad_ultimo_ctt_tel',\r\n                    'ts_tablon.antiguedad_ultimo_ctt_int',\r\n                    'ts_tablon.antiguedad_ultimo_ctt_tv']) }}\r\nts_tablon.fecha_inicio_semana, \r\n{{ partition('ts_tablon.fecha_inicio_semana')}}\r\nfrom tablon as ts_tablon\r\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_tablon.fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__antiguedad_ultimo_ctt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__antiguedad_ultimo_ctt"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_bandwith_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_bandwith_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_bandwith_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_bandwith_aggregated_to_week"], "alias": "int_bandwith_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "e0ee454abac39f879fa9d29d9e0264301a6d7c50f4efe9485b8e803258fbe1c2"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.1652448, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_bandwith_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.nodo,\r\n    mot.BANDWDTH,\r\n    mot.bandwdth_key,\r\n    mot.BANDWDTH_NM,\r\n    mot.BANDWDTH_TR,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana\r\n   \r\n\r\n from {{ref('int_nodos_aggregated_to_week')}} as cart left join {{ref('stg_dtl_pa__bandwith')}} as mot on cart.BANDWDTH_key= mot.BANDWDTH_key\r\n)\r\n\r\nselect \r\nBANDWDTH,\r\nBANDWDTH_NM,\r\nBANDWDTH_TR,\r\nfecha_inicio_semana,\r\nfecha_final_semana,\r\nhh_cd,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by hh_cd,BANDWDTH,\r\n    BANDWDTH_NM,\r\n    BANDWDTH_TR,\r\nfecha_inicio_semana,\r\nfecha_final_semana", "language": "sql", "refs": [{"name": "int_nodos_aggregated_to_week", "package": null, "version": null}, {"name": "stg_dtl_pa__bandwith", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.stg_dtl_pa__bandwith"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_cancelaciones_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_cancelaciones_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_cancelaciones_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_cancelaciones_aggregated_to_week"], "alias": "int_cancelaciones_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "23a3d75d5532839829878abebada9077ea016f42148c0e9fdcdd0dd7548bbd88"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.1869853, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_cancelaciones_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    DATE_DIFF('second', mot.DT_INL_PCS_CNL, mot.DT_END_PCS_CNL) AS DT_PCS_CNL_DIF_SECONDS,\r\n    CASE WHEN mot.ACTN_CNCL = 'Cancelar Proceso' THEN 1 ELSE 0 END AS ACTN_CNCL_Cancelar_Proceso,\r\n    CASE WHEN mot.ACTN_CNCL = 'Requiere visita tecnica' THEN 1 ELSE 0 END AS ACTN_CNCL_Requiere_visita_tecnica,\r\n    CASE WHEN mot.ACTN_CNCL = 'Correccion Logica' THEN 1 ELSE 0 END AS ACTN_CNCL_Correccion_Logica,\r\n    CASE WHEN mot.ACTN_CNCL = 'No requiere visita tecnica' THEN 1 ELSE 0 END AS ACTN_CNCL_No_requiere_visita_tecnica,\r\n    CASE WHEN mot.ACTN_CNCL = 'Retencion' THEN 1 ELSE 0 END AS ACTN_CNCL_Retencion,\r\n    CASE WHEN mot.ACTN_CNCL = 'Resto' THEN 1 ELSE 0 END AS ACTN_CNCL_Resto,\r\n    CASE\r\n        WHEN mot.CGY_CNCL = 'Econ\u00f3mico' THEN 1\r\n        ELSE 0\r\n    END AS CGY_CNCL_Economico,\r\n    CASE\r\n        WHEN mot.CGY_CNCL = 'Personales' THEN 1\r\n        ELSE 0\r\n    END AS CGY_CNCL_Personales,\r\n    CASE\r\n        WHEN mot.CGY_CNCL = 'Insatisfaccion' THEN 1\r\n        ELSE 0\r\n    END AS CGY_CNCL_Insatisfaccion,\r\n    CASE\r\n        WHEN mot.CGY_CNCL = 'Comercial' THEN 1\r\n        ELSE 0\r\n    END AS CGY_CNCL_Comercial,\r\n    CASE\r\n        WHEN mot.CGY_CNCL = 'Competencia' THEN 1\r\n        ELSE 0\r\n    END AS CGY_CNCL_Competencia,\r\n    CASE\r\n        WHEN mot.CGY_CNCL NOT IN ('Econ\u00f3mico', 'Personales', 'Insatisfaccion', 'Comercial', 'Competencia') THEN 1\r\n        ELSE 0\r\n    END AS CGY_CNCL_Resto,\r\n    mot.CMNT,\r\n    CASE\r\n        WHEN mot.DSC_PCS_CNL = 'Cancelaci\u00f3n (Terminaci\u00f3n de Servicio)' THEN 1\r\n        ELSE 0\r\n    END AS DSC_PCS_CNL_Cancelacion,\r\n    CASE\r\n        WHEN mot.DSC_PCS_CNL NOT IN ('Cancelaci\u00f3n (Terminaci\u00f3n de Servicio)') THEN 1\r\n        ELSE 0\r\n    END AS DSC_PCS_CNL_Resto,\r\n    mot.FLAG_CNCL,\r\n    CASE\r\n        WHEN mot.LN_BSN = 'Televisi\u00f3n' OR mot.LN_BSN = 'Cable TV' THEN 1\r\n        ELSE 0\r\n    END AS LN_BSN_TV,\r\n    CASE\r\n        WHEN mot.LN_BSN = 'Cablephone' OR mot.LN_BSN = 'Telecarrier plans - telephony' OR mot.LN_BSN = 'Telecarrier plans - simple products' THEN 1\r\n        ELSE 0\r\n    END AS LN_BSN_TEL,\r\n    CASE\r\n        WHEN mot.LN_BSN = 'Internet' OR mot.LN_BSN = 'Ethernet' THEN 1\r\n        ELSE 0\r\n    END AS LN_BSN_INT,\r\n   CASE\r\n        WHEN mot.MTV_CNCL = 'Muchos Gastos' THEN 1\r\n        ELSE 0\r\n    END AS MTV_CNCL_MuchosGastos,\r\n    CASE\r\n        WHEN mot.MTV_CNCL = 'Saldo Alto' THEN 1\r\n        ELSE 0\r\n    END AS MTV_CNCL_SaldoAlto,\r\n    CASE\r\n        WHEN mot.MTV_CNCL = 'Aumento de Tarifa (Cambio de Precio)' THEN 1\r\n        ELSE 0\r\n    END AS MTV_CNCL_AumentoTarifa,\r\n    CASE\r\n        WHEN mot.MTV_CNCL = 'Documentaci\u00f3n sin Motivo' THEN 1\r\n        ELSE 0\r\n    END AS MTV_CNCL_Documentacion,\r\n    CASE\r\n        WHEN mot.MTV_CNCL = 'Sin Inquilino' THEN 1\r\n        ELSE 0\r\n    END AS MTV_CNCL_SinInquilino,\r\n    CASE\r\n        WHEN mot.MTV_CNCL NOT IN ('Muchos Gastos', 'Saldo Alto', 'Aumento de Tarifa (Cambio de Precio)', 'Documentaci\u00f3n sin Motivo', 'Sin Inquilino') THEN 1\r\n        ELSE 0\r\n    END AS MTV_CNCL_Resto,\r\n\r\n     CASE\r\n        WHEN mot.PD_NM = 'Cable Modem (e-MTA)' THEN 1\r\n        ELSE 0\r\n    END AS PD_NM_CableModem,\r\n    CASE\r\n        WHEN mot.PD_NM = 'Cable TV Access (Caja HD)' THEN 1\r\n        ELSE 0\r\n    END AS PD_NM_CableTVHD,\r\n    CASE\r\n        WHEN mot.PD_NM = 'Cable TV Access (Caja Digital)' THEN 1\r\n        ELSE 0\r\n    END AS PD_NM_CableTVDigital,\r\n    CASE\r\n        WHEN mot.PD_NM = 'Red Interna' THEN 1\r\n        ELSE 0\r\n    END AS PD_NM_RedInterna,\r\n    CASE\r\n        WHEN mot.PD_NM = 'HBO On Demand' THEN 1\r\n        ELSE 0\r\n    END AS PD_NM_HBOOnDemand,\r\n    CASE\r\n        WHEN mot.PD_NM NOT IN ('Cable Modem (e-MTA)', 'Cable TV Access (Caja HD)', 'Cable TV Access (Caja Digital)', 'Red Interna', 'HBO On Demand') THEN 1\r\n        ELSE 0\r\n    END AS PD_NM_Resto,\r\n       CASE\r\n        WHEN mot.RSN_CNCL = 'Cancelacion por usuario' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNCL_CancelacionUsuario,\r\n    CASE\r\n        WHEN mot.RSN_CNCL = 'Cambio de plan' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNCL_CambioPlan,\r\n    CASE\r\n        WHEN mot.RSN_CNCL = 'procedimientos internos' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNCL_ProcedimientosInternos,\r\n    CASE\r\n        WHEN mot.RSN_CNCL = 'Digitalizaci\u00f3n' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNCL_Digitalizacion,\r\n    CASE\r\n        WHEN mot.RSN_CNCL NOT IN ('Cancelacion por usuario', 'Cambio de plan', 'procedimientos internos', 'Digitalizaci\u00f3n') THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNCL_Resto\r\n\r\n\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__cancelaciones')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR)  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd,\r\nMAX(DT_PCS_CNL_DIF_SECONDS) AS Max_DT_PCS_CNL_DIF_SECONDS,\r\nmax(FLAG_CNCL) as flag_cncl,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\nMAX(ACTN_CNCL_Cancelar_Proceso) AS ACTN_CNCL_Cancelar_Proceso,\r\nMAX(ACTN_CNCL_Requiere_visita_tecnica) AS ACTN_CNCL_Requiere_visita_tecnica,\r\nMAX(ACTN_CNCL_Correccion_Logica) AS ACTN_CNCL_Correccion_Logica,\r\nMAX(ACTN_CNCL_No_requiere_visita_tecnica) AS ACTN_CNCL_No_requiere_visita_tecnica,\r\nMAX(ACTN_CNCL_Retencion) AS ACTN_CNCL_Retencion,\r\nMAX(ACTN_CNCL_Resto) AS ACTN_CNCL_Resto,\r\nMAX(CGY_CNCL_Economico) AS Max_CGY_CNCL_Economico,\r\nMAX(CGY_CNCL_Personales) AS Max_CGY_CNCL_Personales,\r\nMAX(CGY_CNCL_Insatisfaccion) AS Max_CGY_CNCL_Insatisfaccion,\r\nMAX(CGY_CNCL_Comercial) AS Max_CGY_CNCL_Comercial,\r\nMAX(CGY_CNCL_Competencia) AS Max_CGY_CNCL_Competencia,\r\nMAX(CGY_CNCL_Resto) AS Max_CGY_CNCL_Resto,\r\nMAX(DSC_PCS_CNL_Cancelacion) AS Max_DSC_PCS_CNL_Cancelacion,\r\nMAX(DSC_PCS_CNL_Resto) AS Max_DSC_PCS_CNL_Resto,\r\nMAX(LN_BSN_TV) AS Max_LN_BSN_TV,\r\nMAX(LN_BSN_TEL) AS Max_LN_BSN_TEL,\r\nMAX(LN_BSN_INT) AS Max_LN_BSN_INT,\r\nMAX(MTV_CNCL_MuchosGastos) AS Max_MTV_CNCL_MuchosGastos,\r\nMAX(MTV_CNCL_SaldoAlto) AS Max_MTV_CNCL_SaldoAlto,\r\nMAX(MTV_CNCL_AumentoTarifa) AS Max_MTV_CNCL_AumentoTarifa,\r\nMAX(MTV_CNCL_Documentacion) AS Max_MTV_CNCL_Documentacion,\r\nMAX(MTV_CNCL_SinInquilino) AS Max_MTV_CNCL_SinInquilino,\r\nMAX(MTV_CNCL_Resto) AS Max_MTV_CNCL_Resto,\r\nMAX(PD_NM_CableModem) AS Max_PD_NM_CableModem,\r\nMAX(PD_NM_CableTVHD) AS Max_PD_NM_CableTVHD,\r\nMAX(PD_NM_CableTVDigital) AS Max_PD_NM_CableTVDigital,\r\nMAX(PD_NM_RedInterna) AS Max_PD_NM_RedInterna,\r\nMAX(PD_NM_HBOOnDemand) AS Max_PD_NM_HBOOnDemand,\r\nMAX(PD_NM_Resto) AS Max_PD_NM_Resto,\r\nMAX(RSN_CNCL_CancelacionUsuario) AS Max_RSN_CNCL_CancelacionUsuario,\r\nMAX(RSN_CNCL_CambioPlan) AS Max_RSN_CNCL_CambioPlan,\r\nMAX(RSN_CNCL_ProcedimientosInternos) AS Max_RSN_CNCL_ProcedimientosInternos,\r\nMAX(RSN_CNCL_Digitalizacion) AS Max_RSN_CNCL_Digitalizacion,\r\nMAX(RSN_CNCL_Resto) AS Max_RSN_CNCL_Resto,\r\n\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by hh_cd,\r\nfecha_inicio_semana, \r\nfecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_churn_node_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_churn_node_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_churn_node_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_churn_node_aggregated_to_week"], "alias": "int_churn_node_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "d7c7e417caebff1117a0cb8a49b64e6e5b1cd3839fa12bdf6aa6d37a32f2139f"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.20441, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_churn_node_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.nodo,\r\n    mot.CNCLS,\r\n    CASE\r\n        WHEN mot.NM_PROV IN ('PANAMA', 'PANAMA OESTE', 'CHIRIQUI', 'COCLE', 'COLON') THEN mot.NM_PROV\r\n        ELSE 'Resto'\r\n    END AS NM_PROV,\r\n    mot.ARPU_OPENING,\r\n    mot.CNCLS_MTD,\r\n    mot.CM_AFFCTTD,\r\n    mot.DCCTNS_VLNTRS,\r\n    mot.DTRCTR_SPRT,\r\n    mot.DTRCTR_USE,\r\n    mot.HHCC_CLS,\r\n    mot.HHCC_OPENING,\r\n    mot.HRS_AFFCTTN,\r\n    mot.INGRSS_OPENING,\r\n    mot.INTNS,\r\n    mot.INTNS_MTD,\r\n    mot.PRMTR_SPRT,\r\n    mot.PRMTR_USE,\r\n    mot.RTNTS,\r\n    mot.RTNTS_MTD,\r\n    mot.TMS_UNAVL,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana\r\n\r\n from {{ref('int_nodos_aggregated_to_week')}} as cart left join {{ref('stg_smy_pa__churn_node')}} as mot on cart.nodo = mot.node\r\n\r\n)\r\n\r\nselect \r\nhh_cd,\r\nNM_PROV,\r\n{{ get_avg_max_min([\r\n            'ARPU_OPENING',\r\n            'CNCLS',\r\n            'CNCLS_MTD',\r\n            'CM_AFFCTTD',\r\n            'DCCTNS_VLNTRS',\r\n            'DTRCTR_SPRT',\r\n            'DTRCTR_USE',\r\n            'HHCC_CLS',\r\n            'HHCC_OPENING',\r\n            'HRS_AFFCTTN',\r\n            'INGRSS_OPENING',\r\n            'INTNS',\r\n            'INTNS_MTD',\r\n            'PRMTR_SPRT',\r\n            'PRMTR_USE',\r\n            'RTNTS',\r\n            'RTNTS_MTD',\r\n            'TMS_UNAVL',\r\n        ]) }},\r\n    fecha_inicio_semana,\r\n    fecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by hh_cd,\r\nNM_PROV,\r\nfecha_inicio_semana,\r\nfecha_final_semana", "language": "sql", "refs": [{"name": "int_nodos_aggregated_to_week", "package": null, "version": null}, {"name": "stg_smy_pa__churn_node", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_avg_max_min", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.stg_smy_pa__churn_node"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_consumos_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_consumos_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_consumos_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_consumos_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_consumos_aggregated_to_week"], "alias": "int_consumos_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "70f0f933b95c37a70b05a7c4b45919c26473ebbb0a6c484ba88285abd848ed8b"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\intermediate\\intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.220789, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_consumos_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith features_data as (\r\n\r\n    select\r\n    cart.hh_cd,\r\n    mot.trfc_dwld,\r\n    mot.trfc_upld,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__consumos')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR)  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n    group by  cart.hh_cd, cart.fecha_inicio_semana, cart.fecha_final_semana, mot.trfc_dwld, mot.trfc_upld\r\n\r\n)\r\n\r\nselect \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    max(trfc_dwld) as max_trfc_dwld,\r\n    avg(trfc_dwld) as avg_trfc_dwld,\r\n    sum(trfc_dwld) as sum_trfc_dwld,\r\n    max(trfc_upld) as max_trfc_upld,\r\n    avg(trfc_upld) as avg_trfc_upld,\r\n    sum(trfc_upld) as sum_trfc_upld,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom features_data\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by  hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__consumos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_ctt_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_ctt_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_ctt_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_ctt_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_ctt_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_ctt_aggregated_to_week"], "alias": "int_ctt_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "0be39a7cd3b2c431ef61f1212231230183f0a7b0894cf264dd26438899b86dc0"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.2387257, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_ctt_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith tablon as(\r\n\r\n    select \r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana,\r\n    mot.ctt\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__ctt')}} as mot on cart.hh_cd = mot.hh_cd  and cart.fecha_inicio_semana = mot.fecha_inicio_semana   \r\n \r\n\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    COALESCE(ctt, -1) AS intencion_producto_int,\r\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha_inicio_semana desc) as rn\r\n    from tablon\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_tablon.hh_cd,\r\nts_tablon.fecha_inicio_semana, \r\nts_tablon.fecha_final_semana,\r\n{{ get_max_value([  'ts_tablon.ctt'\r\n]) }}\r\n{{ get_avg_value([  'ts_tablon.ctt'\r\n ]) }}\r\n\r\n\r\n{{ partition('ts_tablon.fecha_inicio_semana')}}\r\nfrom tablon as ts_tablon\r\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_tablon.fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana, ts_tablon.fecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__ctt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.get_avg_value", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__ctt"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_ctt_fix_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_ctt_fix_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_ctt_fix_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_ctt_fix_aggregated_to_week"], "alias": "int_ctt_fix_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "1e6dcd00fe3633f30b327bdb0e7b5f0bf591a0dfc55ce641662d6bec2e6eaeff"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.2657144, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_ctt_fix_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    mot.DSC_ST_PCS_CTT,\r\n    mot.DT_INL_PCS_CTT,\r\n    mot.DT_END_PCS_CTT,\r\n    DATE_DIFF('second', mot.DT_INL_PCS_CTT, mot.DT_END_PCS_CTT) AS DT_PCS_DIF_CTT_SECONDS,\r\n    CASE WHEN mot.DSC_PD = 'Cable Modem (e-MTA)' THEN 1 ELSE 0 END AS DSC_CableModem,\r\n    CASE WHEN mot.DSC_PD = 'Cable TV Access (Caja HD)' THEN 1 ELSE 0 END AS DSC_CajaHD,\r\n    CASE WHEN mot.DSC_PD = 'Cable TV Access (Caja Digital)' THEN 1 ELSE 0 END AS DSC_CajaDigital,\r\n    CASE WHEN mot.DSC_PD = 'Red Interna' THEN 1 ELSE 0 END AS DSC_RedInterna,\r\n    CASE WHEN mot.DSC_PD NOT IN ('Cable Modem (e-MTA)', 'Cable TV Access (Caja HD)', 'Cable TV Access (Caja Digital)', 'Red Interna') THEN 1 ELSE 0 END AS DSC_PD_Resto,\r\n\r\n    CASE WHEN mot.RSN_OPN_CTT = 'Sin se\u00f1al - En la Caja' THEN 1 ELSE 0 END AS RSN_OPN_CTT_SinSenalCaja,\r\n    CASE WHEN mot.RSN_OPN_CTT = 'Intermitencia' THEN 1 ELSE 0 END AS RSN_OPN_CTT_Intermitencia,\r\n    CASE WHEN mot.RSN_OPN_CTT = 'Niveles Incorrectos Potencia de la Senal' THEN 1 ELSE 0 END AS RSN_OPN_CTT_NivelesIncorrectos,\r\n    CASE WHEN mot.RSN_OPN_CTT = 'Sin senal' THEN 1 ELSE 0 END AS RSN_OPN_CTT_SinSenal,\r\n    CASE WHEN mot.RSN_OPN_CTT NOT IN ('Sin se\u00f1al - En la Caja', 'Intermitencia', 'Niveles Incorrectos Potencia de la Senal', 'Sin senal') THEN 1 ELSE 0 END AS RSN_OPN_CTT_Resto,\r\n\r\n    CASE WHEN mot.RSN_CLS_CTT = 'Cierre Automatico' THEN 1 ELSE 0 END AS RSN_CLS_CTT_CierreAutomatico,\r\n    CASE WHEN mot.RSN_CLS_CTT <> 'Cierre Automatico' THEN 1 ELSE 0 END AS RSN_CLS_CTT_Resto,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    mot.TP_ORDR_CTT\r\n\r\n from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__ctt_fix')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR)  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd, \r\nMax(DSC_CableModem) AS DSC_CableModem,\r\nMax(DSC_CajaHD) AS DSC_CajaHD,\r\nMax(DSC_CajaDigital) AS DSC_CajaDigital,\r\nMax(DSC_RedInterna) AS DSC_RedInterna,\r\nMax(DSC_PD_Resto) AS DSC_PD_Resto,\r\n\r\nMax(RSN_OPN_CTT_SinSenalCaja) AS RSN_OPN_CTT_SinSenalCaja,\r\nMax(RSN_OPN_CTT_Intermitencia) AS RSN_OPN_CTT_Intermitencia,\r\nMax(RSN_OPN_CTT_NivelesIncorrectos) AS RSN_OPN_CTT_NivelesIncorrectos,\r\nMax(RSN_OPN_CTT_SinSenal) AS RSN_OPN_CTT_SinSenal,\r\nMax(RSN_OPN_CTT_Resto) AS RSN_OPN_CTT_Resto,\r\n\r\nMax(RSN_CLS_CTT_CierreAutomatico) AS RSN_CLS_CTT_CierreAutomatico,\r\nMax(RSN_CLS_CTT_Resto) AS RSN_CLS_CTT_Resto,\r\navg(DT_PCS_DIF_CTT_SECONDS) as avg_DT_PCS_DIF_CTT_SECONDS,\r\nsum(DT_PCS_DIF_CTT_SECONDS) as sum_DT_PCS_DIF_CTT_SECONDS,\r\nmax(DT_PCS_DIF_CTT_SECONDS) as max_DT_PCS_DIF_CTT_SECONDS,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__ctt_fix", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__ctt_fix"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_ctt_producto_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_ctt_producto_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_ctt_producto_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_ctt_producto_aggregated_to_week"], "alias": "int_ctt_producto_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "7877f5f015f5f16097bf025855ebd8e8a58334e9251cb7cb1e3b07282154ed47"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.2826927, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_ctt_producto_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith tablon as(\r\n\r\n    select \r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana,\r\n    mot.ctt_producto_int,\r\n    mot.ctt_producto_tel,\r\n    mot.ctt_producto_tv\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__ctt_producto')}} as mot on cart.hh_cd = mot.hh_cd    and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    COALESCE(ctt_producto_tel, -1) AS ctt_producto_tel,\r\n    COALESCE(ctt_producto_int, -1) AS ctt_producto_int,\r\n    COALESCE(ctt_producto_tv, -1) AS ctt_producto_tv,\r\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha_inicio_semana desc) as rn\r\n    from tablon\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_tablon.hh_cd,\r\n{{ get_max_value([ \r\n                    'ts_tablon.ctt_producto_tel',\r\n                    'ts_tablon.ctt_producto_int', \r\n                    'ts_tablon.ctt_producto_tv']) }}\r\n{{ get_avg_value([  'ts_tablon.ctt_producto_tel', \r\n                    'ts_tablon.ctt_producto_int', \r\n                    'ts_tablon.ctt_producto_tv']) }}\r\nts_tablon.fecha_inicio_semana, \r\nts_tablon.fecha_final_semana,\r\n{{ partition('ts_tablon.fecha_inicio_semana')}}\r\nfrom tablon as ts_tablon\r\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_tablon.fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana, ts_tablon.fecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__ctt_producto", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.get_avg_value", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__ctt_producto"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_customers_consults_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_customers_consults_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_customers_consults_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_customers_consults_aggregated_to_week"], "alias": "int_customers_consults_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "6fc5ad3b5622fca5694aad103483f0e2221498e1623c1814c7da5d01bc2378c9"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.3050807, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_customers_consults_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    CASE\r\n        WHEN mot.CNL_SALE = 'Call Center' THEN 1\r\n        ELSE 0\r\n    END AS CNL_SALE_CallCenter,\r\n    CASE\r\n        WHEN mot.CNL_SALE = 'Redes Sociales' THEN 1\r\n        ELSE 0\r\n    END AS CNL_SALE_RedesSociales,\r\n    \r\n\r\n    CASE\r\n        WHEN mot.DEPT_TO_SCL = 'PROGRAMACI\u00d3N' THEN 1\r\n        ELSE 0\r\n    END AS DEPT_TO_SCL_Programacion,\r\n    CASE\r\n        WHEN mot.DEPT_TO_SCL = 'COBROS' THEN 1\r\n        ELSE 0\r\n    END AS DEPT_TO_SCL_Cobros,\r\n    CASE\r\n        WHEN mot.DEPT_TO_SCL = 'CALL CENTER' THEN 1\r\n        ELSE 0\r\n    END AS DEPT_TO_SCL_CallCenter,\r\n    CASE\r\n        WHEN mot.DEPT_TO_SCL = 'CORTES' THEN 1\r\n        ELSE 0\r\n    END AS DEPT_TO_SCL_Cortes,\r\n    CASE\r\n        WHEN mot.DEPT_TO_SCL NOT IN ('PROGRAMACI\u00d3N', 'COBROS', 'CALL CENTER', 'CORTES') THEN 1\r\n        ELSE 0\r\n    END AS DEPT_TO_SCL_Resto,\r\n\r\n    CASE\r\n        WHEN mot.DSC_SEG IN ('CO-PANA', 'CO-OEST', 'CO-CHIR', 'TS-COLO') THEN mot.DSC_SEG\r\n        ELSE 'Resto'\r\n    END AS DSC_SEG,\r\n\r\n    CASE WHEN mot.DSC_ST_PCS_CO = 'Finalizado' THEN 1 ELSE 0 END AS DSC_ST_PCS_CO_FINALIZADO,\r\n    CASE WHEN mot.DSC_ST_PCS_CO = 'Working' THEN 1 ELSE 0 END AS DSC_ST_PCS_CO_WORKING,\r\n    CASE WHEN mot.DSC_ST_PCS_CO = 'Cancelado' THEN 1 ELSE 0 END AS DSC_ST_PCS_CO_CANCELADO,\r\n    CASE WHEN mot.DSC_ST_PCS_CO = 'Abortado' THEN 1 ELSE 0 END AS DSC_ST_PCS_CO_ABORTADO,\r\n\r\n    mot.DT_END_PCS_CO,\r\n    mot.DT_INL_PCS_CO,\r\n    DATE_DIFF('second', mot.DT_INL_PCS_CO, mot.DT_END_PCS_CO) AS DT_PCS_CO_DIF_SECONDS,\r\n\r\n    CASE\r\n        WHEN mot.DTL_CNSLT = 'GENERALES' THEN 1\r\n        ELSE 0\r\n    END AS DTL_CNSLT_GENERALES,\r\n    CASE\r\n        WHEN mot.DTL_CNSLT = 'ACCIONES DE COBRO' THEN 1\r\n        ELSE 0\r\n    END AS DTL_CNSLT_ACCIONES_DE_COBRO,\r\n    CASE\r\n        WHEN mot.DTL_CNSLT = 'SIN SERVICIO' THEN 1\r\n        ELSE 0\r\n    END AS DTL_CNSLT_SIN_SERVICIO,\r\n    CASE\r\n        WHEN mot.DTL_CNSLT = 'CONSULTA SALDO' THEN 1\r\n        ELSE 0\r\n    END AS DTL_CNSLT_CONSULTA_SALDO,\r\n    CASE\r\n        WHEN mot.DTL_CNSLT = 'OTROS' THEN 1\r\n        ELSE 0\r\n    END AS DTL_CNSLT_OTROS,\r\n    CASE\r\n        WHEN mot.DTL_CNSLT NOT IN ('GENERALES', 'ACCIONES DE COBRO', 'SIN SERVICIO', 'CONSULTA SALDO', 'OTROS') THEN 0\r\n        ELSE 1\r\n    END AS DTL_CNSLT_Resto,\r\n\r\n    CASE\r\n        WHEN mot.MTH_CTC = 'Tel\u00e9fono' THEN 1\r\n        ELSE 0\r\n    END AS MTH_CTC_Telefono,\r\n    CASE\r\n        WHEN mot.MTH_CTC = 'Redes Sociales' THEN 1\r\n        ELSE 0\r\n    END AS MTH_CTC_Redes_Sociales,\r\n    CASE\r\n        WHEN mot.MTH_CTC NOT IN ('Tel\u00e9fono', 'Redes Sociales') THEN 0\r\n        ELSE 1\r\n    END AS MTH_CTC_Resto,\r\n\r\n    CASE\r\n        WHEN mot.RSN_CNSLT = 'Sin Servicio' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNSLT_Sin_Servicio,\r\n    CASE\r\n        WHEN mot.RSN_CNSLT = 'Consulta generales administrativos' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNSLT_Consulta_Generales_Administrativos,\r\n    CASE\r\n        WHEN mot.RSN_CNSLT = 'Consulta Saldo' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNSLT_Consulta_Saldo,\r\n    CASE\r\n        WHEN mot.RSN_CNSLT = 'Seguimiento a la Cita' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNSLT_Seguimiento_a_la_Cita,\r\n    CASE\r\n        WHEN mot.RSN_CNSLT = 'Consulta de Restricciones (VOD/TEL/INT)' THEN 1\r\n        ELSE 0\r\n    END AS RSN_CNSLT_Consulta_de_Restricciones,\r\n    CASE\r\n        WHEN mot.RSN_CNSLT NOT IN ('Sin Servicio', 'Consulta generales administrativos', 'Consulta Saldo', 'Seguimiento a la Cita', 'Consulta de Restricciones (VOD/TEL/INT)') THEN 0\r\n        ELSE 1\r\n    END AS RSN_CNSLT_Resto,\r\n\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    CASE\r\n        WHEN mot.TP_CNL = 'Chat' THEN 1\r\n        ELSE 0\r\n    END AS TP_CNL_Chat,\r\n    CASE\r\n        WHEN mot.TP_CNL = 'Twitter' THEN 1\r\n        ELSE 0\r\n    END AS TP_CNL_Twitter,\r\n    CASE\r\n        WHEN mot.TP_CNL NOT IN ('Chat', 'Twitter') THEN 0\r\n        ELSE 1\r\n    END AS TP_CNL_Resto,\r\n\r\n    CASE\r\n        WHEN mot.TP_CNSLT = 'INFORMACI\u00d3N' THEN 1\r\n        ELSE 0\r\n    END AS TP_CNSLT_INFORMACION,\r\n    CASE\r\n        WHEN mot.TP_CNSLT = 'DA\u00d1O DE \u00c1REA' THEN 1\r\n        ELSE 0\r\n    END AS TP_CNSLT_DANO_DE_AREA,\r\n    CASE\r\n        WHEN mot.TP_CNSLT = 'VISITA' THEN 1\r\n        ELSE 0\r\n    END AS TP_CNSLT_VISITA,\r\n    CASE\r\n        WHEN mot.TP_CNSLT = 'GESTION TECNICA' THEN 1\r\n        ELSE 0\r\n    END AS TP_CNSLT_GESTION_TECNICA,\r\n    CASE\r\n        WHEN mot.TP_CNSLT NOT IN ('INFORMACI\u00d3N', 'DA\u00d1O DE \u00c1REA', 'VISITA', 'GESTION TECNICA') THEN 0\r\n        ELSE 1\r\n    END AS TP_CNSLT_Resto\r\n\r\n from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__customer_consults')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR)  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd, \r\nMAX(DSC_ST_PCS_CO_FINALIZADO) AS Max_DSC_ST_PCS_CO_FINALIZADO,\r\nMAX(DSC_ST_PCS_CO_WORKING) AS Max_DSC_ST_PCS_CO_WORKING,\r\nMAX(DSC_ST_PCS_CO_CANCELADO) AS Max_DSC_ST_PCS_CO_CANCELADO,\r\nMAX(DSC_ST_PCS_CO_ABORTADO) AS Max_DSC_ST_PCS_CO_ABORTADO,\r\nMAX(CNL_SALE_CallCenter) AS Max_CNL_SALE_CallCenter,\r\nMAX(CNL_SALE_RedesSociales) AS Max_CNL_SALE_RedesSociales,\r\nMAX(DEPT_TO_SCL_Programacion) AS Max_DEPT_TO_SCL_Programacion,\r\nMAX(DEPT_TO_SCL_Cobros) AS Max_DEPT_TO_SCL_Cobros,\r\nMAX(DEPT_TO_SCL_CallCenter) AS Max_DEPT_TO_SCL_CallCenter,\r\nMAX(DEPT_TO_SCL_Cortes) AS Max_DEPT_TO_SCL_Cortes,\r\nMAX(DEPT_TO_SCL_Resto) AS Max_DEPT_TO_SCL_Resto,\r\nMAX(DSC_SEG) AS Max_DSC_SEG,\r\nMAX(DTL_CNSLT_GENERALES) AS Max_DTL_CNSLT_GENERALES,\r\nMAX(DTL_CNSLT_ACCIONES_DE_COBRO) AS Max_DTL_CNSLT_ACCIONES_DE_COBRO,\r\nMAX(DTL_CNSLT_SIN_SERVICIO) AS Max_DTL_CNSLT_SIN_SERVICIO,\r\nMAX(DTL_CNSLT_CONSULTA_SALDO) AS Max_DTL_CNSLT_CONSULTA_SALDO,\r\nMAX(DTL_CNSLT_OTROS) AS Max_DTL_CNSLT_OTROS,\r\nMAX(DTL_CNSLT_Resto) AS Max_DTL_CNSLT_Resto,\r\nMAX(MTH_CTC_Telefono) AS Max_MTH_CTC_Telefono,\r\nMAX(MTH_CTC_Redes_Sociales) AS Max_MTH_CTC_Redes_Sociales,\r\nMAX(MTH_CTC_Resto) AS Max_MTH_CTC_Resto,\r\nMAX(RSN_CNSLT_Sin_Servicio) AS Max_RSN_CNSLT_Sin_Servicio,\r\nMAX(RSN_CNSLT_Consulta_Generales_Administrativos) AS Max_RSN_CNSLT_Consulta_Generales_Administrativos,\r\nMAX(RSN_CNSLT_Consulta_Saldo) AS Max_RSN_CNSLT_Consulta_Saldo,\r\nMAX(RSN_CNSLT_Seguimiento_a_la_Cita) AS Max_RSN_CNSLT_Seguimiento_a_la_Cita,\r\nMAX(RSN_CNSLT_Consulta_de_Restricciones) AS Max_RSN_CNSLT_Consulta_de_Restricciones,\r\nMAX(RSN_CNSLT_Resto) AS Max_RSN_CNSLT_Resto,\r\nMAX(TP_CNL_Chat) AS Max_TP_CNL_Chat,\r\nMAX(TP_CNL_Twitter) AS Max_TP_CNL_Twitter,\r\nMAX(TP_CNL_Resto) AS Max_TP_CNL_Resto,\r\nMAX(TP_CNSLT_INFORMACION) AS Max_TP_CNSLT_INFORMACION,\r\nMAX(TP_CNSLT_DANO_DE_AREA) AS Max_TP_CNSLT_DANO_DE_AREA,\r\nMAX(TP_CNSLT_VISITA) AS Max_TP_CNSLT_VISITA,\r\nMAX(TP_CNSLT_GESTION_TECNICA) AS Max_TP_CNSLT_GESTION_TECNICA,\r\nMAX(TP_CNSLT_Resto) AS Max_TP_CNSLT_Resto,\r\navg(DT_PCS_CO_DIF_SECONDS) as avg_DT_PCS_CO_DIF_SECONDS,\r\nmin(DT_PCS_CO_DIF_SECONDS) as min_DT_PCS_CO_DIF_SECONDS,\r\nmax(DT_PCS_CO_DIF_SECONDS) as max_DT_PCS_CO_DIF_SECONDS,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by fecha_inicio_semana, fecha_final_semana,hh_cd", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__customer_consults", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__customer_consults"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_facturas_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_facturas_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_facturas_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_facturas_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_facturas_aggregated_to_week"], "alias": "int_facturas_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "51f8de7431a1be97a11c11a1da89ae6db53290e6c859e9efcdacfdff6951e048"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\intermediate\\intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.2247746, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_facturas_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\n    select \r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana,\r\n    cart.hh_cd, \r\n    case when es_factura = 1 then ttl else 0 end as ttl_factura,\r\n    case when es_factura = 0 then ttl else 0 end as ttl_no_factura\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_360_staging__facturas')}} as mot on cart.hh_cd = mot.hh_cd    \r\n    group by cart.fecha_inicio_semana,\r\n\tcart.fecha_final_semana,\r\n\tcart.hh_cd,\r\n\tcase\r\n\t\twhen es_factura = 1 then ttl else 0\r\n\tend ,\r\n\tcase\r\n\t\twhen es_factura = 0 then ttl else 0\r\n\tend \r\n)\r\n\r\nselect \r\nhh_cd, \r\navg(ttl_factura) as avg_ttl_factura,\r\nsum(ttl_factura) as sum_ttl_factura,\r\nmax(ttl_factura) as max_ttl_factura,\r\navg(ttl_no_factura) as avg_ttl_no_factura,\r\nsum(ttl_no_factura) as sum_ttl_no_factura,\r\nmax(ttl_no_factura) as max_ttl_no_factura,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('clasificacion_tipo.fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }} \r\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_360_staging__facturas", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__facturas"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_features_engineering_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_features_engineering_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_features_engineering_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_features_engineering_aggregated_to_week"], "alias": "int_features_engineering_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "18cbc5fd58e0b823cd72fd0bd8443933b9352f912bc2947d2441ccaa2c71c8b4"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\intermediate\\intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.2267795, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_features_engineering_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH features_tablon_fijo AS (\r\n    SELECT  hh_cd,\r\n            fecha_inicio_semana,\r\n            fecha_final_semana,\r\n            max_unexp_amt,\r\n            max_amt_due\r\n    FROM {{ ref('int_metricas_morosidad_aggregated_to_week') }}\r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\n\r\n),\r\n\r\nfeatures_nodos AS (\r\n    SELECT  hh_cd,\r\n            fecha_inicio_semana,\r\n            fecha_final_semana,\r\n            snr_deg,\r\n            cm_us\r\n    FROM {{ ref('int_nodos_aggregated_to_week') }}\r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\n),\r\n\r\nfeatures_fact_factura AS (\r\n    SELECT  hh_cd,\r\n            fecha_inicio_semana,\r\n            fecha_final_semana,\r\n            max_ttl_factura\r\n    FROM {{ ref('int_facturas_aggregated_to_week') }}\r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\n),\r\n\r\nfeatures_data_fix_fct AS (\r\n    SELECT  hh_cd,\r\n            fecha_inicio_semana,\r\n            fecha_final_semana,\r\n            max_trfc_dwld\r\n    FROM {{ ref('int_consumos_aggregated_to_week') }}\r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\n)\r\n\r\nSELECT\r\nftf.hh_cd,\r\nftf.fecha_inicio_semana,\r\nftf.fecha_final_semana,\r\nmax_trfc_dwld / snr_deg AS trfc_dwld_snr_deg, \r\nmax_trfc_dwld / cm_us AS trfc_dwld_cm_us, \r\nmax_unexp_amt / (max_amt_due + max_unexp_amt) AS unexp_amt_rel,\r\nmax_unexp_amt / (max_ttl_factura) AS unexp_amt_ttl,\r\n{{ partition('ftf.fecha_inicio_semana')}}\r\nFROM features_tablon_fijo AS ftf\r\nLEFT JOIN features_nodos ON CAST(features_nodos.hh_cd AS varchar) = ftf.hh_cd AND features_nodos.fecha_inicio_semana = ftf.fecha_inicio_semana \r\nLEFT JOIN features_fact_factura ON CAST(features_fact_factura.hh_cd AS varchar) = ftf.hh_cd AND features_fact_factura.fecha_inicio_semana = ftf.fecha_inicio_semana \r\nLEFT JOIN features_data_fix_fct ON CAST(features_data_fix_fct.hh_cd AS varchar) = ftf.hh_cd AND features_data_fix_fct.fecha_inicio_semana = ftf.fecha_inicio_semana", "language": "sql", "refs": [{"name": "int_metricas_morosidad_aggregated_to_week", "package": null, "version": null}, {"name": "int_nodos_aggregated_to_week", "package": null, "version": null}, {"name": "int_facturas_aggregated_to_week", "package": null, "version": null}, {"name": "int_consumos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_intencion_producto_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_intencion_producto_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_intencion_producto_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_intencion_producto_aggregated_to_week"], "alias": "int_intencion_producto_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "eeb6a30d0053a61e51c58fe5962465b029d79aaf03e3c999374278d37e76d195"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.3759668, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_intencion_producto_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith resultado_intencion as(\r\n\r\n    select \r\n    mot.intencion_producto_int,\r\n    mot.intencion_producto_tel,\r\n    mot.intencion_producto_tv,\r\n    cart.fecha_final_semana,\r\n    cart.fecha_inicio_semana,\r\n    cart.hh_cd\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__intencion_producto')}} as mot on cart.hh_cd = mot.hh_cd  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n    group by    mot.intencion_producto_int,\r\n    mot.intencion_producto_tel,\r\n    mot.intencion_producto_tv,\r\n    cart.fecha_final_semana,\r\n    cart.fecha_inicio_semana,\r\n    cart.hh_cd\r\n\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    COALESCE(intencion_producto_int, -1) AS intencion_producto_int,\r\n    COALESCE(intencion_producto_tv, -1) AS intencion_producto_tv,\r\n    COALESCE(intencion_producto_tel, -1) AS intencion_producto_tel,    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha_inicio_semana desc) as rn\r\n    from resultado_intencion\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_resultado_intencion.hh_cd,\r\n{{ get_max_value([ 'ts_resultado_intencion.intencion_producto_int',\r\n                    'ts_resultado_intencion.intencion_producto_tv',\r\n                    'ts_resultado_intencion.intencion_producto_tel']) }}\r\nts_resultado_intencion.fecha_inicio_semana, \r\nts_resultado_intencion.fecha_final_semana,\r\n{{ partition('ts_resultado_intencion.fecha_inicio_semana')}}\r\nfrom resultado_intencion as ts_resultado_intencion\r\nleft join ultimos on ts_resultado_intencion.hh_cd = ultimos.hh_cd and ts_resultado_intencion.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_resultado_intencion.fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by ts_resultado_intencion.hh_cd, ts_resultado_intencion.fecha_inicio_semana, ts_resultado_intencion.fecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__intencion_producto", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__intencion_producto"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_metricas_descuentos_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_metricas_descuentos_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_metricas_descuentos_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_metricas_descuentos_aggregated_to_week"], "alias": "int_metricas_descuentos_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "13b0084b015f1d2f75e8ad5687ace2a5d29e55e0f25cd00241e8267f37b52c55"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.39567, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_metricas_descuentos_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith descuentos as(\r\nselect \r\ncartera.hh_cd,\r\npr.end_dt,\r\npr.eff_dt,\r\ncartera.fecha_inicio_semana, \r\ncartera.fecha_final_semana,\r\n\r\nCASE\r\n    WHEN pr.pd_lng_nm LIKE '%TELEVISI\u00d3N%' OR\r\n            pr.pd_lng_nm LIKE '%CABLE TV%' THEN 1\r\n    ELSE 0\r\nEND AS tiene_descuento_tv,\r\nCASE\r\n    WHEN pr.pd_lng_nm LIKE '%INTERNET%' OR\r\n            pr.pd_lng_nm LIKE '%ETHERNET%' THEN 1\r\n    ELSE 0\r\nEND AS tiene_descuento_int,\r\nCASE\r\n    WHEN pr.pd_lng_nm LIKE '%CABLEPHONE%' OR \r\n            pr.pd_lng_nm LIKE '%TELECARRIER PLANS - TELEPHONY%' OR\r\n            pr.pd_lng_nm LIKE '%TELECARRIER PLANS - SIMPLE PRODUCTS%' THEN 1\r\n    ELSE 0\r\nEND AS tiene_descuento_tel\r\n\r\nfrom {{ref('stg_360_staging__dim_producto')}} pr\r\n LEFT JOIN {{ref('stg_360_staging__descuentos')}} cartera on cartera.unq_id_src_stm = pr.unq_id_src_stm \r\n\r\n\r\n)\r\n Select \r\n hh_cd,\r\nMAX(tiene_descuento_tv) AS tiene_descuento_tv,\r\nMAX(tiene_descuento_int) AS tiene_descuento_int,\r\nMAX(tiene_descuento_tel) AS tiene_descuento_tel,\r\nmax(end_dt) AS max_end_dt,\r\nmax(eff_dt) AS max_eff_dt,\r\nmin(end_dt) AS min_end_dt,\r\nmin(eff_dt) AS min_eff_dt,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom descuentos\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\nGROUP BY hh_cd,\r\nfecha_inicio_semana, \r\nfecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__dim_producto", "package": null, "version": null}, {"name": "stg_360_staging__descuentos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__dim_producto", "model.VoluntaryChurnABT.stg_360_staging__descuentos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_metricas_morosidad_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_metricas_morosidad_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_metricas_morosidad_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_metricas_morosidad_aggregated_to_week"], "alias": "int_metricas_morosidad_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "38b70a6ea44c4495153d4634a6b1011ff2d60282b2986c429254d8a0bff131f2"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.4176297, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_metricas_morosidad_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith morosidad_2 as(\r\n\r\n    select \r\n    hd.hh_cd,\r\n    mor.cstmr_key,\r\n    mor.fecha_inicio_semana, \r\n    mor.fecha_final_semana,\r\n    mor.at_30_amt,\r\n    mor.at_60_amt,\r\n    mor.at_90_amt,\r\n    mor.at_120_amt,\r\n    mor.at_150_amt,\r\n    mor.at_180_amt,\r\n    mor.at_210_amt,\r\n    mor.at_240_amt,\r\n    mor.at_270_amt,\r\n    mor.at_300_amt,\r\n    mor.at_330_amt,\r\n    mor.at_360_amt,\r\n    mor.amt_due, \r\n    mor.unexp_amt  \r\n    from {{ref('stg_smy_pa__morosidad')}} as mor LEFT JOIN prod_raw_dwh_dtl_pa.hh_dim hd on mor.cstmr_key = hd.cstmr_key\r\n    WHERE {{ run_mode('mor.fecha_inicio_semana', var(\"modo\")) }}\r\n    group by     hd.hh_cd,\r\n    mor.cstmr_key,\r\n    mor.fecha_inicio_semana, \r\n    mor.fecha_final_semana,\r\n    mor.at_30_amt,\r\n    mor.at_60_amt,\r\n    mor.at_90_amt,\r\n    mor.at_120_amt,\r\n    mor.at_150_amt,\r\n    mor.at_180_amt,\r\n    mor.at_210_amt,\r\n    mor.at_240_amt,\r\n    mor.at_270_amt,\r\n    mor.at_300_amt,\r\n    mor.at_330_amt,\r\n    mor.at_360_amt,\r\n    mor.amt_due, \r\n    mor.unexp_amt \r\n    \r\n\r\n),\r\n\r\n\r\nmorosidad_1 as(\r\n    SELECT \r\n    cart.hh_cd,\r\n    mor2.cstmr_key,\r\n    mor2.fecha_inicio_semana, \r\n    mor2.fecha_final_semana,\r\n    mor2.at_30_amt,\r\n    mor2.at_60_amt,\r\n    mor2.at_90_amt,\r\n    mor2.at_120_amt,\r\n    mor2.at_150_amt,\r\n    mor2.at_180_amt,\r\n    mor2.at_210_amt,\r\n    mor2.at_240_amt,\r\n    mor2.at_270_amt,\r\n    mor2.at_300_amt,\r\n    mor2.at_330_amt,\r\n    mor2.at_360_amt,\r\n    mor2.amt_due, \r\n    mor2.unexp_amt      \r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join morosidad_2 as mor2 on cart.hh_cd = mor2.hh_cd\r\n    WHERE {{ run_mode('mor2.fecha_inicio_semana', var(\"modo\")) }}\r\n\r\n),\r\n\r\nmorosidad as (\r\n    select\r\n    hh_cd, \r\n    cstmr_key,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    cast((case when at_30_amt  is null then -1.0 else cast(at_30_amt AS DOUBLE) end) as double) as at_30_amt,\r\n    cast((case when at_60_amt  is null then -1.0 else cast(at_60_amt AS DOUBLE) end) as double) as at_60_amt,\r\n    cast((case when at_90_amt  is null then -1.0 else cast(at_90_amt AS DOUBLE) end) as double) as at_90_amt,\r\n    cast((case when at_120_amt is null  then -1.0 else cast(at_120_amt AS DOUBLE) end) as double) as at_120_amt,\r\n    cast((case when at_150_amt is null  then -1.0 else cast(at_150_amt AS DOUBLE) end) as double) as at_150_amt,\r\n    cast((case when at_180_amt is null  then -1.0 else cast(at_180_amt AS DOUBLE) end) as double) as at_180_amt,\r\n    cast((case when at_210_amt is null  then -1.0 else cast(at_210_amt AS DOUBLE) end) as double) as at_210_amt,\r\n    cast((case when at_240_amt is null  then -1.0 else cast(at_240_amt AS DOUBLE) end) as double) as at_240_amt,\r\n    cast((case when at_270_amt is null  then -1.0 else cast(at_270_amt AS DOUBLE) end) as double) as at_270_amt,\r\n    cast((case when at_300_amt is null  then -1.0 else cast(at_300_amt AS DOUBLE) end) as double) as at_300_amt,\r\n    cast((case when at_330_amt is null  then -1.0 else cast(at_330_amt AS DOUBLE) end) as double) as at_330_amt,\r\n    cast((case when at_360_amt is null  then -1.0 else cast(at_360_amt AS DOUBLE) end) as double) as at_360_amt,\r\n    cast((case when amt_due  is null then -1.0 else cast(amt_due AS DOUBLE) end) as double) as amt_due,\r\n    cast((case when unexp_amt  is null then -1.0 else cast(unexp_amt AS DOUBLE) end) as double) as unexp_amt\r\n    from morosidad_1\r\n)\r\nselect \r\nhh_cd,\r\n{{ get_max_value([  'amt_due', \r\n                    'unexp_amt',\r\n                    'at_30_amt',\r\n                    'at_60_amt',\r\n                    'at_90_amt',\r\n                    'at_120_amt',\r\n                    'at_150_amt',\r\n                    'at_180_amt',\r\n                    'at_210_amt',\r\n                    'at_240_amt',\r\n                    'at_270_amt',\r\n                    'at_300_amt',\r\n                    'at_330_amt',\r\n                    'at_360_amt',\r\n                   ]) }}\r\nmorosidad.fecha_inicio_semana, \r\nmorosidad.fecha_final_semana,\r\n{{ partition('morosidad.fecha_inicio_semana')}}\r\nfrom morosidad\r\ngroup by hh_cd, morosidad.fecha_inicio_semana, morosidad.fecha_final_semana", "language": "sql", "refs": [{"name": "stg_smy_pa__morosidad", "package": null, "version": null}, {"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__morosidad", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_motivo_intencion_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_motivo_intencion_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_motivo_intencion_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_motivo_intencion_aggregated_to_week"], "alias": "int_motivo_intencion_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "93520412bb637dd84a8aad7053287c1b2ea1c9a943b67bbcfedf081b7415b926"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.441201, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_motivo_intencion_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith tablon as(\r\n\r\n    select \r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana,\r\n    mot.motivo_intencion_int,\r\n    mot.motivo_intencion_tel,\r\n    mot.motivo_intencion_tv\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__motivo_intencion')}} as mot on cart.hh_cd = mot.hh_cd  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n    group by     cart.hh_cd,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana,\r\n    mot.motivo_intencion_int,\r\n    mot.motivo_intencion_tel,\r\n    mot.motivo_intencion_tv\r\n\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    case when motivo_intencion_int in ('Cancelacion por usuario') then motivo_intencion_int else 'resto_motivo_intencion_int' end as motivo_intencion_int,\r\n    case when motivo_intencion_tv in ('Cancelacion por usuario', 'Cambio de plan') then motivo_intencion_tv else 'resto_motivo_intencion_tv' end as motivo_intencion_tv,\r\n    case when motivo_intencion_tel in ('Cambio de plan', 'Procedimientos internos') then motivo_intencion_tel else 'resto_motivo_intencion_tel' end as motivo_intencion_tel,\r\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha_inicio_semana desc) as rn\r\n    from tablon\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_tablon.hh_cd,\r\n\r\nmax(ultimos.motivo_intencion_int) as max_motivo_intencion_int,\r\nmax(ultimos.motivo_intencion_tv) as max_motivo_intencion_tv,\r\nmax(ultimos.motivo_intencion_tel) as max_motivo_intencion_tel,\r\nts_tablon.fecha_inicio_semana, \r\nts_tablon.fecha_final_semana,\r\n{{ partition('ts_tablon.fecha_inicio_semana')}}\r\nfrom tablon as ts_tablon\r\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_tablon.fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana, ts_tablon.fecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__motivo_intencion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__motivo_intencion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_new_offers_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_new_offers_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_new_offers_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_new_offers_aggregated_to_week"], "alias": "int_new_offers_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "5a16a97ee3fd184de03d4c89e11b8b57973eb874e465a96f22ca163412b93447"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.462227, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_new_offers_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    CASE WHEN mot.CNL = 'Telemercadeo Web' THEN 1 ELSE 0 END AS CNL_Telemercadeo_Web,\r\n    CASE WHEN mot.CNL = 'Telemercadeo Inbound' THEN 1 ELSE 0 END AS CNL_Telemercadeo_Inbound,\r\n    CASE WHEN mot.CNL = 'Resto' THEN 1 ELSE 0 END AS CNL_Resto,\r\n    CASE WHEN mot.NM_OFR = 'TBD' THEN 1 ELSE 0 END AS NM_OFR_TBD,\r\n    CASE WHEN mot.NM_OFR = 'HBO MAX' THEN 1 ELSE 0 END AS NM_OFR_HBO_MAX,\r\n    CASE WHEN mot.NM_OFR = 'Vix Premium' THEN 1 ELSE 0 END AS NM_OFR_Vix_Premium,\r\n    CASE WHEN mot.NM_OFR = 'Promo FTTH Tactica #1' THEN 1 ELSE 0 END AS NM_OFR_Promo_FTTH_Tactica_1,\r\n    CASE WHEN mot.NM_OFR = 'Vix+' THEN 1 ELSE 0 END AS NM_OFR_Vix_Plus,\r\n    CASE WHEN mot.NM_OFR = 'HBO Max 2 Meses Gratis (TV)' THEN 1 ELSE 0 END AS NM_OFR_HBO_Max_2_Meses_Gratis_TV,\r\n    CASE WHEN mot.NM_OFR = 'MAO Promo Tactica con VIX+' THEN 1 ELSE 0 END AS NM_OFR_MAO_Promo_Tactica_con_VIX_Plus,\r\n    CASE WHEN mot.NM_OFR = 'HBO On Demand' THEN 1 ELSE 0 END AS NM_OFR_HBO_On_Demand,\r\n    CASE WHEN mot.NM_OFR = 'Promo Tactica #1' THEN 1 ELSE 0 END AS NM_OFR_Promo_Tactica_1,\r\n    CASE WHEN mot.NM_OFR = 'Paramount+' THEN 1 ELSE 0 END AS NM_OFR_Paramount_Plus,\r\n    CASE WHEN mot.NM_OFR = 'Combo+ Gratis 1 Mes' THEN 1 ELSE 0 END AS NM_OFR_Combo_Gratis_1_Mes,\r\n    CASE WHEN mot.NM_OFR = 'Entry Pack #1' THEN 1 ELSE 0 END AS NM_OFR_Entry_Pack_1,\r\n    CASE WHEN mot.NM_OFR = 'Resto' THEN 1 ELSE 0 END AS NM_OFR_Resto,\r\n    mot.PRC_OFR\r\n\r\n from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__new_offers')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR) and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd, \r\nmax(CNL_Telemercadeo_Web) AS CNL_Telemercadeo_Web,\r\nmax(CNL_Telemercadeo_Inbound) AS CNL_Telemercadeo_Inbound,\r\nmax(CNL_Resto) AS CNL_Resto,\r\nmax(NM_OFR_TBD) AS NM_OFR_TBD,\r\nmax(NM_OFR_HBO_MAX) AS NM_OFR_HBO_MAX,\r\nmax(NM_OFR_Vix_Premium) AS NM_OFR_Vix_Premium,\r\nmax(NM_OFR_Promo_FTTH_Tactica_1) AS NM_OFR_Promo_FTTH_Tactica_1,\r\nmax(NM_OFR_Vix_Plus) AS NM_OFR_Vix_Plus,\r\nmax(NM_OFR_HBO_Max_2_Meses_Gratis_TV) AS NM_OFR_HBO_Max_2_Meses_Gratis_TV,\r\nmax(NM_OFR_MAO_Promo_Tactica_con_VIX_Plus) AS NM_OFR_MAO_Promo_Tactica_con_VIX_Plus,\r\nmax(NM_OFR_HBO_On_Demand) AS NM_OFR_HBO_On_Demand,\r\nmax(NM_OFR_Promo_Tactica_1) AS NM_OFR_Promo_Tactica_1,\r\nmax(NM_OFR_Paramount_Plus) AS NM_OFR_Paramount_Plus,\r\nmax(NM_OFR_Combo_Gratis_1_Mes) AS NM_OFR_Combo_Gratis_1_Mes,\r\nmax(NM_OFR_Entry_Pack_1) AS NM_OFR_Entry_Pack_1,\r\nmax(NM_OFR_Resto) AS NM_OFR_Resto,\r\navg(PRC_OFR) as avg_PRC_OFR,\r\nmin(PRC_OFR) as min_PRC_OFR,\r\nmax(PRC_OFR) as max_PRC_OFR,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by fecha_inicio_semana, fecha_final_semana,hh_cd", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__new_offers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__new_offers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_new_orders_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_new_orders_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_new_orders_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_new_orders_aggregated_to_week"], "alias": "int_new_orders_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "b790cf6f44204b985c736e5443dee07006521f578ab4d0699576ce55e5c373a3"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.4829323, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_new_orders_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    mot.DT_END_ORDR,\r\n    mot.DT_INL_ORDR,\r\n    mot.PD_ADNL,\r\n    DATE_DIFF('second', mot.DT_INL_ORDR, mot.DT_END_ORDR) AS DT_ORDR_DIF_SECONDS,\r\n    CASE WHEN mot.PD_ADNL_DSC = 'Caja HD' THEN 1 ELSE 0 END AS PD_ADNL_DSC_Caja_HD,\r\n    CASE WHEN mot.PD_ADNL_DSC = 'Wifi Pro Residencial Caja Android' THEN 1 ELSE 0 END AS PD_ADNL_DSC_Wifi_Pro_Residencial_Caja_Android,\r\n    CASE WHEN mot.PD_ADNL_DSC = 'Wifi Pro Residencial Wifi Pro Residencial Caja HD' THEN 1 ELSE 0 END AS PD_ADNL_DSC_Wifi_Pro_Residencial_Caja_HD,\r\n    CASE WHEN mot.PD_ADNL_DSC = 'Resto' THEN 1 ELSE 0 END AS PD_ADNL_DSC_Resto,\r\n    CASE WHEN mot.STE_ORDR = 'Complete' THEN 1 ELSE 0 END AS STE_ORDR_Complete,\r\n    CASE WHEN mot.STE_ORDR = 'Cancelled' THEN 1 ELSE 0 END AS STE_ORDR_Cancelled,\r\n    CASE WHEN mot.STE_ORDR = 'Scheduled Appointment' THEN 1 ELSE 0 END AS STE_ORDR_Scheduled_Appointment,\r\n    CASE WHEN mot.STE_ORDR = 'Resto' THEN 1 ELSE 0 END AS STE_ORDR_Resto,\r\n    CASE WHEN mot.TP_ORDR = 'Venta Nueva - Cliente no existente' THEN 1 ELSE 0 END AS TP_ORDR_Venta_Nueva_Cliente_No_Existente,\r\n    CASE WHEN mot.TP_ORDR = 'Mod. Cliente y Mod. Cuenta' THEN 1 ELSE 0 END AS TP_ORDR_Mod_Cliente_y_Mod_Cuenta,\r\n    CASE WHEN mot.TP_ORDR = 'Agregar VAS' THEN 1 ELSE 0 END AS TP_ORDR_Agregar_VAS,\r\n    CASE WHEN mot.TP_ORDR = 'Cancelar VAS WFL' THEN 1 ELSE 0 END AS TP_ORDR_Cancelar_VAS_WFL,\r\n    CASE WHEN mot.TP_ORDR = 'Cliente Existente' THEN 1 ELSE 0 END AS TP_ORDR_Cliente_Existente,\r\n    CASE WHEN mot.TP_ORDR = 'Resto' THEN 1 ELSE 0 END AS TP_ORDR_Resto\r\n\r\n from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__new_orders')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR)  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd, \r\nmax(PD_ADNL_DSC_Caja_HD) AS PD_ADNL_DSC_Caja_HD,\r\nmax(PD_ADNL_DSC_Wifi_Pro_Residencial_Caja_Android) AS PD_ADNL_DSC_Wifi_Pro_Residencial_Caja_Android,\r\nmax(PD_ADNL_DSC_Wifi_Pro_Residencial_Caja_HD) AS PD_ADNL_DSC_Wifi_Pro_Residencial_Caja_HD,\r\nmax(PD_ADNL_DSC_Resto) AS PD_ADNL_DSC_Resto,\r\nmax(STE_ORDR_Complete) AS STE_ORDR_Complete,\r\nmax(STE_ORDR_Cancelled) AS STE_ORDR_Cancelled,\r\nmax(STE_ORDR_Scheduled_Appointment) AS STE_ORDR_Scheduled_Appointment,\r\nmax(STE_ORDR_Resto) AS STE_ORDR_Resto,\r\nmax(TP_ORDR_Venta_Nueva_Cliente_No_Existente) AS TP_ORDR_Venta_Nueva_Cliente_No_Existente,\r\nmax(TP_ORDR_Mod_Cliente_y_Mod_Cuenta) AS TP_ORDR_Mod_Cliente_y_Mod_Cuenta,\r\nmax(TP_ORDR_Agregar_VAS) AS TP_ORDR_Agregar_VAS,\r\nmax(TP_ORDR_Cancelar_VAS_WFL) AS TP_ORDR_Cancelar_VAS_WFL,\r\nmax(TP_ORDR_Cliente_Existente) AS TP_ORDR_Cliente_Existente,\r\nmax(TP_ORDR_Resto) AS TP_ORDR_Resto,\r\navg(PD_ADNL) as avg_PD_ADNL,\r\nmin(PD_ADNL) as min_PD_ADNL,\r\nmax(PD_ADNL) as max_PD_ADNL,\r\navg(DT_ORDR_DIF_SECONDS) as avg_DT_ORDR_DIF_SECONDS,\r\nmin(DT_ORDR_DIF_SECONDS) as min_DT_ORDR_DIF_SECONDS,\r\nmax(DT_ORDR_DIF_SECONDS) as max_DT_ORDR_DIF_SECONDS,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by fecha_inicio_semana, fecha_final_semana,hh_cd", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__new_orders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__new_orders"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_nodos_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_nodos_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_nodos_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_nodos_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_nodos_aggregated_to_week"], "alias": "int_nodos_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "d6b5e4ba56005283bba91474a1811fd06784477ec46c8ca3779a06aef473b6a3"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\intermediate\\intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.2227688, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_nodos_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith hh_cd_nodos as (\r\n\r\n    select\r\n    cart.hh_cd,\r\n    nod.BANDWDTH_key,\r\n    nod.nodo, \r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    case when nod.nodo like '%GOLD%' then 1 else 0 end AS es_gold\r\n\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_dtl_pa__nodos')}} as nod on cart.hh_cd = nod.hh_cd\r\n    WHERE {{ run_mode('cart.fecha_inicio_semana', var(\"modo\")) }}\r\n),\r\n\r\nfeatures_nodos as (\r\n    select\r\n    nodes as nodo,\r\n    desc_clss_snr,\r\n    desc_clss_ucer,\r\n    desc_clss_npa,\r\n    desc_ut_us,\r\n    cm_us,\r\n    numr,\r\n    samp,\r\n    ucer_deg,\r\n    snr_deg,\r\n    pct_npa,\r\n    pct_ucer,\r\n    fecha_inicio_semana\r\n    from {{ ref('stg_smy_pa__performances') }}\r\n)\r\n\r\nselect\r\nhn.hh_cd,\r\nhn.fecha_inicio_semana,\r\nhn.fecha_final_semana,\r\nhn.BANDWDTH_key,\r\nfn.desc_clss_snr,\r\nfn.nodo,\r\nfn.desc_clss_ucer,\r\nfn.desc_clss_npa,\r\nfn.desc_ut_us,\r\nfn.cm_us,\r\nfn.numr,\r\nfn.samp,\r\nfn.ucer_deg,\r\nfn.snr_deg,\r\nfn.pct_npa,\r\nfn.pct_ucer,\r\nhn.es_gold,\r\n{{ partition('hn.fecha_inicio_semana')}}\r\nfrom hh_cd_nodos as hn \r\nleft join features_nodos as fn on fn.nodo = hn.nodo and fn.fecha_inicio_semana = hn.fecha_inicio_semana \r\nwhere hh_cd is not null \r\nand  {{ run_mode('hn.fecha_inicio_semana', var(\"modo\")) }}\r\n\r\ngroup by \r\n    hn.hh_cd, \r\n    hn.BANDWDTH_key, \r\n    hn.es_gold, \r\n    fn.nodo,\r\n    fn.desc_clss_snr,\r\n    fn.desc_clss_ucer,\r\n    fn.desc_clss_npa,\r\n    fn.desc_ut_us,\r\n    fn.cm_us,\r\n    fn.numr,\r\n    fn.samp,\r\n    fn.ucer_deg,\r\n    fn.snr_deg,\r\n    fn.pct_npa,\r\n    fn.pct_ucer,\r\n    hn.fecha_final_semana,\r\n    fn.fecha_inicio_semana,\r\n    hn.fecha_inicio_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_dtl_pa__nodos", "package": null, "version": null}, {"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_dtl_pa__nodos", "model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_ntt_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_ntt_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_ntt_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_ntt_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_ntt_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_ntt_aggregated_to_week"], "alias": "int_ntt_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "19f6faf835a19259e38970cc67eb3e1821d57dbe8fa1f87f2169b39032b3c979"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.5347142, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_ntt_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.nodo,\r\n    DATE_DIFF('second', mot.DT_INL_PCS_NTT, mot.DT_END_PCS_NTT) AS DT_PCS_NTT_DIF_SECONDS,\r\n\r\n    CASE WHEN DSC_ST_PCS_NTT = 'Finalizado' THEN 1 ELSE 0 END AS DSC_ST_PCS_NTT_Finalizado,\r\n    CASE WHEN DSC_ST_PCS_NTT = 'Abortado' THEN 1 ELSE 0 END AS DSC_ST_PCS_NTT_Abortado,\r\n    CASE WHEN DSC_ST_PCS_NTT = 'Working' THEN 1 ELSE 0 END AS DSC_ST_PCS_NTT_Working,\r\n    CASE WHEN DSC_ST_PCS_NTT = 'Iniciando' THEN 1 ELSE 0 END AS DSC_ST_PCS_NTT_Iniciando,\r\n    CASE WHEN DSC_ST_PCS_NTT = 'Resto' THEN 1 ELSE 0 END AS DSC_ST_PCS_NTT_Resto,\r\n    CASE WHEN TP_NTT = 'Sin Servicio' THEN 1 ELSE 0 END AS TP_NTT_Sin_Servicio,\r\n    CASE WHEN TP_NTT = 'Electrico' THEN 1 ELSE 0 END AS TP_NTT_Electrico,\r\n    CASE WHEN TP_NTT = 'Mantenimiento' THEN 1 ELSE 0 END AS TP_NTT_Mantenimiento,\r\n    CASE WHEN TP_NTT = 'Degradaci\u00f3n de Servicio' THEN 1 ELSE 0 END AS TP_NTT_Degradacion_de_Servicio,\r\n    CASE WHEN TP_NTT = 'Resto' THEN 1 ELSE 0 END AS TP_NTT_Resto,\r\n    CASE WHEN SVC_IVL_NTT = 'Todos' THEN 1 ELSE 0 END AS SVC_IVL_NTT_Todos,\r\n    CASE WHEN SVC_IVL_NTT = 'Ninguno' THEN 1 ELSE 0 END AS SVC_IVL_NTT_Ninguno,\r\n    CASE WHEN SVC_IVL_NTT = 'Cable Modem y Telefon\u00eda' THEN 1 ELSE 0 END AS SVC_IVL_NTT_Cable_Modem_y_Telefonia,\r\n    CASE WHEN SVC_IVL_NTT = 'Resto' THEN 1 ELSE 0 END AS SVC_IVL_NTT_Resto,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana\r\n\r\n from {{ref('int_nodos_aggregated_to_week')}} as cart left join {{ref('stg_smy_pa__ntt')}} as mot on cart.nodo = mot.LIST_NODE_NTT  and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd,\r\nMAX(DT_PCS_NTT_DIF_SECONDS) AS DT_PCS_NTT_DIF_SECONDS,\r\nMAX(DSC_ST_PCS_NTT_Finalizado) AS DSC_ST_PCS_NTT_Finalizado,\r\nMAX(DSC_ST_PCS_NTT_Abortado) AS DSC_ST_PCS_NTT_Abortado,\r\nMAX(DSC_ST_PCS_NTT_Working) AS DSC_ST_PCS_NTT_Working,\r\nMAX(DSC_ST_PCS_NTT_Iniciando) AS DSC_ST_PCS_NTT_Iniciando,\r\nMAX(DSC_ST_PCS_NTT_Resto) AS DSC_ST_PCS_NTT_Resto,\r\nMAX(TP_NTT_Sin_Servicio) AS TP_NTT_Sin_Servicio,\r\nMAX(TP_NTT_Electrico) AS TP_NTT_Electrico,\r\nMAX(TP_NTT_Mantenimiento) AS TP_NTT_Mantenimiento,\r\nMAX(TP_NTT_Degradacion_de_Servicio) AS TP_NTT_Degradacion_de_Servicio,\r\nMAX(TP_NTT_Resto) AS TP_NTT_Resto,\r\nMAX(SVC_IVL_NTT_Todos) AS SVC_IVL_NTT_Todos,\r\nMAX(SVC_IVL_NTT_Ninguno) AS SVC_IVL_NTT_Ninguno,\r\nMAX(SVC_IVL_NTT_Cable_Modem_y_Telefonia) AS SVC_IVL_NTT_Cable_Modem_y_Telefonia,\r\nMAX(SVC_IVL_NTT_Resto) AS SVC_IVL_NTT_Resto,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by hh_cd, fecha_inicio_semana, fecha_final_semana", "language": "sql", "refs": [{"name": "int_nodos_aggregated_to_week", "package": null, "version": null}, {"name": "stg_smy_pa__ntt", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.stg_smy_pa__ntt"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_products_tigo_vs_competence_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_products_tigo_vs_competence_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_products_tigo_vs_competence_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_products_tigo_vs_competence_aggregated_to_week"], "alias": "int_products_tigo_vs_competence_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "4a12539b23af99ffe31e48f16e6f29188812f970a99cab171e6ab3d92999bd0e"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.5528955, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_products_tigo_vs_competence_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    mot.BILL_CMPTNC,\r\n    mot.BILL_TIGO,\r\n    mot.DIF_PRC,\r\n    mot.DIF_SPEED,\r\n    mot.LVL_DSFS_PRC,\r\n    mot.LVL_DSFS_SPEED,\r\n    mot.VLNRBLTY\r\n\r\n from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__products_tigo_vs_competence')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR) and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n\r\n)\r\n\r\nselect \r\nhh_cd, \r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\nMAX(BILL_CMPTNC) as MAX_BILL_CMPTNC, \r\nMAX(BILL_TIGO) as MAX_BILL_TIGO, \r\nMAX(DIF_PRC) as MAX_DIF_PRC, \r\nMAX(DIF_SPEED) as MAX_DIF_SPEED, \r\nMAX(LVL_DSFS_PRC) as MAX_LVL_DSFS_PRC, \r\nMAX(LVL_DSFS_SPEED) as MAX_LVL_DSFS_SPEED, \r\nMAX(VLNRBLTY) as MAX_VLNRBLTY, \r\nMIN(BILL_CMPTNC) AS MIN_BILL_CMPTNC,\r\nMIN(BILL_TIGO) AS MIN_BILL_TIGO,\r\nMIN(DIF_PRC) AS MIN_DIF_PRC,\r\nMIN(DIF_SPEED) AS MIN_DIF_SPEED,\r\nMIN(LVL_DSFS_PRC) AS MIN_LVL_DSFS_PRC,\r\nMIN(LVL_DSFS_SPEED) AS MIN_LVL_DSFS_SPEED,\r\nMIN(VLNRBLTY) AS MIN_VLNRBLTY,\r\nAVG(BILL_CMPTNC) AS AVG_BILL_CMPTNC,\r\nAVG(BILL_TIGO) AS AVG_BILL_TIGO,\r\nAVG(DIF_PRC) AS AVG_DIF_PRC,\r\nAVG(DIF_SPEED) AS AVG_DIF_SPEED,\r\nAVG(LVL_DSFS_PRC) AS AVG_LVL_DSFS_PRC,\r\nAVG(LVL_DSFS_SPEED) AS AVG_LVL_DSFS_SPEED,\r\nAVG(VLNRBLTY) AS AVG_VLNRBLTY,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__products_tigo_vs_competence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__products_tigo_vs_competence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_resultado_intencion_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_resultado_intencion_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_resultado_intencion_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_resultado_intencion_aggregated_to_week"], "alias": "int_resultado_intencion_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "1502ce7934198f454b533cc08b6bfa088fb5d0a090608e259ed8264f859def45"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.5746894, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_resultado_intencion_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith resultado_intencion as(\r\n\r\n    select \r\n    cart.hh_cd,\r\n    result_int.resultado_intencion_tel,\r\n    result_int.resultado_intencion_int,\r\n    result_int.resultado_intencion_tv,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__resultado_intencion')}} as result_int on cart.hh_cd=result_int.hh_cd and cart.fecha_inicio_semana = result_int.fecha_inicio_semana\r\n    group by     cart.hh_cd,\r\n    result_int.resultado_intencion_tel,\r\n    result_int.resultado_intencion_int,\r\n    result_int.resultado_intencion_tv,\r\n    cart.fecha_inicio_semana,\r\n    cart.fecha_final_semana\r\n\r\n),\r\n\r\nclasificacion_categoricas as (\r\n    select \r\n    hh_cd,\r\n    fecha_inicio_semana, \r\n    fecha_final_semana,\r\n    case when resultado_intencion_int in ('Cancelacion por usuario') then resultado_intencion_int else 'resto_resultado_intencion_int' end as resultado_intencion_int,\r\n    case when resultado_intencion_tv in ('Cancelacion por usuario') then resultado_intencion_tv else 'resto_resultado_intencion_tv' end as resultado_intencion_tv,\r\n    case when resultado_intencion_tel in ('Cambio de plan') then resultado_intencion_tel else 'resto_resultado_intencion_tel' end as resultado_intencion_tel,\r\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha_inicio_semana desc) as rn\r\n    from resultado_intencion\r\n),\r\n\r\nultimos as (\r\n    select * \r\n    from clasificacion_categoricas\r\n    where rn = 1\r\n)\r\n\r\nselect \r\nts_resultado_intencion.hh_cd,\r\nmax(ultimos.resultado_intencion_int) as max_resultado_intencion_int,\r\nmax(ultimos.resultado_intencion_tv) as max_resultado_intencion_tv,\r\nmax(ultimos.resultado_intencion_tel) as max_resultado_intencion_tel,\r\nts_resultado_intencion.fecha_inicio_semana, \r\nts_resultado_intencion.fecha_final_semana,\r\n{{ partition('ts_resultado_intencion.fecha_inicio_semana')}}\r\nfrom resultado_intencion as ts_resultado_intencion\r\nleft join ultimos on ts_resultado_intencion.hh_cd = ultimos.hh_cd and ts_resultado_intencion.fecha_inicio_semana = ultimos.fecha_inicio_semana \r\nWHERE {{ run_mode('ts_resultado_intencion.fecha_inicio_semana', var(\"modo\")) }}\r\n\r\ngroup by ts_resultado_intencion.hh_cd, ts_resultado_intencion.fecha_inicio_semana, ts_resultado_intencion.fecha_final_semana", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__resultado_intencion", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__resultado_intencion"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_retenciones_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate\\int_retenciones_aggregated_to_week.sql", "original_file_path": "models\\intermediate\\int_retenciones_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_retenciones_aggregated_to_week"], "alias": "int_retenciones_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "e9af91fb52b9a59988c2feef2370dbe2b8b7ff47093a315db0dc0fccf333d448"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.5958338, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_intermediate\".\"int_retenciones_aggregated_to_week\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_tipo as (\r\nSELECT\r\n    cart.hh_cd,\r\n    cart.fecha_inicio_semana, \r\n    cart.fecha_final_semana,\r\n    DATE_DIFF('second', mot.DT_INL_PCS_RTN, mot.DT_END_PCS_RTN) AS DT_PCS_RTN_DIF_SECONDS,\r\n    mot.TP_CLNT,\r\n    CASE WHEN mot.DSC_ST_PCS_RTN = 'Finalizado' THEN 1 ELSE 0 END AS DSC_ST_PCS_RTN_Finalizado,\r\n    CASE WHEN mot.DSC_ST_PCS_RTN = 'Working' THEN 1 ELSE 0 END AS DSC_ST_PCS_RTN_Working,\r\n    CASE WHEN mot.DESC_SEGMENTATION = 'CD' THEN 1 ELSE 0 END AS DESC_SEGMENTATION_CD,\r\n    CASE WHEN mot.DESC_SEGMENTATION = 'D' THEN 1 ELSE 0 END AS DESC_SEGMENTATION_D,\r\n    CASE WHEN mot.DESC_SEGMENTATION = 'ABCPLUS' THEN 1 ELSE 0 END AS DESC_SEGMENTATION_ABCPLUS,\r\n    CASE WHEN mot.DESC_SEGMENTATION = 'Resto' THEN 1 ELSE 0 END AS DESC_SEGMENTATION_Resto,\r\n    CASE WHEN mot.RSLT_RTN = 'Retenido' THEN 1 ELSE 0 END AS RSLT_RTN_Retenido,\r\n    CASE WHEN mot.RSLT_RTN = 'No Retenido' THEN 1 ELSE 0 END AS RSLT_RTN_No_Retenido,\r\n    CASE WHEN mot.RSLT_RTN = 'No aplica' THEN 1 ELSE 0 END AS RSLT_RTN_No_aplica,\r\n    CASE WHEN mot.RSLT_RTN = 'Efectivo' THEN 1 ELSE 0 END AS RSLT_RTN_Efectivo,\r\n    CASE WHEN mot.RSLT_RTN = 'No localizado' THEN 1 ELSE 0 END AS RSLT_RTN_No_localizado,\r\n    CASE WHEN mot.RSLT_RTN = 'Resto' THEN 1 ELSE 0 END AS RSLT_RTN_Resto,\r\n    CASE WHEN mot.RSN_RTN = 'Econ\u00f3micas' THEN 1 ELSE 0 END AS RSN_RTN_Economicas,\r\n    CASE WHEN mot.RSN_RTN = 'Comercial' THEN 1 ELSE 0 END AS RSN_RTN_Comercial,\r\n    CASE WHEN mot.RSN_RTN = 'Insatisfacci\u00f3n' THEN 1 ELSE 0 END AS RSN_RTN_Insatisfaccion,\r\n    CASE WHEN mot.RSN_RTN = 'Proyecto Correctivo' THEN 1 ELSE 0 END AS RSN_RTN_Proyecto_Correctivo,\r\n    CASE WHEN mot.RSN_RTN = 'Personales' THEN 1 ELSE 0 END AS RSN_RTN_Personales,\r\n    CASE WHEN mot.RSN_RTN = 'Competencia' THEN 1 ELSE 0 END AS RSN_RTN_Competencia,\r\n    CASE WHEN mot.RSN_RTN = 'Casa vac\u00eda' THEN 1 ELSE 0 END AS RSN_RTN_Casa_vacia,\r\n    CASE WHEN mot.RSN_RTN = 'Resto' THEN 1 ELSE 0 END AS RSN_RTN_Resto,\r\n    CASE WHEN mot.TP_RTN = 'Reactiva' THEN 1 ELSE 0 END AS TP_RTN_Reactiva,\r\n    CASE WHEN mot.TP_RTN = 'Proactiva' THEN 1 ELSE 0 END AS TP_RTN_Proactiva,\r\n    CASE WHEN mot.TP_RTN = 'Traslado' THEN 1 ELSE 0 END AS TP_RTN_Traslado,\r\n    CASE WHEN mot.TP_RTN = 'Premium' THEN 1 ELSE 0 END AS TP_RTN_Premium,\r\n    CASE WHEN mot.TP_RTN = 'Resto' THEN 1 ELSE 0 END AS TP_RTN_Resto\r\n\r\n\r\n    from {{ref('stg_360_staging__cartera_detallada')}} as cart left join {{ref('stg_smy_pa__retenciones')}} as mot on cart.hh_cd = CAST(mot.hh_cd AS VARCHAR) and cart.fecha_inicio_semana = mot.fecha_inicio_semana\r\n)\r\n\r\nselect\r\nhh_cd,\r\nTP_CLNT,\r\nfecha_final_semana,\r\nfecha_inicio_semana, \r\nmax(DSC_ST_PCS_RTN_Finalizado) as DSC_ST_PCS_RTN_Finalizado,\r\nmax(DSC_ST_PCS_RTN_Working) as DSC_ST_PCS_RTN_Working,\r\nMax(DT_PCS_RTN_DIF_SECONDS) as max_DT_PCS_RTN_DIF_SECONDS,\r\navg(DT_PCS_RTN_DIF_SECONDS) as avg_DT_PCS_RTN_DIF_SECONDS,\r\nmax(DESC_SEGMENTATION_CD) AS DESC_SEGMENTATION_CD,\r\nmax(DESC_SEGMENTATION_D) AS DESC_SEGMENTATION_D,\r\nmax(DESC_SEGMENTATION_ABCPLUS) AS DESC_SEGMENTATION_ABCPLUS,\r\nmax(DESC_SEGMENTATION_Resto) AS DESC_SEGMENTATION_Resto,\r\nmax(RSLT_RTN_Retenido) AS RSLT_RTN_Retenido,\r\nmax(RSLT_RTN_No_Retenido) AS RSLT_RTN_No_Retenido,\r\nmax(RSLT_RTN_No_aplica) AS RSLT_RTN_No_aplica,\r\nmax(RSLT_RTN_Efectivo) AS RSLT_RTN_Efectivo,\r\nmax(RSLT_RTN_No_localizado) AS RSLT_RTN_No_localizado,\r\nmax(RSLT_RTN_Resto) AS RSLT_RTN_Resto,\r\nmax(RSN_RTN_Economicas) AS RSN_RTN_Economicas,\r\nmax(RSN_RTN_Comercial) AS RSN_RTN_Comercial,\r\nmax(RSN_RTN_Insatisfaccion) AS RSN_RTN_Insatisfaccion,\r\nmax(RSN_RTN_Proyecto_Correctivo) AS RSN_RTN_Proyecto_Correctivo,\r\nmax(RSN_RTN_Personales) AS RSN_RTN_Personales,\r\nmax(RSN_RTN_Competencia) AS RSN_RTN_Competencia,\r\nmax(RSN_RTN_Casa_vacia) AS RSN_RTN_Casa_vacia,\r\nmax(RSN_RTN_Resto) AS RSN_RTN_Resto,\r\nmax(TP_RTN_Reactiva) AS TP_RTN_Reactiva,\r\nmax(TP_RTN_Proactiva) AS TP_RTN_Proactiva,\r\nmax(TP_RTN_Traslado) AS TP_RTN_Traslado,\r\nmax(TP_RTN_Premium) AS TP_RTN_Premium,\r\nmax(TP_RTN_Resto) AS TP_RTN_Resto,\r\n{{ partition('fecha_inicio_semana')}}\r\nfrom clasificacion_tipo\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\r\ngroup by hh_cd,\r\nfecha_inicio_semana, \r\nfecha_final_semana,\r\nTP_CLNT", "language": "sql", "refs": [{"name": "stg_360_staging__cartera_detallada", "package": null, "version": null}, {"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg__intenciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg__intenciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\stg__intenciones.sql", "original_file_path": "models\\staging\\stg__intenciones.sql", "unique_id": "model.VoluntaryChurnABT.stg__intenciones", "fqn": ["VoluntaryChurnABT", "staging", "stg__intenciones"], "alias": "stg__intenciones", "checksum": {"name": "sha256", "checksum": "4dda177c07cb170b7c014078d58f3a04fa2a96f7991a01052ffc7bc68b174f2a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_ini_pcs": {"name": "dt_ini_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ctrtd_fm": {"name": "ctrtd_fm", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ctrtd_to": {"name": "ctrtd_to", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_pd": {"name": "id_pd", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_tp_clnt": {"name": "id_tp_clnt", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dt_load": {"name": "dt_load", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.3596377, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg__intenciones\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH intenciones AS (\r\n\r\n    SELECT * from {{ref('stg_smy_pa__trgt_cancelaciones')}}\r\n\r\n    )\r\n\r\n    SELECT \r\n    *, \r\n    {{ partition('fecha_inicio_semana') }}\r\n    FROM intenciones\r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__trgt_cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__trgt_cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_360_staging__antiguedad_cuenta": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_staging__antiguedad_cuenta", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\360_staging\\stg_360_staging__antiguedad_cuenta.sql", "original_file_path": "models\\staging\\360_staging\\stg_360_staging__antiguedad_cuenta.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_staging__antiguedad_cuenta", "fqn": ["VoluntaryChurnABT", "staging", "360_staging", "stg_360_staging__antiguedad_cuenta"], "alias": "stg_360_staging__antiguedad_cuenta", "checksum": {"name": "sha256", "checksum": "958d76f33636da42ad8275c20d89708c0fcff252cb8600accf99945e25ad47a0"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.6356096, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_360_staging__antiguedad_cuenta\"", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\r\n\r\n   {%- if var('modo')[0] == 'default' -%}\r\n    \r\n    {% set start_date = ((modules.datetime.datetime.today() - modules.datetime.timedelta(days=7)).date()).strftime('%Y-%m-%d') %}\r\n    {% set end_date = (modules.datetime.datetime.today()).strftime('%Y-%m-%d') %}\r\n\r\n{%- elif var('modo')[0] == \"rango\" -%}\r\n    {% set start_date =  var('modo')[1] %}\r\n    {% set end_date = var('modo')[2] %}\r\n\r\n{%- endif -%}\r\n\r\n{% set mondays_list = get_mondays_between_dates(start_date, end_date) %}\r\n{% set cleaned_list = mondays_list.split(\",\") | map('trim') | map('replace', '[', '') | map('replace', ']', '') | list %}\r\n\r\n  with clasificacion as(\r\n    SELECT \r\n      hh_cd,\r\n      st_hh_cd,\r\n      min (ar_actvn_dt) as ar_actvn_dt,\r\n      doc_tp_nm\r\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo\"\r\n    where st_hh_cd = 'ACTIVO'\r\n      and doc_tp_nm = 'CEDULA DE IDENTIDAD'\r\n    group by hh_cd, st_hh_cd, doc_tp_nm\r\n  ),\r\n\r\n clasificacion_conversion AS (\r\n\r\n  {% for monday in cleaned_list %}\r\n  (   \r\n    SELECT \r\n    hh_cd,\r\n    st_hh_cd,\r\n    DATE_DIFF('day', ar_actvn_dt, CAST({{monday}} AS date)) AS ar_actvn_dt,\r\n    CAST({{monday}} AS date) AS monday\r\n    FROM clasificacion\r\n    where st_hh_cd = 'ACTIVO'\r\n    and doc_tp_nm = 'CEDULA DE IDENTIDAD'\r\n)\r\n  {% if not loop.last %}\r\n        union all\r\n  {% endif %}\r\n  {% endfor %}\r\n)\r\nselect\r\n*,\r\n{{ partition('monday') }}\r\nfrom clasificacion_conversion", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_mondays_between_dates", "macro.VoluntaryChurnABT.partition"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_staging__cartera_detallada", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\360_staging\\stg_360_staging__cartera_detallada.sql", "original_file_path": "models\\staging\\360_staging\\stg_360_staging__cartera_detallada.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "fqn": ["VoluntaryChurnABT", "staging", "360_staging", "stg_360_staging__cartera_detallada"], "alias": "stg_360_staging__cartera_detallada", "checksum": {"name": "sha256", "checksum": "e222b9e624e69a19400467e459750602d84e553c615a20e982f5372390dccc5d"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.673903, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_360_staging__cartera_detallada\"", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n  SELECT DISTINCT \r\n  hh_cd,\r\n  st_hh_cd,\r\n  doc_tp_nm,\r\n  ntw_tchnlgy,\r\n  date_trunc('week', date_parse(CAST(day AS VARCHAR), '%Y%m%d') ) AS fecha_inicio_semana,\r\n  date_add('day', 6, date_trunc('week', date_parse(CAST(day AS VARCHAR), '%Y%m%d') )) as fecha_final_semana\r\n  FROM prod_staging.fact_cartera_detallada_fijo\r\n  where st_hh_cd = 'ACTIVO'\r\n  and hh_cd is not null\r\n)\r\nselect\r\n*,\r\n{{ partition('fecha_inicio_semana') }}\r\nfrom clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_360_staging__descuentos": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_staging__descuentos", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\360_staging\\stg_360_staging__descuentos.sql", "original_file_path": "models\\staging\\360_staging\\stg_360_staging__descuentos.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_staging__descuentos", "fqn": ["VoluntaryChurnABT", "staging", "360_staging", "stg_360_staging__descuentos"], "alias": "stg_360_staging__descuentos", "checksum": {"name": "sha256", "checksum": "4b193b66beb07180090a91a54c9ffbc8dc4072234a12af3fa727e3b4a7a5420f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.6918607, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_360_staging__descuentos\"", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n  SELECT DISTINCT \r\n  st_hh_cd,\r\n  date_trunc('week', date_parse(CAST(day AS VARCHAR), '%Y%m%d') ) AS fecha_inicio_semana,\r\n  date_add('day', 6, date_trunc('week', date_parse(CAST(day AS VARCHAR), '%Y%m%d') )) as fecha_final_semana,  \r\n  dcmnt_tp_cd,\r\n  unq_id_src_stm,\r\n  hh_cd\r\n  FROM prod_staging.fact_cartera_detallada_fijo\r\n  where st_hh_cd = 'ACTIVO'\r\n)\r\nselect\r\n*,\r\n{{ partition('fecha_inicio_semana') }}\r\nfrom clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_360_staging__dim_producto": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_staging__dim_producto", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\360_staging\\stg_360_staging__dim_producto.sql", "original_file_path": "models\\staging\\360_staging\\stg_360_staging__dim_producto.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_staging__dim_producto", "fqn": ["VoluntaryChurnABT", "staging", "360_staging", "stg_360_staging__dim_producto"], "alias": "stg_360_staging__dim_producto", "checksum": {"name": "sha256", "checksum": "d81f355a333effbb4bf3bcb9040e964f78680bed7aebe2b4be0eeabc2db1e9ff"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental"}, "created_at": 1694547878.7119775, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_360_staging__dim_producto\"", "raw_code": "{{ config(materialized='incremental') }}\r\n\r\n\r\nWITH clasificacion_conversion AS (   \r\n  SELECT   \r\n  pd_lng_nm,\r\n  pd_ln_nm,\r\n  end_dt,\r\n  eff_dt,\r\n  unq_id_src_stm\r\n  FROM prod_staging.dim_producto\r\n)\r\n\r\n\r\nselect\r\n*\r\nfrom clasificacion_conversion\r\nWHERE (pd_lng_nm LIKE '%TV%' OR pd_lng_nm LIKE '%TELEV%')\r\n        OR (pd_lng_nm LIKE '%TEL%' OR pd_lng_nm LIKE '%/TEL%' OR pd_lng_nm LIKE '%CABLEPHONE%')\r\n        OR pd_lng_nm LIKE '%INT%'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_360_staging__facturas": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_staging__facturas", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\360_staging\\stg_360_staging__facturas.sql", "original_file_path": "models\\staging\\360_staging\\stg_360_staging__facturas.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_staging__facturas", "fqn": ["VoluntaryChurnABT", "staging", "360_staging", "stg_360_staging__facturas"], "alias": "stg_360_staging__facturas", "checksum": {"name": "sha256", "checksum": "582d9f42d907d0cdda7ef2f3a2e5d32fdf9c50664c93c963ac1253e43bc14d71"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inv_prd_eff_dt": {"name": "inv_prd_eff_dt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ttl": {"name": "ttl", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "srl_nmbr": {"name": "srl_nmbr", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "es_factura": {"name": "es_factura", "description": "Booleano si srl_nmbr contiene 'FAC-%'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.3478525, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_360_staging__facturas\"", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\r\n\r\nwith clasificacion_conversion as (\r\n    SELECT DISTINCT\r\n    bill_ar_cd as hh_cd,\r\n    inv_prd_eff_dt,\r\n    ttl,\r\n    srl_nmbr,\r\n    case when srl_nmbr like 'FAC-%' then 1 else 0 end es_factura,\r\n    date_trunc('week', date_parse(CAST(day AS VARCHAR), '%Y%m%d') ) AS fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(CAST(day AS VARCHAR), '%Y%m%d') )) as fecha_final_semana \r\n    FROM prod_staging.fact_factura_fijo\r\n    where inv_prd_eff_dt >= date('2023-01-01')\r\n    and inv_prd_eff_dt <= CURRENT_DATE\r\n)\r\n\r\nselect\r\n*,\r\n{{ partition('fecha_inicio_semana') }}\r\nfrom clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_dtl_pa__bandwith": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_dtl_pa__bandwith", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\dtl_pa\\stg_dtl_pa__bandwith.sql", "original_file_path": "models\\staging\\dtl_pa\\stg_dtl_pa__bandwith.sql", "unique_id": "model.VoluntaryChurnABT.stg_dtl_pa__bandwith", "fqn": ["VoluntaryChurnABT", "staging", "dtl_pa", "stg_dtl_pa__bandwith"], "alias": "stg_dtl_pa__bandwith", "checksum": {"name": "sha256", "checksum": "3c9c3a2066fbcb15782c2e24ca53c6d5a1d785d5f196d84f6dc83dffd5f0cd62"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.7402565, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_dtl_pa__bandwith\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH ntt AS (\r\n    SELECT\r\n    BANDWDTH,\r\n    bandwdth_key,\r\n    BANDWDTH_NM,\r\n    BANDWDTH_TR,\r\n    date_trunc('week', date_parse(ppn_dt, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(ppn_dt, '%Y%m%d'))) as fecha_final_semana\r\n    FROM  prod_raw_dwh_dtl_pa.BANDWDTH_DIM\r\n    \r\n)\r\n\r\nSELECT\r\n*, {{ partition('fecha_inicio_semana') }}\r\nFROM ntt\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_dtl_pa__nodos": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_dtl_pa__nodos", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\dtl_pa\\stg_dtl_pa__nodos.sql", "original_file_path": "models\\staging\\dtl_pa\\stg_dtl_pa__nodos.sql", "unique_id": "model.VoluntaryChurnABT.stg_dtl_pa__nodos", "fqn": ["VoluntaryChurnABT", "staging", "dtl_pa", "stg_dtl_pa__nodos"], "alias": "stg_dtl_pa__nodos", "checksum": {"name": "sha256", "checksum": "4786b9cce9796d968bcf0c5744a43cd770bf71fa4caa800579522d3fb769ff3e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nodo": {"name": "nodo", "description": "Maximo de NTW_CMPT_NM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "es_gold": {"name": "es_gold", "description": "Si nodo contiene '%GOLD%'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.3530834, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_dtl_pa__nodos\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH nodos_cuenta_dia as (\r\n    SELECT DISTINCT\r\n    ARTF.HH_CD,\r\n    ARTF.BANDWDTH_key,\r\n\tNTWD.NTW_CMPT_NM,\r\n    date_parse(NTWD.ppn_dt,'%Y%m%d') fecha\r\n    FROM PROD_RAW_DWH_DTL_PA.AR_TRCKNG_FCT ARTF\r\n\tLEFT JOIN PROD_RAW_DWH_DTL.SRC_STM_DIM SRCD ON SRCD.SRC_STM_KEY = ARTF.SRC_STM_KEY                                              \r\n\tLEFT JOIN PROD_RAW_DWH_DTL_PA.NTW_CMPT_DIM NTWD ON NTWD.NTW_CMPT_KEY = ARTF.NTW_CMPT_KEY\r\n    WHERE \r\n        ARTF.HH_CD IS NOT NULL\r\n        AND NTWD.NTW_CMPT_NM != 'NOT APPLICABLE'\r\n        AND SRCD.end_dt > SRCD.eff_dt\r\n        AND NTWD.end_dt > NTWD.eff_dt\r\n        AND ARTF.SRC_STM_KEY =12\r\n        AND ARTF.BANDWDTH_KEY <>-2\r\n        AND date_parse(NTWD.ppn_dt,'%Y%m%d')  <= date_trunc('week', CURRENT_DATE)\r\n        ),\r\n\r\nclasificacion_semanal AS (\r\n    SELECT \r\n    hh_cd,\r\n    max(BANDWDTH_key) as BANDWDTH_key,\r\n    date_trunc('week', fecha) AS fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', fecha)) AS fecha_final_semana,\r\n    MAX(NTW_CMPT_NM) AS nodo\r\n    FROM nodos_cuenta_dia\r\n    group by hh_cd, date_trunc('week', fecha), date_add('day', 6, date_trunc('week', fecha))\r\n)\r\n\r\nSELECT \r\n*,\r\n\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_semanal\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__antiguedad_ultimo_ctt": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__antiguedad_ultimo_ctt", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__antiguedad_ultimo_ctt.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__antiguedad_ultimo_ctt.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__antiguedad_ultimo_ctt", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__antiguedad_ultimo_ctt"], "alias": "stg_smy_pa__antiguedad_ultimo_ctt", "checksum": {"name": "sha256", "checksum": "5b4a24306425afe888744b8960ca988527b787697367d24fe98f87ebfba4a3a8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.7696097, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__antiguedad_ultimo_ctt\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n{% set start_date = '2023-01-01' %}\r\n{% set end_date = '2023-06-15' %}\r\n\r\n{%- if var('modo')[0] == 'default' -%}\r\n    \r\n    {% set start_date = ((modules.datetime.datetime.today() - modules.datetime.timedelta(days=7)).date()).strftime('%Y-%m-%d') %}\r\n    {% set end_date = (modules.datetime.datetime.today()).strftime('%Y-%m-%d') %}\r\n\r\n{%- elif var('modo')[0] == \"rango\" -%}\r\n    {% set start_date =  var('modo')[1] %}\r\n    {% set end_date = var('modo')[2] %}\r\n\r\n{%- endif -%}\r\n\r\n{% set mondays_list = get_mondays_between_dates(start_date, end_date) %}\r\n{% set cleaned_list = mondays_list.split(\",\") | map('trim') | map('replace', '[', '') | map('replace', ']', '') | list %}\r\n\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n  {% for monday in cleaned_list %}\r\n  (   \r\n    SELECT \r\n      id_ac AS hh_cd,\r\n      line_bsn,\r\n      min(dt_inl_inta) as fecha_ctt,\r\n      CAST({{monday}} AS date) AS monday,\r\n      \r\n        CASE\r\n          WHEN line_bsn = 'Televisi\u00f3n' THEN date_diff('day', min(dt_inl_inta), CAST({{monday}} AS date))\r\n        END AS antiguedad_ultimo_CTT_TV,\r\n   \r\n        CASE\r\n          WHEN line_bsn = 'Internet' THEN date_diff('day', min(dt_inl_inta), CAST({{monday}} AS date))\r\n        END AS antiguedad_ultimo_CTT_INT,\r\n \r\n        CASE\r\n          WHEN line_bsn IN (\r\n            'Cablephone',\r\n            'Telecarrier plans - telephony',\r\n            'Telecarrier plans - simple products'\r\n          ) THEN date_diff('day', min(dt_inl_inta), CAST({{monday}} AS date))\r\n        END AS antiguedad_ultimo_CTT_TEL\r\n    FROM prod_raw_dwh_smy_pa.cstmr_360_ev_multioprg_fct\r\n    WHERE code_cgy_pcs = 1804 AND dt_inl_inta < CAST({{monday}} AS date) AND dt_inl_inta >= date_add('day',-6, CAST({{monday}} AS date))\r\n    GROUP BY id_ac, line_bsn, dt_inl_inta, CAST({{monday}} AS date)\r\n    )\r\n  {% if not loop.last %}\r\n        union all\r\n  {% endif %}\r\n  {% endfor %}\r\n)\r\n\r\nSELECT *,\r\n{{ partition('monday')}}\r\nFROM clasificacion_conversion", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_mondays_between_dates", "macro.VoluntaryChurnABT.partition"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__cancelaciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__cancelaciones.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__cancelaciones.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__cancelaciones"], "alias": "stg_smy_pa__cancelaciones", "checksum": {"name": "sha256", "checksum": "255e0d5d708860f6faddef31a71a11af9997368a41e6ea3539052827ffc56ad6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_ini_pcs": {"name": "dt_ini_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ctrtd_fm": {"name": "ctrtd_fm", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ctrtd_to": {"name": "ctrtd_to", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_pd": {"name": "id_pd", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_tp_clnt": {"name": "id_tp_clnt", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dt_load": {"name": "dt_load", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_pcs": {"name": "id_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.3255742, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__cancelaciones\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH cancelaciones AS (\r\n    SELECT\r\n    hh_cd,\r\n    hh_node,\r\n    ACTN_CNCL,\r\n    ST_PCS_CNL,\r\n    TP_CLNT,\r\n    TP_CNCL,\r\n    CGY_CNCL,\r\n    CMNT,\r\n    DESC_SEGMENTATION,\r\n    DSC_PCS_CNL,\r\n    DT_END_PCS_CNL,\r\n    DT_INL_PCS_CNL,\r\n    FLAG_CNCL,\r\n    LN_BSN,\r\n    MTV_CNCL,\r\n    PD_NM,\r\n    RSLT_RTN,\r\n    RSN_CNCL,\r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n    FROM  prod_raw_dwh_smy_pa.cstmr_360_cnl_fix_dm\r\n    \r\n)\r\n\r\nSELECT\r\n*, {{ partition('fecha_inicio_semana') }}\r\nFROM cancelaciones\r\nWHERE TP_CLNT ='Residencial' \r\nAND LN_BSN <>'0' \r\nAND ST_PCS_CNL<>'A'  \r\nAND TP_CNCL <> 'Traslado' \r\nAND {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__churn_node": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__churn_node", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__churn_node.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__churn_node.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__churn_node", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__churn_node"], "alias": "stg_smy_pa__churn_node", "checksum": {"name": "sha256", "checksum": "d41fc7a975f0a8a535cd6cd3348bc997c240d29462d1486617d58edfcc255187"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.8156085, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__churn_node\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH ntt AS (\r\n    SELECT\r\n    NM_PROV,\r\n    CAST(ARPU_OPENING AS DOUBLE) AS ARPU_OPENING,\r\n    CAST(CNCLS AS DOUBLE) AS CNCLS,\r\n    CAST(CNCLS_MTD AS DOUBLE) AS CNCLS_MTD,\r\n    CAST(CM_AFFCTTD AS DOUBLE) AS CM_AFFCTTD,\r\n    CAST(DCCTNS_VLNTRS AS DOUBLE) AS DCCTNS_VLNTRS,\r\n    CAST(DTRCTR_SPRT AS DOUBLE) AS DTRCTR_SPRT,\r\n    CAST(DTRCTR_USE AS DOUBLE) AS DTRCTR_USE,\r\n    CAST(HHCC_CLS AS DOUBLE) AS HHCC_CLS,\r\n    CAST(HHCC_OPENING AS DOUBLE) AS HHCC_OPENING,\r\n    CAST(HRS_AFFCTTN AS DOUBLE) AS HRS_AFFCTTN,\r\n    CAST(INGRSS_OPENING AS DOUBLE) AS INGRSS_OPENING,\r\n    CAST(INTNS AS DOUBLE) AS INTNS,\r\n    CAST(INTNS_MTD AS DOUBLE) AS INTNS_MTD,\r\n    CAST(PRMTR_SPRT AS DOUBLE) AS PRMTR_SPRT,\r\n    CAST(PRMTR_USE AS DOUBLE) AS PRMTR_USE,\r\n    CAST(RTNTS AS DOUBLE) AS RTNTS,\r\n    CAST(RTNTS_MTD AS DOUBLE) AS RTNTS_MTD,\r\n    CAST(TMS_UNAVL AS DOUBLE) AS TMS_UNAVL,\r\n    NODE,\r\n    \r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n    FROM  prod_raw_dwh_smy_pa.CSTMR_360_CHURNODE_FIX_DM\r\n    \r\n)\r\n\r\nSELECT\r\n*, {{ partition('fecha_inicio_semana') }}\r\nFROM ntt\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__consumos": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__consumos", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__consumos.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__consumos.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__consumos", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__consumos"], "alias": "stg_smy_pa__consumos", "checksum": {"name": "sha256", "checksum": "d316e80d44f9fd112b448d0dfe6234409a311278d91a4c64d1447a757a9fd385"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfc_dwld": {"name": "trfc_dwld", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trfc_upld": {"name": "trfc_upld", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.332672, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__consumos\"", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\r\n\r\nwith clasificacion_conversion as (\r\n    select\r\n    id_ac as hh_cd,\r\n    cast(split(trfc_dwld, ' ')[1] as double) as trfc_dwld,\r\n    cast(split(trfc_upld, ' ')[1] as double) as trfc_upld,\r\n    date_trunc('week', date_parse(dt_load, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_load, '%Y%m%d'))) as fecha_final_semana\r\n    FROM prod_raw_dwh_smy_pa.cstmr_360_data_fix_fct \r\n    where id_ac is not null\r\n)\r\n\r\nselect\r\n*,\r\n{{ partition('fecha_inicio_semana') }}\r\nfrom clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__ctt": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__ctt", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__ctt.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__ctt.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__ctt", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__ctt"], "alias": "stg_smy_pa__ctt", "checksum": {"name": "sha256", "checksum": "9de0eb640f42c85bc85375ce2f622bc08c93429288372d78bda31b3b79760c0c"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.849776, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__ctt\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH clasificacion_conversion AS (\r\nSELECT id_ac AS hh_cd,\r\n    date_trunc('week', dt_inl_inta) as fecha_inicio_semana,\r\n\tdate_add('day', 6, date_trunc('week', dt_inl_inta)) as fecha_final_semana,\r\n\tCOUNT(*) AS ctt\r\nFROM prod_raw_dwh_smy_pa.cstmr_360_ev_multioprg_fct\r\nWHERE code_cgy_pcs = 1804\r\nGROUP BY id_ac, dt_inl_inta\r\n)\r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__ctt_fix": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__ctt_fix", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__ctt_fix.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__ctt_fix.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__ctt_fix", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__ctt_fix"], "alias": "stg_smy_pa__ctt_fix", "checksum": {"name": "sha256", "checksum": "3321e8636574f694be304b171e4cf4d1c00ecdd6ad871c831a76136f6988fefc"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.8651938, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__ctt_fix\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n    SELECT \r\n      hh_cd,\r\n      DSC_ST_PCS_CTT,\r\n      DT_INL_PCS_CTT,\r\n      DT_END_PCS_CTT,\r\n      DRTN_PCS_CTT,\r\n      DSC_PD,\r\n      LINE_BSN,\r\n      CNL_SALE,\r\n      DESC_SEGMENTATION,\r\n      TP_CLNT,\r\n      DSC_SEG,\r\n      RSN_OPN_CTT,\r\n      RSN_CLS_CTT,\r\n      NODE_CTT,\r\n      USR_RSPL_CTT,\r\n      TP_ORDR_CTT,\r\n      date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) AS fecha_inicio_semana,\r\n      date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n    from  prod_raw_dwh_smy_pa.CSTMR_360_CTT_FIX_DM \r\n \r\n\r\n    )\r\n \r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__ctt_producto": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__ctt_producto", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__ctt_producto.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__ctt_producto.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__ctt_producto", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__ctt_producto"], "alias": "stg_smy_pa__ctt_producto", "checksum": {"name": "sha256", "checksum": "78ac6d2de4cce1982b79ef809af29b0383b806aad7281ff37608910f3fee3bae"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.882742, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__ctt_producto\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH clasificacion_conversion AS (\r\nSELECT\r\n  id_ac hh_cd,\r\n  date_trunc('week', dt_inl_inta) as fecha_inicio_semana,\r\n  date_add('day', 6, date_trunc('week', dt_inl_inta)) as fecha_final_semana,\r\n  SUM(CASE WHEN line_bsn = 'Cablephone' THEN 1\r\n           WHEN line_bsn = 'Telecarrier plans - telephony' THEN 1\r\n           WHEN line_bsn = 'Telecarrier plans - simple products' THEN 1\r\n           ELSE 0 END) AS CTT_producto_TEL,\r\n  SUM(CASE WHEN line_bsn = 'Internet' THEN 1 ELSE 0 END) AS CTT_producto_INT,\r\n  SUM(CASE WHEN line_bsn = 'Televisi\u00f3n' THEN 1\r\n           WHEN line_bsn = 'Cable TV' THEN 1\r\n           ELSE 0 END) AS CTT_producto_TV\r\nFROM prod_raw_dwh_smy_pa.cstmr_360_ev_multioprg_fct\r\nWHERE code_cgy_pcs = 1804\r\nGROUP BY id_ac, dt_inl_inta\r\n)\r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__customer_consults": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__customer_consults", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__customer_consults.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__customer_consults.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__customer_consults", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__customer_consults"], "alias": "stg_smy_pa__customer_consults", "checksum": {"name": "sha256", "checksum": "204a1f256dc1e6ec94ac878350a9ebb1900d2b482abc8e42e720ea554629da3e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.8997653, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__customer_consults\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n  SELECT \r\n  hh_cd, \r\n  CNL_SALE,   \r\n  DEPT_TO_SCL,\r\n  DESC_SEGMENTATION,\r\n  DRTN_PCS_CO,\r\n  DSC_SEG,\r\n  DSC_ST_PCS_CO,\r\n  DT_END_PCS_CO,\r\n  DT_INL_PCS_CO,\r\n  DTL_CNSLT,\r\n  MTH_CTC,\r\n  RSN_CNSLT,\r\n  TP_CLNT,\r\n  TP_CNL,\r\n  TP_CNSLT,\r\n  date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) AS fecha_inicio_semana,\r\n  date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n  FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_con_fix_dm\"\r\n  \r\n\r\n    )\r\n \r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__intencion_producto": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__intencion_producto", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__intencion_producto.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__intencion_producto.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__intencion_producto", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__intencion_producto"], "alias": "stg_smy_pa__intencion_producto", "checksum": {"name": "sha256", "checksum": "7f3142052134dd6dfaa7dcd108b91217044af599273f5dec772fe9831434ad80"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.9132202, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__intencion_producto\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH resultado_intencion AS (\r\n  SELECT\r\n    hh_cd,\r\n    fecha_inicio_semana,\r\n    fecha_final_semana,\r\n    SUM(CASE WHEN mapped_line_bsn = 'INT' THEN 1 ELSE 0 END) AS Intencion_producto_INT,\r\n    SUM(CASE WHEN mapped_line_bsn = 'TV' THEN 1 ELSE 0 END) AS Intencion_producto_TV,\r\n    SUM(CASE WHEN mapped_line_bsn = 'TEL' THEN 1 ELSE 0 END) AS Intencion_producto_TEL\r\n  FROM (\r\n    SELECT\r\n      id_ac hh_cd,\r\n      date_trunc('week', dt_inl_inta) as fecha_inicio_semana,\r\n      date_add('day', 6, date_trunc('week', dt_inl_inta)) as fecha_final_semana,\r\n      CASE line_bsn\r\n        WHEN 'Televisi\u00f3n' THEN 'TV'\r\n        WHEN 'Internet' THEN 'INT'\r\n        WHEN 'Cablephone' THEN 'TEL'\r\n        WHEN 'Telecarrier plans - telephony' THEN 'TEL'\r\n        WHEN 'Ethernet' THEN 'INT'\r\n        WHEN 'Cable TV' THEN 'TV'\r\n        WHEN 'Telecarrier plans - simple products' THEN 'TEL'\r\n        ELSE NULL\r\n      END AS mapped_line_bsn\r\n    FROM prod_raw_dwh_smy_pa.cstmr_360_ev_multioprg_fct\r\n    WHERE code_cgy_pcs IN (1906, 1900, 1608, 1897)\r\n  ) mapped_data\r\n  GROUP BY hh_cd, fecha_inicio_semana,fecha_final_semana\r\n)\r\nselect\r\n*,  \r\n{{ partition('fecha_inicio_semana')}}\r\nFROM resultado_intencion \r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__morosidad": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__morosidad", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__morosidad.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__morosidad.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__morosidad", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__morosidad"], "alias": "stg_smy_pa__morosidad", "checksum": {"name": "sha256", "checksum": "1517bb46c6f5cf28fda437d70113d226e81c42cd273cb055991aca3c651cb181"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.928326, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__morosidad\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nwith clasificacion_conversion as (\r\n    select\r\n    amt_due,\r\n    unexp_amt,\r\n    cstmr_key,\r\n    at_30_amt,\r\n    at_60_amt,\r\n    at_90_amt,\r\n    at_120_amt,\r\n    at_150_amt,\r\n    at_180_amt,\r\n    at_210_amt,\r\n    at_240_amt,\r\n    at_270_amt,\r\n    at_300_amt,\r\n    at_330_amt,\r\n    at_360_amt,\r\n    date_trunc('week', date_parse(fct_dt, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(fct_dt, '%Y%m%d'))) as fecha_final_semana,\r\n    date_parse(fct_dt, '%Y%m%d') as fecha\r\n    from prod_raw_dwh_smy_pa.cstmr_dbt_fct\r\n)\r\n\r\nselect\r\n*,  \r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__motivo_intencion": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__motivo_intencion", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__motivo_intencion.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__motivo_intencion.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__motivo_intencion", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__motivo_intencion"], "alias": "stg_smy_pa__motivo_intencion", "checksum": {"name": "sha256", "checksum": "b445e6ed7232be3b33235cedbf50abbe084a6b08903f208649a0894a89146858"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.9444473, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__motivo_intencion\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH clasificacion_conversion AS (\r\nSELECT\r\n  hh_cd,\r\n  MAX(CASE WHEN line_bsn = 'Internet' THEN rsn_cncl ELSE NULL END) AS motivo_intencion_INT,\r\n  MAX(CASE WHEN line_bsn = 'Televisi\u00f3n' THEN rsn_cncl ELSE NULL END) AS motivo_intencion_TV,\r\n  MAX(CASE WHEN line_bsn IN ('Cablephone', 'Telecarrier plans - telephony', 'Telecarrier plans - simple products') THEN rsn_cncl ELSE NULL END) AS motivo_intencion_TEL,\r\n  fecha_inicio_semana,\r\n  fecha_final_semana\r\nFROM (\r\n  SELECT\r\n    id_ac hh_cd,\r\n    line_bsn,\r\n    dt_inl_inta,\r\n    rsn_cncl,\r\n    date_trunc('week', dt_inl_inta) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', dt_inl_inta)) as fecha_final_semana,\r\n    ROW_NUMBER() OVER (PARTITION BY id_ac, line_bsn ORDER BY dt_inl_inta DESC, id_pcs_inta DESC) AS row_num\r\n  FROM prod_raw_dwh_smy_pa.cstmr_360_ev_multioprg_fct\r\n  WHERE code_cgy_pcs IN (1906, 1900, 1608, 1897)\r\n) sorted_data\r\nWHERE row_num = 1\r\nGROUP BY hh_cd, fecha_inicio_semana, fecha_final_semana\r\n)\r\nselect\r\n*,  \r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__new_offers": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__new_offers", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__new_offers.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__new_offers.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__new_offers", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__new_offers"], "alias": "stg_smy_pa__new_offers", "checksum": {"name": "sha256", "checksum": "4f9d4cfee5469737342b7a158a640a4bafea87f0e1b5ce6f16d6f6824a55cc92"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.9619615, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__new_offers\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n\r\n  SELECT \r\n    hh_cd,\r\n    CNL,\r\n    NM_OFR,\r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) AS fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana,\r\n    PRC_OFR\r\n    from  prod_raw_dwh_smy_pa.CSTMR_360_OFR_FIX_DM \r\n\r\n\r\n    )\r\n \r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__new_orders": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__new_orders", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__new_orders.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__new_orders.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__new_orders", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__new_orders"], "alias": "stg_smy_pa__new_orders", "checksum": {"name": "sha256", "checksum": "480b8b784890277eefd77e215b11aa0c2d63faa3895904d8b2c9bd77c2b21887"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.9787414, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__new_orders\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n    SELECT \r\n    hh_cd,\r\n    DT_END_ORDR,\r\n    DT_INL_ORDR,\r\n    PD_ADNL,\r\n    PD_ADNL_DSC,\r\n    STE_ORDR,\r\n    TP_ORDR,\r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) AS fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n  \r\n    from  prod_raw_dwh_smy_pa.CSTMR_360_ORD_FIX_DM \r\n    \r\n\r\n    )\r\n \r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\nwHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__ntt": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__ntt", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__ntt.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__ntt.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__ntt", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__ntt"], "alias": "stg_smy_pa__ntt", "checksum": {"name": "sha256", "checksum": "044139ebae90747ff4b1c2677492d3d753520d5bd21efc2eb064e33a39f20458"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547878.995535, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__ntt\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH ntt AS (\r\n    SELECT\r\n    DRTN_PCS_NTT,\r\n    DSC_ST_PCS_NTT,\r\n    DT_END_PCS_NTT,\r\n    DT_INL_PCS_NTT,\r\n    LIST_NODE_NTT,\r\n    SVC_IVL_NTT,\r\n    TP_NTT,\r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n    FROM  prod_raw_dwh_smy_pa.CSTMR_360_NTT_FIX_DM\r\n    \r\n)\r\n\r\nSELECT\r\n*, {{ partition('fecha_inicio_semana') }}\r\nFROM ntt\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__performances": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__performances", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__performances.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__performances.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__performances", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__performances"], "alias": "stg_smy_pa__performances", "checksum": {"name": "sha256", "checksum": "6479909b936cd456280e6b9c7173a2be0fea0034736fe283a1b3142381c08bc7"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"nodes": {"name": "nodes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "descripcion": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim"}, "dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_ucer": {"name": "pct_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pct_npa": {"name": "pct_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "snr_deg": {"name": "snr_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ucer_deg": {"name": "ucer_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "samp": {"name": "samp", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "numr": {"name": "numr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cm_us": {"name": "cm_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_ut_us": {"name": "desc_ut_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_clss_npa": {"name": "desc_clss_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_clss_ucer": {"name": "desc_clss_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "desc_clss_snr": {"name": "desc_clss_snr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.3120494, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__performances\"", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\r\n     \r\nwith clasificacion_conversion as (\r\n    SELECT\r\n    nodes,\r\n    desc_clss_snr,\r\n    desc_clss_ucer,\r\n    desc_clss_npa,\r\n    desc_ut_us,\r\n    cm_us,\r\n    numr,\r\n    samp,\r\n    ucer_deg,\r\n    snr_deg,\r\n    pct_npa,\r\n    pct_ucer,\r\n    date_trunc('week', date_parse(dt_load, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_load, '%Y%m%d'))) as fecha_final_semana\r\n    FROM prod_raw_dwh_smy_pa.cstmr_360_perfhfc_fix_dim\r\n)\r\n\r\nselect\r\n*,\r\n{{ partition('fecha_inicio_semana') }}\r\nfrom clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__products_tigo_vs_competence": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__products_tigo_vs_competence", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__products_tigo_vs_competence.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__products_tigo_vs_competence.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__products_tigo_vs_competence", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__products_tigo_vs_competence"], "alias": "stg_smy_pa__products_tigo_vs_competence", "checksum": {"name": "sha256", "checksum": "202a2a579798dcaf2c30ff9a76b21acf135f96f2329e53e99f8ab732f3b23775"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547879.0267584, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__products_tigo_vs_competence\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\n\r\nWITH clasificacion_conversion AS (\r\n\r\n    SELECT \r\n    hh_cd,\r\n      CAST(BILL_CMPTNC AS DECIMAL) AS BILL_CMPTNC,\r\n      CAST(BILL_TIGO AS DECIMAL) AS BILL_TIGO,\r\n      CAST(DIF_PRC AS DECIMAL) AS DIF_PRC,\r\n      CAST(DIF_SPEED AS DECIMAL) AS DIF_SPEED,\r\n      CAST(LVL_DSFS_PRC AS DECIMAL) AS LVL_DSFS_PRC,\r\n      CAST(LVL_DSFS_SPEED AS DECIMAL) AS LVL_DSFS_SPEED,\r\n      CAST(VLNRBLTY AS DECIMAL) AS VLNRBLTY,\r\n        date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) AS fecha_inicio_semana,\r\n      date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n    from  prod_raw_dwh_smy_pa.cstmr_360_desfc_fix_dm \r\n    )\r\n \r\n\r\nSELECT *,\r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion \r\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__resultado_intencion": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__resultado_intencion", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__resultado_intencion.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__resultado_intencion.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__resultado_intencion", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__resultado_intencion"], "alias": "stg_smy_pa__resultado_intencion", "checksum": {"name": "sha256", "checksum": "9c835fb1ada46c0e6e2f3571efdc3dca58f66021ed81a1b52f599678297d98dd"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547879.0425837, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__resultado_intencion\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH resultado_intencion AS (\r\n  SELECT\r\n    id_ac hh_cd,\r\n    dt_inl_inta,\r\n    CASE line_bsn\r\n      WHEN 'Cablephone' THEN 'TEL'\r\n      WHEN 'Telecarrier plans - telephony' THEN 'TEL'\r\n      WHEN 'Telecarrier plans - simple products' THEN 'TEL'\r\n      WHEN 'Internet' THEN 'INT'\r\n      WHEN 'Televisi\u00f3n' THEN 'TV'\r\n      WHEN 'Cable TV' THEN 'TV'\r\n      ELSE NULL\r\n    END AS mapped_line_bsn,\r\n    date_trunc('week', dt_inl_inta) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', dt_inl_inta)) as fecha_final_semana,\r\n    rsn_cncl AS resultado_intencion,\r\n    ROW_NUMBER() OVER (PARTITION BY id_ac, CASE line_bsn\r\n                                          WHEN 'Cablephone' THEN 'TEL'\r\n                                          WHEN 'Telecarrier plans - telephony' THEN 'TEL'\r\n                                          WHEN 'Telecarrier plans - simple products' THEN 'TEL'\r\n                                          WHEN 'Internet' THEN 'INT'\r\n                                          WHEN 'Televisi\u00f3n' THEN 'TV'\r\n                                          WHEN 'Cable TV' THEN 'TV'\r\n                                          ELSE NULL\r\n                                        END\r\n                       ORDER BY dt_inl_inta DESC, id_pcs_inta DESC) AS row_num\r\n  FROM prod_raw_dwh_smy_pa.cstmr_360_ev_multioprg_fct\r\n),\r\naggregated_resultado_intencion AS (\r\n  SELECT\r\n    hh_cd,\r\n    fecha_inicio_semana,\r\n    fecha_final_semana,\r\n    MAX(CASE WHEN mapped_line_bsn = 'TEL' THEN resultado_intencion ELSE NULL END) AS resultado_intencion_tel,\r\n    MAX(CASE WHEN mapped_line_bsn = 'INT' THEN resultado_intencion ELSE NULL END) AS resultado_intencion_int,\r\n    MAX(CASE WHEN mapped_line_bsn = 'TV' THEN resultado_intencion ELSE NULL END) AS resultado_intencion_tv\r\n  FROM resultado_intencion\r\n  WHERE row_num = 1\r\n  GROUP BY hh_cd, fecha_inicio_semana, fecha_final_semana \r\n),\r\nclasificacion_conversion AS(\r\n  SELECT\r\n  hh_cd,\r\n  resultado_intencion_tel,\r\n  resultado_intencion_int,\r\n  resultado_intencion_tv,\r\n  fecha_inicio_semana,\r\n  fecha_final_semana\r\nFROM aggregated_resultado_intencion\r\n)\r\nselect\r\n*,  \r\n{{ partition('fecha_inicio_semana')}}\r\nFROM clasificacion_conversion\r\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__retenciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__retenciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__retenciones.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__retenciones.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__retenciones"], "alias": "stg_smy_pa__retenciones", "checksum": {"name": "sha256", "checksum": "dfe40dbbe735922e51295c418b940f648391e98ef48c4d19832dc78cc718d2fa"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_ini_pcs": {"name": "dt_ini_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ctrtd_fm": {"name": "ctrtd_fm", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ctrtd_to": {"name": "ctrtd_to", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_pd": {"name": "id_pd", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_tp_clnt": {"name": "id_tp_clnt", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dt_load": {"name": "dt_load", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models\\staging\\staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1694547880.3417559, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_staging\".\"stg_smy_pa__retenciones\"", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\r\n\r\nWITH retenciones AS (\r\n    SELECT\r\n    hh_cd,\r\n    CMNT,\r\n    DESC_SEGMENTATION,\r\n    DRTN_PCS_RTN,\r\n    DSC_SEG,\r\n    DSC_ST_PCS_RTN,\r\n    DT_END_PCS_RTN,\r\n    DT_INL_PCS_RTN,\r\n    RSLT_RTN,\r\n    RSN_RTN,\r\n    TP_CLNT,\r\n    TP_RTN,\r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana\r\n    FROM  prod_raw_dwh_smy_pa.CSTMR_360_RTN_FIX_DM\r\n    \r\n)\r\n\r\nSELECT\r\n*, {{ partition('fecha_inicio_semana') }}\r\nFROM retenciones\r\nWHERE TP_CLNT ='Residencial' \r\nAND {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.stg_smy_pa__trgt_cancelaciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__trgt_cancelaciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging\\smy_pa\\stg_smy_pa__trgt_cancelaciones.sql", "original_file_path": "models\\staging\\smy_pa\\stg_smy_pa__trgt_cancelaciones.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__trgt_cancelaciones", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__trgt_cancelaciones"], "alias": "stg_smy_pa__trgt_cancelaciones", "checksum": {"name": "sha256", "checksum": "1ae972f629595e01ad542466f4c1e5d212e190ff05507544ee9906744ceaaf68"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "ephemeral"}, "created_at": 1694547879.0806935, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\r\n\r\nWITH cancelaciones AS (\r\n    SELECT \r\n    dt_inl_pcs_cnl, \r\n    st_pcs_cnl,\r\n    ln_bsn,\r\n    hh_cd, \r\n    tp_clnt, \r\n    pd_nm,\r\n    dt_pcs, \r\n    rslt_rtn,\r\n    date_trunc('week', date_parse(dt_pcs, '%Y%m%d')) as fecha_inicio_semana,\r\n    date_add('day', 6, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as fecha_final_semana,\r\n    date_add('week', -8, date_trunc('week', date_parse(dt_pcs, '%Y%m%d'))) as cut_date,\r\n    TP_CNCL\r\n    FROM  prod_raw_dwh_smy_pa.cstmr_360_cnl_fix_dm\r\n)\r\n\r\nSELECT\r\n*\r\nFROM cancelaciones\r\nWHERE TP_CLNT ='Residencial' \r\nAND LN_BSN <>'0' \r\nAND ST_PCS_CNL<>'A'  \r\nAND TP_CNCL <> 'Traslado' \r\nAND {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.VoluntaryChurnABT.dbt_results": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_utilities", "name": "dbt_results", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "utilities\\dbt_results.sql", "original_file_path": "models\\utilities\\dbt_results.sql", "unique_id": "model.VoluntaryChurnABT.dbt_results", "fqn": ["VoluntaryChurnABT", "utilities", "dbt_results"], "alias": "dbt_results", "checksum": {"name": "sha256", "checksum": "dc58fe178cd0db3fe704dc8c9534880b079a1c5d9b6060f1a5cd250a343e43f9"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "utilities", "materialized": "incremental", "incremental_strategy": "append"}, "created_at": 1694547879.0972667, "relation_name": "\"AwsDataCatalog\".\"dev_voluntary_churn_utilities\".\"dbt_results\"", "raw_code": "{{\r\n  config(\r\n    materialized = 'incremental',\r\n    incremental_strategy = 'append'\r\n  )\r\n}}\r\n\r\nwith empty_table as (\r\n    select\r\n        cast('1' as varchar(200)) as result_id,\r\n        cast('1' as varchar(200)) as invocation_id,\r\n        cast('1' as varchar(200)) as unique_id,\r\n        cast('1' as varchar(200)) as database_name,\r\n        cast('1' as varchar(200)) as schema_name,\r\n        cast('1' as varchar(200)) as name,\r\n        cast('1' as varchar(200)) as resource_type,\r\n        cast('1' as varchar(200)) as status,\r\n        cast('1' as double) as execution_time,\r\n        cast('1' as int) as rows_affected,\r\n        cast(current_timestamp as timestamp) time_stamp\r\n)\r\n\r\nselect * from empty_table\r\n-- This is a filter so we will never actually insert these values\r\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn", "name": "VoluntaryChurnABT-on-run-end-0", "resource_type": "operation", "package_name": "VoluntaryChurnABT", "path": "hooks\\VoluntaryChurnABT-on-run-end-0.sql", "original_file_path": ".\\dbt_project.yml", "unique_id": "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0", "fqn": ["VoluntaryChurnABT", "hooks", "VoluntaryChurnABT-on-run-end-0"], "alias": "VoluntaryChurnABT-on-run-end-0", "checksum": {"name": "sha256", "checksum": "56df3bd263dbea0c333b81b13141691588a40daaf2bbc1d5c17acb83b708f1cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547879.154722, "relation_name": null, "raw_code": "{{ log_dbt_results(results) }}", "language": "sql", "refs": [{"name": "dbt_results", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.log_dbt_results"], "nodes": ["model.VoluntaryChurnABT.dbt_results"]}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "index": 0}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "cm_us", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_cm_us.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_cm_us"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_cm_us", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.4343147, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "cm_us", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "numr", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_numr", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_numr.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_numr"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_numr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.4507492, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "numr", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "samp", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_samp", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_samp.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_samp"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_samp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.4577658, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "samp", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "ucer_deg", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg"], "alias": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426"}, "created_at": 1694547879.4652033, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_afdff199570646b211a59328edad4426\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ucer_deg", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.4720094, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "snr_deg", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "pct_npa", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.4794886, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pct_npa", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "pct_ucer", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer"], "alias": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4"}, "created_at": 1694547879.489674, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pct_ucer", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "es_gold", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_es_gold", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_es_gold.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_es_gold"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_es_gold", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.5005913, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "es_gold", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld"], "alias": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad"}, "created_at": 1694547879.507629, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_trfc_dwld", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld"], "alias": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812"}, "created_at": 1694547879.5176878, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_trfc_dwld", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld"], "alias": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43"}, "created_at": 1694547879.5257077, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_trfc_dwld", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld"], "alias": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456"}, "created_at": 1694547879.5351996, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_trfc_upld", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld"], "alias": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901"}, "created_at": 1694547879.5429826, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_764a861434f05b02000731df85a1a901\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_max_trfc_upld", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld"], "alias": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867"}, "created_at": 1694547879.553444, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_max_trfc_upld", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83"}, "created_at": 1694547879.5612998, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364"}, "created_at": 1694547879.5824816, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trfc_dwld_cm_us", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel"], "alias": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670"}, "created_at": 1694547879.5952816, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "unexp_amt_rel", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl"], "alias": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413"}, "created_at": 1694547879.605126, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "unexp_amt_ttl", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.615648, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_ctt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due"], "alias": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f"}, "created_at": 1694547879.6246998, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_amt_due", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt"], "alias": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de"}, "created_at": 1694547879.6368208, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_unexp_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_30_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt"], "alias": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0"}, "created_at": 1694547879.6449869, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_30_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_60_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt"], "alias": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d"}, "created_at": 1694547879.6537237, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_60_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_90_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt"], "alias": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100"}, "created_at": 1694547879.6627638, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_90_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_120_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt"], "alias": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8"}, "created_at": 1694547879.6718004, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_120_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_150_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt"], "alias": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90"}, "created_at": 1694547879.6780236, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_150_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_180_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt"], "alias": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86"}, "created_at": 1694547879.6850402, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_180_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_210_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt"], "alias": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad"}, "created_at": 1694547879.6915648, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_210_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_240_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt"], "alias": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080"}, "created_at": 1694547879.7018588, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_240_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_270_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt"], "alias": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de"}, "created_at": 1694547879.7078738, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_270_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_300_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt"], "alias": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7"}, "created_at": 1694547879.7179039, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_300_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_330_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt"], "alias": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1"}, "created_at": 1694547879.725333, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_330_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_360_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt"], "alias": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806"}, "created_at": 1694547879.73216, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_at_360_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt_producto_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel"], "alias": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2"}, "created_at": 1694547879.7391133, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_ctt_producto_tel", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt_producto_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int"], "alias": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22"}, "created_at": 1694547879.745139, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_24013786f70551108f95443f409b0c22\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_ctt_producto_int", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt_producto_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv"], "alias": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46"}, "created_at": 1694547879.7516773, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_ctt_producto_tv", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_tiene_descuento_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int"], "alias": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3"}, "created_at": 1694547879.7577162, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_tiene_descuento_int", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_tiene_descuento_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel"], "alias": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d"}, "created_at": 1694547879.7648783, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_tiene_descuento_tel", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_tiene_descuento_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv"], "alias": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59"}, "created_at": 1694547879.7709157, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_ac232c129858936600154503058e4a59\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_tiene_descuento_tv", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_cliente_arreglo_pago", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago"], "alias": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9"}, "created_at": 1694547879.7775857, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_cliente_arreglo_pago", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_intencion_producto_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int"], "alias": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da"}, "created_at": 1694547879.784686, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_intencion_producto_int", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_intencion_producto_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv"], "alias": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8"}, "created_at": 1694547879.7907374, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_intencion_producto_tv", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_intencion_producto_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel"], "alias": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122"}, "created_at": 1694547879.7977507, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_intencion_producto_tel", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_antiguedad_ultimo_ctt_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel"], "alias": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed"}, "created_at": 1694547879.8048286, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_antiguedad_ultimo_ctt_tel", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_antiguedad_ultimo_ctt_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int"], "alias": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859"}, "created_at": 1694547879.8119967, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_antiguedad_ultimo_ctt_int", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_antiguedad_ultimo_ctt_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv"], "alias": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd"}, "created_at": 1694547879.8190324, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_antiguedad_ultimo_ctt_tv", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ar_actvn_dt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt"], "alias": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110"}, "created_at": 1694547879.8270395, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_ar_actvn_dt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547879.8346293, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_ctt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due"], "alias": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69"}, "created_at": 1694547879.8416815, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_amt_due", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt"], "alias": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c"}, "created_at": 1694547879.8483105, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_unexp_amt", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt_producto_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel"], "alias": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38"}, "created_at": 1694547879.8553462, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_ctt_producto_tel", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt_producto_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int"], "alias": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291"}, "created_at": 1694547879.8624454, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_ctt_producto_int", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt_producto_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv"], "alias": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361"}, "created_at": 1694547879.8694894, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361\") }}", "language": "sql", "refs": [{"name": "estadisticos_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_ctt_producto_tv", "file_key_name": "models.estadisticos_semanal", "attached_node": "model.VoluntaryChurnABT.estadisticos_semanal"}, "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_estadisticos_mensual_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_estadisticos_mensual_hh_cd.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_estadisticos_mensual_hh_cd"], "alias": "not_null_estadisticos_mensual_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547879.8792202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hh_cd", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl"], "alias": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77"}, "created_at": 1694547879.8822143, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_max_ttl", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due"], "alias": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2"}, "created_at": 1694547879.891651, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_max_amt_due", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt"], "alias": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6"}, "created_at": 1694547879.8987224, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_max_unexp_amt", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a"}, "created_at": 1694547879.904727, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a"}, "created_at": 1694547879.9111977, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_trfc_dwld_cm_us", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel"], "alias": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b"}, "created_at": 1694547879.9187224, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_unexp_amt_rel", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl"], "alias": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973"}, "created_at": 1694547879.9247212, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_unexp_amt_ttl", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld"], "alias": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da"}, "created_at": 1694547879.9312434, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_max_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld"], "alias": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd"}, "created_at": 1694547879.9392893, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_avg_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld"], "alias": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc"}, "created_at": 1694547879.949406, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_sum_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835"}, "created_at": 1694547879.9604683, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7"}, "created_at": 1694547879.9685142, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2"}, "created_at": 1694547879.9760206, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "avg_sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl"], "alias": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683"}, "created_at": 1694547879.9836483, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_max_ttl", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due"], "alias": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3"}, "created_at": 1694547879.990705, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_max_amt_due", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt"], "alias": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880"}, "created_at": 1694547879.9997392, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_max_unexp_amt", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20"}, "created_at": 1694547880.0077648, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a"}, "created_at": 1694547880.0188162, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_trfc_dwld_cm_us", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel"], "alias": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db"}, "created_at": 1694547880.0252275, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_unexp_amt_rel", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl"], "alias": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61"}, "created_at": 1694547880.035855, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_unexp_amt_ttl", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld"], "alias": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39"}, "created_at": 1694547880.042979, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_max_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld"], "alias": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea"}, "created_at": 1694547880.0536103, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_avg_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld"], "alias": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6"}, "created_at": 1694547880.0611346, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_sum_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld"], "alias": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b"}, "created_at": 1694547880.0686572, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381"}, "created_at": 1694547880.0756528, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d"}, "created_at": 1694547880.0841365, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "max_sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl"], "alias": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e"}, "created_at": 1694547880.0906482, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_max_ttl", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_40138753380bee5842a37714575c0191.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due"], "alias": "column_median_estadisticos_men_40138753380bee5842a37714575c0191", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_40138753380bee5842a37714575c0191", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_40138753380bee5842a37714575c0191"}, "created_at": 1694547880.1013956, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_40138753380bee5842a37714575c0191\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_max_amt_due", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt"], "alias": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca"}, "created_at": 1694547880.1079276, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_max_unexp_amt", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3"}, "created_at": 1694547880.119204, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0"}, "created_at": 1694547880.1252222, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_trfc_dwld_cm_us", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel"], "alias": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2"}, "created_at": 1694547880.1348772, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_unexp_amt_rel", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl"], "alias": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f"}, "created_at": 1694547880.1422648, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_unexp_amt_ttl", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld"], "alias": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0"}, "created_at": 1694547880.1509871, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_max_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld"], "alias": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd"}, "created_at": 1694547880.159033, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_avg_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld"], "alias": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528"}, "created_at": 1694547880.17055, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5784d898e630be564c402598a2d6d528\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_sum_trfc_dwld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba"}, "created_at": 1694547880.1796846, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113"}, "created_at": 1694547880.1891193, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_324e5371bc71db6536bae33754280113\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4"}, "created_at": 1694547880.1997104, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4\") }}", "language": "sql", "refs": [{"name": "estadisticos_mensual", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sum_sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual", "attached_node": "model.VoluntaryChurnABT.estadisticos_mensual"}, "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('target_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_target_semanal_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_target_semanal_hh_cd.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_target_semanal_hh_cd"], "alias": "not_null_target_semanal_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2077274, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "target_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.target_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hh_cd", "file_key_name": "models.target_semanal", "attached_node": "model.VoluntaryChurnABT.target_semanal"}, "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('target_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_target_semanal_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_target_semanal_fecha_inicio_semana.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_target_semanal_fecha_inicio_semana"], "alias": "not_null_target_semanal_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2127593, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "target_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.target_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "fecha_inicio_semana", "file_key_name": "models.target_semanal", "attached_node": "model.VoluntaryChurnABT.target_semanal"}, "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "target", "model": "{{ get_where_subquery(ref('target_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_target_semanal_target", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_target_semanal_target.sql", "original_file_path": "models\\analytics\\analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_target_semanal_target"], "alias": "not_null_target_semanal_target", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2167437, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "target_semanal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.target_semanal"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "target", "file_key_name": "models.target_semanal", "attached_node": "model.VoluntaryChurnABT.target_semanal"}, "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_consumos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_consumos_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_consumos_aggregated_to_week_hh_cd.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_consumos_aggregated_to_week_hh_cd"], "alias": "not_null_int_consumos_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.229871, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_consumos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hh_cd", "file_key_name": "models.int_consumos_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_consumos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_consumos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2348642, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_consumos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "fecha_inicio_semana", "file_key_name": "models.int_consumos_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_consumos_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_consumos_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883"}, "created_at": 1694547880.2389255, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883\") }}", "language": "sql", "refs": [{"name": "int_consumos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.int_consumos_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_consumos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_nodos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_nodos_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_nodos_aggregated_to_week_hh_cd.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_nodos_aggregated_to_week_hh_cd"], "alias": "not_null_int_nodos_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.247608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_nodos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hh_cd", "file_key_name": "models.int_nodos_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_nodos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_nodos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2519908, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_nodos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "fecha_inicio_semana", "file_key_name": "models.int_nodos_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_nodos_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_nodos_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96"}, "created_at": 1694547880.2559865, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96\") }}", "language": "sql", "refs": [{"name": "int_nodos_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.int_nodos_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_nodos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_facturas_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_facturas_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_facturas_aggregated_to_week_hh_cd.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_facturas_aggregated_to_week_hh_cd"], "alias": "not_null_int_facturas_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.265024, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_facturas_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hh_cd", "file_key_name": "models.int_facturas_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_facturas_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_facturas_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2680528, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_facturas_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "fecha_inicio_semana", "file_key_name": "models.int_facturas_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_facturas_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_facturas_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61"}, "created_at": 1694547880.27207, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61\") }}", "language": "sql", "refs": [{"name": "int_facturas_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.int_facturas_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_facturas_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_features_engineering_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_features_engineering_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_features_engineering_aggregated_to_week_hh_cd.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_features_engineering_aggregated_to_week_hh_cd"], "alias": "not_null_int_features_engineering_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.2816217, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_features_engineering_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "hh_cd", "file_key_name": "models.int_features_engineering_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_features_engineering_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf"}, "created_at": 1694547880.2856169, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf\") }}", "language": "sql", "refs": [{"name": "int_features_engineering_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "fecha_inicio_semana", "file_key_name": "models.int_features_engineering_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_features_engineering_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44.sql", "original_file_path": "models\\intermediate\\intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44"}, "created_at": 1694547880.28967, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44\") }}", "language": "sql", "refs": [{"name": "int_features_engineering_aggregated_to_week", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.int_features_engineering_aggregated_to_week", "attached_node": "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"}, "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab": {"test_metadata": {"name": "fecha_dentro_particion_performances", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf"], "alias": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8"}, "created_at": 1694547880.3616662, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "pct_ucer", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_pct_ucer", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_pct_ucer.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_pct_ucer"], "alias": "test_cant_null_performances_stg_smy_pa__performances_pct_ucer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.371693, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pct_ucer", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "pct_npa", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_pct_npa", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_pct_npa.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_pct_npa"], "alias": "test_cant_null_performances_stg_smy_pa__performances_pct_npa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.3808205, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "pct_npa", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "snr_deg", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_snr_deg.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_snr_deg"], "alias": "test_cant_null_performances_stg_smy_pa__performances_snr_deg", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.3878403, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "snr_deg", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "ucer_deg", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_ucer_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_ucer_deg.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_ucer_deg"], "alias": "test_cant_null_performances_stg_smy_pa__performances_ucer_deg", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.3958614, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ucer_deg", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "samp", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_samp", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_samp.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_samp"], "alias": "test_cant_null_performances_stg_smy_pa__performances_samp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.403261, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "samp", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "numr", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_numr", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_numr.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_numr"], "alias": "test_cant_null_performances_stg_smy_pa__performances_numr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.4103289, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "numr", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "cm_us", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_cm_us.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_cm_us"], "alias": "test_cant_null_performances_stg_smy_pa__performances_cm_us", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.4197505, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "cm_us", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_ut_us", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us"], "alias": "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.4257653, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "desc_ut_us", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_clss_npa", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa"], "alias": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857"}, "created_at": 1694547880.433884, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "desc_clss_npa", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_clss_ucer", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer"], "alias": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808"}, "created_at": 1694547880.4403684, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "desc_clss_ucer", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_clss_snr", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr"], "alias": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657"}, "created_at": 1694547880.4468858, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "desc_clss_snr", "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__performances", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_"], "alias": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0"}, "created_at": 1694547880.4544153, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__performances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_smy_pa__performances", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8": {"test_metadata": {"name": "fecha_dentro_particion_cancelaciones01", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398"}, "created_at": 1694547880.463466, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b": {"test_metadata": {"name": "fecha_dentro_particion_cancelaciones02", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84"}, "created_at": 1694547880.472069, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf"], "alias": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.483611, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e"}, "created_at": 1694547880.4916534, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "ctrtd_fm", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm"], "alias": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4"}, "created_at": 1694547880.4987109, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ctrtd_fm", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "ctrtd_to", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to"], "alias": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41"}, "created_at": 1694547880.5057037, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ctrtd_to", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "id_pd", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd"], "alias": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.516742, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_pd", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "id_tp_clnt", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt"], "alias": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4"}, "created_at": 1694547880.5238192, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_tp_clnt", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "dt_load", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load"], "alias": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510"}, "created_at": 1694547880.5345879, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_load", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "id_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs"], "alias": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.5426428, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37"}, "created_at": 1694547880.5567753, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "ctrtd_fm", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm"], "alias": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec"}, "created_at": 1694547880.567422, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ctrtd_fm", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "ctrtd_to", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to"], "alias": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21"}, "created_at": 1694547880.5759363, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ctrtd_to", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "id_pd", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd"], "alias": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.5840158, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_pd", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "id_tp_clnt", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt"], "alias": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81"}, "created_at": 1694547880.5980213, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_tp_clnt", "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__cancelaciones01", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_"], "alias": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d"}, "created_at": 1694547880.6060364, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__cancelaciones02", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_"], "alias": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b"}, "created_at": 1694547880.617953, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__cancelaciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_smy_pa__cancelaciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498": {"test_metadata": {"name": "fecha_dentro_particion_consumos", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf"], "alias": "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.6274967, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__consumos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__consumos", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19": {"test_metadata": {"name": "test_cant_null_consumos", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf"], "alias": "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.70261, "relation_name": null, "raw_code": "{{ test_test_cant_null_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__consumos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__consumos", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3": {"test_metadata": {"name": "test_cant_null_consumos", "kwargs": {"column_name": "trfc_dwld", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld"], "alias": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.7247784, "relation_name": null, "raw_code": "{{ test_test_cant_null_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__consumos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trfc_dwld", "file_key_name": "models.stg_smy_pa__consumos", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4": {"test_metadata": {"name": "test_cant_null_consumos", "kwargs": {"column_name": "trfc_upld", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld"], "alias": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.734852, "relation_name": null, "raw_code": "{{ test_test_cant_null_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__consumos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "trfc_upld", "file_key_name": "models.stg_smy_pa__consumos", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__consumos", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_"], "alias": "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694547880.7424035, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__consumos", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_smy_pa__consumos", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9": {"test_metadata": {"name": "fecha_dentro_particion_retenciones", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs"], "alias": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3"}, "created_at": 1694547880.75505, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_retenciones(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.7686412, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.7811718, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "ctrtd_fm", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.7896903, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ctrtd_fm", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "ctrtd_to", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.7987297, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ctrtd_to", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "id_pd", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.8057299, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_pd", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "id_tp_clnt", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.815765, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "id_tp_clnt", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "dt_load", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1694547880.8227987, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "dt_load", "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__retenciones", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa.sql", "original_file_path": "models\\staging\\staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_"], "alias": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa"}, "created_at": 1694547880.8375492, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__retenciones(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa\") }}", "language": "sql", "refs": [{"name": "stg_smy_pa__retenciones", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_smy_pa__retenciones", "attached_node": "model.VoluntaryChurnABT.stg_smy_pa__retenciones"}}, "sources": {}, "macros": {"macro.VoluntaryChurnABT.date_to_week": {"name": "date_to_week", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\date_to_week.sql", "original_file_path": "macros\\date_to_week.sql", "unique_id": "macro.VoluntaryChurnABT.date_to_week", "macro_sql": "{% macro date_to_week(date_to_classify, columns_names, db_name, table_name) %}\r\n\r\n    {% set sql_statement %}\r\n        SELECT\r\n            CAST(date_column AS DATE) inicio_semana,\r\n            date_add('day', 6, CAST(date_column AS DATE)) fin_semana,\r\n            row_number() over(order by date_column) AS semana\r\n        FROM (\r\n          VALUES (SEQUENCE(FROM_ISO8601_DATE('2023-01-02'),   \r\n                           FROM_ISO8601_DATE('{{ var(\"today\") }}'), INTERVAL '7' DAY) ) ) AS t1(date_array)\r\n        CROSS JOIN UNNEST(date_array) AS t2(date_column) ;\r\n    {% endset %}\r\n\r\n    {%- set fechas = dbt_utils.get_query_results_as_dict(sql_statement) -%}\r\n\r\n    with week_classification as (\r\n\r\n        select \r\n        {% for column in columns_names %}\r\n            {{ column }}, \r\n        {% endfor %}\r\n        CASE \r\n        {% for fecha in fechas['inicio_semana'] %}\r\n            when \r\n                date_diff('day', DATE('{{fecha}}'), DATE({{date_to_classify}})) >= 0 \r\n                and   \r\n                date_diff('day', DATE('{{fechas['fin_semana'][loop.index - 1]}}'), DATE({{date_to_classify}})) <= 0 \r\n                then concat('{{loop.index}}',' - ', '{{fecha}}',' - ', '{{fechas['fin_semana'][loop.index - 1]}}')\r\n        {% endfor %}\r\n    END semana\r\n    from {{db_name}}.{{table_name}}\r\n    where date({{date_to_classify}}) >= date('2023-01-02')\r\n    )\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "Permite pasar una fecha a un n\u00famero de semana.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "date_to_classify", "type": null, "description": "Fecha a clasificar"}, {"name": "columns_names", "type": null, "description": "Lista de columnas donde se aplicara el macro"}, {"name": "db_name", "type": null, "description": "Nombre de la base de datos donde se encuentra la fecha"}, {"name": "table_name", "type": null, "description": "Nombre de la tabla donde se encuentra la fecha"}], "created_at": 1694547879.2668056, "supported_languages": null}, "macro.VoluntaryChurnABT.get_avg_max_min": {"name": "get_avg_max_min", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_avg_max_min.sql", "original_file_path": "macros\\get_avg_max_min.sql", "unique_id": "macro.VoluntaryChurnABT.get_avg_max_min", "macro_sql": "{% macro get_avg_max_min(columns) %}\r\n    {% for column in columns %}\r\n        \r\n        AVG({{ column }}) AS avg_{{ column }},\r\n        MAX({{ column }}) AS max_{{ column }},\r\n        MIN({{ column }}) AS min_{{ column }}\r\n        {% if not loop.last %},{% endif %}\r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4440007, "supported_languages": null}, "macro.VoluntaryChurnABT.get_avg_value": {"name": "get_avg_value", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_avg_max_value.sql", "original_file_path": "macros\\get_avg_max_value.sql", "unique_id": "macro.VoluntaryChurnABT.get_avg_value", "macro_sql": "{% macro get_avg_value(columns_names) %}\r\n\r\n    {% for column in columns_names %}\r\n    avg(case when {{ column }} = -1 then 0 else {{ column }} end) as avg_{{ column.split('.')[1] if '.' in column else column }}, \r\n    {% endfor %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene el promedio de los valores de una columna", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "column_names", "type": null, "description": "Lista de columnas donde se aplicara el macro"}], "created_at": 1694547879.270129, "supported_languages": null}, "macro.VoluntaryChurnABT.get_max_value": {"name": "get_max_value", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_avg_max_value.sql", "original_file_path": "macros\\get_avg_max_value.sql", "unique_id": "macro.VoluntaryChurnABT.get_max_value", "macro_sql": "{% macro get_max_value(columns_names) %}\r\n\r\n    {% for column in columns_names %}\r\n    max(case when {{ column }} = -1 then 0 else {{ column }} end) as max_{{ column.split('.')[1] if '.' in column else column }}, \r\n    {% endfor %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene el m\u00e1ximo de los valores de una columna", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "column_names", "type": "string", "description": "Lista de columnas donde se aplicara el macro"}], "created_at": 1694547879.2721212, "supported_languages": null}, "macro.VoluntaryChurnABT.get_sum_value": {"name": "get_sum_value", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_avg_max_value.sql", "original_file_path": "macros\\get_avg_max_value.sql", "unique_id": "macro.VoluntaryChurnABT.get_sum_value", "macro_sql": "{% macro get_sum_value(columns_names) %}\r\n\r\n    {% for column in columns_names %}\r\n    sum(case when {{ column }} = -1 then 0 else {{ column }} end) as sum_{{ column.split('.')[1] if '.' in column else column }}, \r\n    {% endfor %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene la suma de los valores de una columna", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "column_names", "type": "string", "description": "Lista de columnas donde se aplicara el macro"}], "created_at": 1694547879.2741187, "supported_languages": null}, "macro.VoluntaryChurnABT.get_last_partition": {"name": "get_last_partition", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_last_partition.sql", "original_file_path": "macros\\get_last_partition.sql", "unique_id": "macro.VoluntaryChurnABT.get_last_partition", "macro_sql": "{% macro get_last_partition(db_name, table_name) %}\r\n    {% set sql_statement %}\r\n    SELECT particion FROM {{ ref('tablas_particiones')}}\r\n    WHERE tabla = lower('{{ table_name }}')\r\n    {% endset %}\r\n    (SELECT \r\n    *\r\n    FROM {{ db_name }}.{{ table_name }}\r\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = ({{ sql_statement }})\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene la \u00faltima partici\u00f3n de una tabla.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "db_name", "type": null, "description": "Base de datos donde se encuentra la tabla."}, {"name": "table_name", "type": null, "description": "Tabla de la que se desea la \u00faltima partici\u00f3n."}], "created_at": 1694547879.2761207, "supported_languages": null}, "macro.VoluntaryChurnABT.get_last_partition_viejo": {"name": "get_last_partition_viejo", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_last_partition.sql", "original_file_path": "macros\\get_last_partition.sql", "unique_id": "macro.VoluntaryChurnABT.get_last_partition_viejo", "macro_sql": "{% macro get_last_partition_viejo(db_name, table_name) %}\r\n    {% set sql_statement %}\r\n    SELECT CAST(particion AS DATE) FROM {{ ref('ultimas_particiones')}}\r\n    WHERE tabla = '{{ table_name }}'\r\n    {% endset %}\r\n    (SELECT \r\n    *\r\n    FROM {{ db_name }}.{{ table_name }}\r\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = ({{ sql_statement }})\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.451509, "supported_languages": null}, "macro.VoluntaryChurnABT.get_mondays_between_dates": {"name": "get_mondays_between_dates", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_mondays_between_dates.sql", "original_file_path": "macros\\get_mondays_between_dates.sql", "unique_id": "macro.VoluntaryChurnABT.get_mondays_between_dates", "macro_sql": "{% macro get_mondays_between_dates(start_date_str, end_date_str) %}\r\n    {% set start_date = modules.datetime.datetime.strptime(start_date_str,'%Y-%m-%d') %}    \r\n    {% set end_date = modules.datetime.datetime.strptime(end_date_str,'%Y-%m-%d') %}\r\n    {% set current_date = start_date %}\r\n    {% set mondays = [] %}\r\n    \r\n    {% for _ in range((end_date - start_date).days + 1) %}\r\n\r\n        {% set current_date2 = current_date + modules.datetime.timedelta(_) %}\r\n\r\n        {% if current_date2.strftime('%A') == 'Monday' %}\r\n            {% set _ = mondays.append(current_date2.strftime('%Y-%m-%d')) %}\r\n        {% endif %}\r\n        \r\n    {% endfor %}\r\n    \r\n    {{ mondays }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4535084, "supported_languages": null}, "macro.VoluntaryChurnABT.get_mondays_between_dates_month": {"name": "get_mondays_between_dates_month", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_mondays_between_dates_month.sql", "original_file_path": "macros\\get_mondays_between_dates_month.sql", "unique_id": "macro.VoluntaryChurnABT.get_mondays_between_dates_month", "macro_sql": "{% macro get_mondays_between_dates_month(start_date_str, end_date_str) %}\r\n    {% set start_date = modules.datetime.datetime.strptime(end_date_str,'%Y-%m-%d') - modules.datetime.timedelta(weeks=3) %}    \r\n    {% set end_date = modules.datetime.datetime.strptime(end_date_str,'%Y-%m-%d') %}\r\n    {% set current_date = start_date %}\r\n    {% set mondays = [] %}\r\n    \r\n    {% for _ in range((end_date - start_date).days + 1) %}\r\n\r\n        {% set current_date2 = current_date + modules.datetime.timedelta(_) %}\r\n\r\n        {% if current_date2.strftime('%A') == 'Monday' %}\r\n            {% set _ = mondays.append(current_date2.strftime('%Y-%m-%d')) %}\r\n        {% endif %}\r\n        \r\n    {% endfor %}\r\n    \r\n    {{ mondays }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4570189, "supported_languages": null}, "macro.VoluntaryChurnABT.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\get_tables_by_pattern_sql.sql", "unique_id": "macro.VoluntaryChurnABT.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {% set sql %}\r\n        select\r\n            table_schema as \"table_schema\",\r\n            table_name as \"table_name\",\r\n            {{ dbt_utils.get_table_types_sql() }}\r\n        from {{ database }}.information_schema.tables\r\n        where table_schema like '{{ schema_pattern|lower }}'\r\n            and table_name like '{{ table_pattern|lower }}'\r\n            and table_name not like '{{ exclude|lower }}'\r\n    {% endset %}\r\n\r\n    {{ return(sql) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "Permite obtener ciertas tablas seg\u00fan un patr\u00f3n dado.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "schema_pattern", "type": null, "description": "Colocar alg\u00fan patr\u00f3n de schema."}, {"name": "table_pattern", "type": null, "description": "Colocar alg\u00fan patr\u00f3n de tabla."}, {"name": "exclude=''", "type": null, "description": "Colocar alg\u00fan patr\u00f3n de tabla a excluir"}, {"name": "database", "type": null, "description": "Database donde buscar"}], "created_at": 1694547879.2836516, "supported_languages": null}, "macro.VoluntaryChurnABT.line_bsn_classification": {"name": "line_bsn_classification", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\line_bsn_classification.sql", "original_file_path": "macros\\line_bsn_classification.sql", "unique_id": "macro.VoluntaryChurnABT.line_bsn_classification", "macro_sql": "{% macro line_bsn_classification(column_name) %}\r\n    CASE \r\n    WHEN regexp_like({{ column_name }}, 'Televisi\u00f3n|Cable TV') then 'TV'\r\n    WHEN regexp_like({{ column_name }}, 'Internet|Ethernet') then  'INT'\r\n    WHEN regexp_like({{ column_name }}, 'Cablephone|Telecarrier plans - telephony|Telecarrier plans - simple products') then  'TEL'\r\n    else 'TBD'\r\n    END\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "clasifica los servicios en TV, INT y Tel.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "column_name", "type": null, "description": "Columna a la que se le aplicar\u00e1 el macro."}], "created_at": 1694547879.2856526, "supported_languages": null}, "macro.VoluntaryChurnABT.log_dbt_results": {"name": "log_dbt_results", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\log_dbt_results.sql", "original_file_path": "macros\\log_dbt_results.sql", "unique_id": "macro.VoluntaryChurnABT.log_dbt_results", "macro_sql": "{% macro log_dbt_results(results) %}\r\n    -- depends_on: {{ ref('dbt_results') }}\r\n    {%- if execute -%}\r\n        {%- set parsed_results = parse_dbt_results(results) -%}\r\n        {%- if parsed_results | length  > 0 -%}\r\n            {% set insert_dbt_results_query -%}\r\n                insert into {{ ref('dbt_results') }}\r\n                    (\r\n                        result_id,\r\n                        invocation_id,\r\n                        unique_id,\r\n                        database_name,\r\n                        schema_name,\r\n                        name,\r\n                        resource_type,\r\n                        status,\r\n                        execution_time,\r\n                        rows_affected,\r\n                        time_stamp\r\n                ) values\r\n                    {%- for parsed_result_dict in parsed_results -%}\r\n                        (\r\n                            '{{ parsed_result_dict.get('result_id') }}',\r\n                            '{{ parsed_result_dict.get('invocation_id') }}',\r\n                            '{{ parsed_result_dict.get('unique_id') }}',\r\n                            '{{ parsed_result_dict.get('database_name') }}',\r\n                            '{{ parsed_result_dict.get('schema_name') }}',\r\n                            '{{ parsed_result_dict.get('name') }}',\r\n                            '{{ parsed_result_dict.get('resource_type') }}',\r\n                            '{{ parsed_result_dict.get('status') }}',\r\n                            {{ parsed_result_dict.get('execution_time') }},\r\n                            {{ parsed_result_dict.get('rows_affected') }},\r\n                            cast(current_timestamp as timestamp)\r\n                        ) {{- \",\" if not loop.last else \"\" -}}\r\n                    {%- endfor -%}\r\n            {%- endset -%}\r\n            {%- do run_query(insert_dbt_results_query) -%}\r\n        {%- endif -%}\r\n    {%- endif -%}\r\n    -- This macro is called from an on-run-end hook and therefore must return a query txt to run. Returning an empty string will do the trick\r\n    {{ return ('') }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.VoluntaryChurnABT.parse_dbt_results", "macro.dbt.run_query"]}, "description": "Logea los resultados de las queries de dbt en una tabla de athena", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "results", "type": null, "description": "Resultados a logear"}], "created_at": 1694547879.287168, "supported_languages": null}, "macro.VoluntaryChurnABT.parse_dbt_results": {"name": "parse_dbt_results", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\parse_dbt_results.sql", "original_file_path": "macros\\parse_dbt_results.sql", "unique_id": "macro.VoluntaryChurnABT.parse_dbt_results", "macro_sql": "{% macro parse_dbt_results(results) %}\r\n    -- Create a list of parsed results\r\n    {%- set parsed_results = [] %}\r\n    -- Flatten results and add to list\r\n    {% for run_result in results %}\r\n        -- Convert the run result object to a simple dictionary\r\n        {% set run_result_dict = run_result.to_dict() %}\r\n        -- Get the underlying dbt graph node that was executed\r\n        {% set node = run_result_dict.get('node') %}\r\n        {% set rows_affected = run_result_dict.get('adapter_response', {}).get('rows_affected', 0) %}\r\n        {%- if not rows_affected -%}\r\n            {% set rows_affected = 0 %}\r\n        {%- endif -%}\r\n        {% set parsed_result_dict = {\r\n                'result_id': invocation_id ~ '.' ~ node.get('unique_id'),\r\n                'invocation_id': invocation_id,\r\n                'unique_id': node.get('unique_id'),\r\n                'database_name': node.get('database'),\r\n                'schema_name': node.get('schema'),\r\n                'name': node.get('name'),\r\n                'resource_type': node.get('resource_type'),\r\n                'status': run_result_dict.get('status'),\r\n                'execution_time': run_result_dict.get('execution_time'),\r\n                'rows_affected': rows_affected\r\n                }%}\r\n        {% do parsed_results.append(parsed_result_dict) %}\r\n    {% endfor %}\r\n    {{ return(parsed_results) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Parsea resultados de las queries de dbt para luego logearlos.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "results", "type": null, "description": "Resultados a parsear"}], "created_at": 1694547879.2892938, "supported_languages": null}, "macro.VoluntaryChurnABT.partition": {"name": "partition", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\partition.sql", "original_file_path": "macros\\partition.sql", "unique_id": "macro.VoluntaryChurnABT.partition", "macro_sql": "{% macro partition(date_column) %}\r\nYEAR(date_add('week', 1, {{ date_column }})) as year,\r\nMONTH(date_add('week', 1, {{ date_column }})) as month,\r\nDAY(date_add('week', 1, {{ date_column }})) as day \r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "obtiene los datos de mes, semana y d\u00eda de una fecha.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "date_column", "type": null, "description": "Columna a la que se le aplicar\u00e1 el macro."}], "created_at": 1694547879.290738, "supported_languages": null}, "macro.VoluntaryChurnABT.run_mode": {"name": "run_mode", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros\\run_mode.sql", "original_file_path": "macros\\run_mode.sql", "unique_id": "macro.VoluntaryChurnABT.run_mode", "macro_sql": "{% macro run_mode(date_column, modo) %}\r\n\r\n    {%- if modo[0] == 'default' -%}\r\n        {{date_column}} BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\r\n\r\n    {%- elif modo[0] == \"rango\" -%}\r\n        DATE({{date_column}}) < date_trunc('week', CURRENT_DATE)\r\n        AND DATE({{date_column}}) BETWEEN date_trunc('week',DATE('{{modo[1]}}')) AND date_add('day',6,date_trunc('week',DATE('{{modo[2]}}')))\r\n\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Eligen entre dos modos de procesamiento. 'default' procesa o reprocesa \u00faltima partici\u00f3n y 'rango' procesa o reprocesa un rango de fechas.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros\\macros.yml", "arguments": [{"name": "date_column", "type": null, "description": "Columna a la que se le aplicar\u00e1 el macro."}, {"name": "modo", "type": null, "description": "Recibe 'default' o 'rango'"}], "created_at": 1694547879.293739, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones01": {"name": "test_cant_particiones_stg_smy_pa__cancelaciones01", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\cant_particiones_stg_smy_pa__cancelaciones01.sql", "original_file_path": "tests\\generic\\cant_particiones_stg_smy_pa__cancelaciones01.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones01", "macro_sql": "{% test cant_particiones_stg_smy_pa__cancelaciones01(model, column_name) %}\r\n\r\nWITH seleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\r\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\r\n\r\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \r\nFROM filtro\r\nwhere fecha_particion = ult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\r\nfrom seleccionar\r\nwhere fecha_particion = anteult_part),\r\n\r\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\r\nFROM ult_particion\r\nleft JOIN anteult_particion\r\nON ult_particion.a = anteult_particion.b)\r\n\r\nselect * from comparacion \r\n\r\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.471406, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones02": {"name": "test_cant_particiones_stg_smy_pa__cancelaciones02", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\cant_particiones_stg_smy_pa__cancelaciones02.sql", "original_file_path": "tests\\generic\\cant_particiones_stg_smy_pa__cancelaciones02.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones02", "macro_sql": "{% test cant_particiones_stg_smy_pa__cancelaciones02(model, column_name) %}\r\n\r\nWITH seleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\r\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\r\n\r\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \r\nFROM filtro\r\nwhere fecha_particion = ult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\r\nfrom seleccionar\r\nwhere fecha_particion = anteult_part),\r\n\r\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\r\nFROM ult_particion\r\nleft JOIN anteult_particion\r\nON ult_particion.a = anteult_particion.b)\r\n\r\nselect * from comparacion \r\n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\r\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4723997, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__consumos": {"name": "test_cant_particiones_stg_smy_pa__consumos", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\cant_particiones_stg_smy_pa__consumos.sql", "original_file_path": "tests\\generic\\cant_particiones_stg_smy_pa__consumos.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__consumos", "macro_sql": "{% test cant_particiones_stg_smy_pa__consumos(model, column_name) %}\r\n\r\nWITH seleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\r\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\r\n\r\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \r\nFROM filtro\r\nwhere fecha_particion = ult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\r\nfrom seleccionar\r\nwhere fecha_particion = anteult_part),\r\n\r\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\r\nFROM ult_particion\r\nleft JOIN anteult_particion\r\nON ult_particion.a = anteult_particion.b)\r\n\r\nselect * from comparacion \r\n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\r\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4723997, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__performances": {"name": "test_cant_particiones_stg_smy_pa__performances", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\cant_particiones_stg_smy_pa__performances.sql", "original_file_path": "tests\\generic\\cant_particiones_stg_smy_pa__performances.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__performances", "macro_sql": "{% test cant_particiones_stg_smy_pa__performances(model, column_name) %}\r\n\r\nWITH seleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\r\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\r\n\r\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \r\nFROM filtro\r\nwhere fecha_particion = ult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\r\nfrom seleccionar\r\nwhere fecha_particion = anteult_part),\r\n\r\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\r\nFROM ult_particion\r\nleft JOIN anteult_particion\r\nON ult_particion.a = anteult_particion.b)\r\n\r\nselect * from comparacion \r\n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\r\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4734004, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__retenciones": {"name": "test_cant_particiones_stg_smy_pa__retenciones", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\cant_particiones_stg_smy_pa__retenciones.sql", "original_file_path": "tests\\generic\\cant_particiones_stg_smy_pa__retenciones.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__retenciones", "macro_sql": "{% test cant_particiones_stg_smy_pa__retenciones(model, column_name) %}\r\n\r\nWITH seleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\r\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\r\n\r\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \r\nFROM filtro\r\nwhere fecha_particion = ult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\r\nfrom seleccionar\r\nwhere fecha_particion = anteult_part),\r\n\r\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\r\nFROM ult_particion\r\nleft JOIN anteult_particion\r\nON ult_particion.a = anteult_particion.b)\r\n\r\nselect * from comparacion \r\n\r\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4743974, "supported_languages": null}, "macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual": {"name": "test_column_median_estadisticos_mensual", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\column_median_estadisticos_mensual.sql", "original_file_path": "tests\\generic\\column_median_estadisticos_mensual.sql", "unique_id": "macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro_sql": "{% test column_median_estadisticos_mensual(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *, abs({{column_name}}) as {{column_name}}_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\r\n\r\nagrego_num as (select hh_cd,{{column_name}}_abs as {{column_name}},year_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\r\ncase when {{column_name}} = 0 then {{column_name}} + 0.1 end as {{column_name}}1\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nult_particion as (select * from filtro where fecha_particion = ult_particion)\r\n\r\nSELECT *\r\nFROM ult_particion\r\nLEFT JOIN anteult_particion\r\nON ult_particion.hh_cd = anteult_particion.hh_cd\r\nWhere ult_particion.{{column_name}}1 < (anteult_particion.{{column_name}}1 - (anteult_particion.{{column_name}}1 * 10/ 100)) \r\nor ult_particion.{{column_name}}1 > (anteult_particion.{{column_name}}1 + (anteult_particion.{{column_name}}1 * 10 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4753978, "supported_languages": null}, "macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal": {"name": "test_column_median_estadisticos_semanal", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\column_median_estadisticos_semanal.sql", "original_file_path": "tests\\generic\\column_median_estadisticos_semanal.sql", "unique_id": "macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro_sql": "{% test column_median_estadisticos_semanal(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *,abs({{column_name}}) as {{column_name}}_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\r\n\r\nagrego_num as (select hh_cd,{{column_name}}_abs as {{column_name}},year_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\r\ncase when {{column_name}} = 0 then {{column_name}} + 0.1 end as {{column_name}}1\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nult_particion as (select * from filtro where fecha_particion = ult_particion),\r\n\r\njoins as(SELECT *\r\nFROM ult_particion\r\nLEFT JOIN anteult_particion\r\nON ult_particion.hh_cd = anteult_particion.hh_cd\r\nWhere ult_particion.{{column_name}}1 < (anteult_particion.{{column_name}}1 - (anteult_particion.{{column_name}}1 * 10 / 100)) \r\nor ult_particion.{{column_name}}1 > (anteult_particion.{{column_name}}1 + (anteult_particion.{{column_name}}1 * 10 / 100)))\r\n\r\nselect * from joins\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4791644, "supported_languages": null}, "macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\expect_compound_columns_to_be_unique.sql", "original_file_path": "tests\\generic\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\r\n                                                column_list,\r\n                                                quote_columns=False,\r\n                                                ignore_row_if=\"all_values_are_missing\",\r\n                                                row_condition=None\r\n                                                ) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\n{% if not column_list %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set columns=column_list %}\r\n{% elif quote_columns %}\r\n    {%- set columns=[] %}\r\n        {% for column in column_list -%}\r\n            {% set columns = columns.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set row_condition_ext -%}\r\n\r\n    {%- if row_condition  %}\r\n    {{ row_condition }} and\r\n    {% endif -%}\r\n\r\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\r\n\r\n{%- endset -%}\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    from {{ model }}\r\n    where\r\n        1=1\r\n    {%- if row_condition_ext %}\r\n        and {{ row_condition_ext }}\r\n    {% endif %}\r\n    group by\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    having count(*) > 1\r\n\r\n)\r\nselect * from validation_errors\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4841514, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones01": {"name": "test_fecha_dentro_particion_cancelaciones01", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\fecha_dentro_particion_cancelaciones01.sql", "original_file_path": "tests\\generic\\fecha_dentro_particion_cancelaciones01.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones01", "macro_sql": "{% test fecha_dentro_particion_cancelaciones01(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *,cast({{column_name}} as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\r\n\r\nagrego_num as (select hh_cd,\r\n{{column_name}}_date as {{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\r\n\r\njoins as(\r\nSELECT ultima_particion.fecha_particion,\r\nultima_particion.ult_particion,\r\nultima_particion.anteult_particion,\r\nultima_particion.hh_cd,\r\nultima_particion.{{column_name}}\r\nFROM ultima_particion\r\nLEFT JOIN anteult_particion\r\nON ultima_particion.hh_cd = anteult_particion.hh_cd\r\n),\r\n\r\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\r\n \r\nSELECT * FROM conteo where cant_dt_inf_particion = 0\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.486162, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones02": {"name": "test_fecha_dentro_particion_cancelaciones02", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\fecha_dentro_particion_cancelaciones02.sql", "original_file_path": "tests\\generic\\fecha_dentro_particion_cancelaciones02.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones02", "macro_sql": "{% test fecha_dentro_particion_cancelaciones02(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *,cast({{column_name}} as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\r\n\r\nagrego_num as (select hh_cd,\r\n{{column_name}}_date as {{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\r\n\r\njoins as(\r\nSELECT ultima_particion.fecha_particion,\r\nultima_particion.ult_particion,\r\nultima_particion.anteult_particion,\r\nultima_particion.hh_cd,\r\nultima_particion.{{column_name}}\r\nFROM ultima_particion\r\nLEFT JOIN anteult_particion\r\nON ultima_particion.hh_cd = anteult_particion.hh_cd\r\n),\r\n\r\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\r\n \r\nSELECT * FROM conteo where cant_dt_inf_particion = 0\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.48767, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_consumos": {"name": "test_fecha_dentro_particion_consumos", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\fecha_dentro_particion_consumos.sql", "original_file_path": "tests\\generic\\fecha_dentro_particion_consumos.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_consumos", "macro_sql": "{% test fecha_dentro_particion_consumos(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *,cast(date_parse(cast(cast({{column_name}} as int) as varchar),'%Y%m%d') as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\r\n\r\nagrego_num as (select id_ac,\r\n{{column_name}}_date as {{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\r\n\r\njoins as(\r\nSELECT ultima_particion.fecha_particion,\r\nultima_particion.ult_particion,\r\nultima_particion.anteult_particion,\r\nultima_particion.id_ac,\r\nultima_particion.{{column_name}}\r\nFROM ultima_particion\r\nLEFT JOIN anteult_particion\r\nON ultima_particion.id_ac = anteult_particion.id_ac\r\n),\r\n\r\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\r\n \r\nSELECT * FROM conteo where cant_dt_inf_particion = 0\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4896863, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_performances": {"name": "test_fecha_dentro_particion_performances", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\fecha_dentro_particion_performances.sql", "original_file_path": "tests\\generic\\fecha_dentro_particion_performances.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_performances", "macro_sql": "{% test fecha_dentro_particion_performances(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *,cast(date_parse(cast(cast({{column_name}} as int) as varchar),'%Y%m%d') as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\r\n\r\nagrego_num as (select nodes,\r\n{{column_name}}_date as {{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\r\n\r\njoins as(\r\nSELECT ultima_particion.fecha_particion,\r\nultima_particion.ult_particion,\r\nultima_particion.anteult_particion,\r\nultima_particion.nodes,\r\nultima_particion.{{column_name}}\r\nFROM ultima_particion\r\nLEFT JOIN anteult_particion\r\nON ultima_particion.nodes = anteult_particion.nodes\r\n),\r\n\r\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\r\n \r\nSELECT * FROM conteo where cant_dt_inf_particion = 0\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4916878, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_retenciones": {"name": "test_fecha_dentro_particion_retenciones", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\fecha_dentro_particion_retenciones.sql", "original_file_path": "tests\\generic\\fecha_dentro_particion_retenciones.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_retenciones", "macro_sql": "{% test fecha_dentro_particion_retenciones(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *,cast({{column_name}} as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\r\n\r\nagrego_num as (select hh_cd,\r\n{{column_name}}_date as {{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\r\n\r\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\r\n\r\njoins as(\r\nSELECT ultima_particion.fecha_particion,\r\nultima_particion.ult_particion,\r\nultima_particion.anteult_particion,\r\nultima_particion.hh_cd,\r\nultima_particion.{{column_name}}\r\nFROM ultima_particion\r\nLEFT JOIN anteult_particion\r\nON ultima_particion.hh_cd = anteult_particion.hh_cd\r\n),\r\n\r\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\r\n \r\nSELECT * FROM conteo where cant_dt_inf_particion = 0\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4936912, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01": {"name": "test_test_cant_null_cancelaciones01", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\test_cant_null_cancelaciones01.sql", "original_file_path": "tests\\generic\\test_cant_null_cancelaciones01.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro_sql": "{% test test_cant_null_cancelaciones01(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\r\n\r\nagrego_num as (select hh_cd,\r\n{{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \r\nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\r\n\r\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\r\n\r\njoins as(\r\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\r\nLEFT JOIN ult_particion\r\nON ult_particion.b = anteult_particion.b\r\n)\r\n\r\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4956837, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02": {"name": "test_test_cant_null_cancelaciones02", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\test_cant_null_cancelaciones02.sql", "original_file_path": "tests\\generic\\test_cant_null_cancelaciones02.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro_sql": "{% test test_cant_null_cancelaciones02(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\r\n\r\nagrego_num as (select hh_cd,\r\n{{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \r\nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\r\n\r\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\r\n\r\njoins as(\r\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\r\nLEFT JOIN ult_particion\r\nON ult_particion.b = anteult_particion.b\r\n)\r\n\r\nselect * from joins where \r\ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \r\nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\r\n\r\n\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4971993, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_consumos": {"name": "test_test_cant_null_consumos", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\test_cant_null_consumos.sql", "original_file_path": "tests\\generic\\test_cant_null_consumos.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro_sql": "{% test test_cant_null_consumos(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\r\n\r\nagrego_num as (select id_ac,\r\n{{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \r\nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\r\n\r\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\r\n\r\njoins as(\r\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\r\nLEFT JOIN ult_particion\r\nON ult_particion.b = anteult_particion.b\r\n)\r\n\r\nselect * from joins where \r\ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \r\nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\r\n\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.4987464, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_performances": {"name": "test_test_cant_null_performances", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\test_cant_null_perfonmances.sql", "original_file_path": "tests\\generic\\test_cant_null_perfonmances.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro_sql": "{% test test_cant_null_performances(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\r\n\r\nagrego_num as (select nodes,\r\n{{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \r\nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\r\n\r\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\r\n\r\njoins as(\r\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\r\nLEFT JOIN ult_particion\r\nON ult_particion.b = anteult_particion.b\r\n)\r\n\r\nselect * from joins where \r\ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \r\nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\r\n\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.499743, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_retenciones": {"name": "test_test_cant_null_retenciones", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\test_cant_null_retenciones.sql", "original_file_path": "tests\\generic\\test_cant_null_retenciones.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro_sql": "{% test test_cant_null_retenciones(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\r\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\r\n\r\nagrego_num as (select hh_cd,\r\n{{column_name}},\r\nyear_var as year,\r\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\r\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\r\nfrom casteo),\r\n\r\nseleccionar AS (SELECT \r\ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\r\ndate_trunc('week',current_date) as ult_particion, \r\ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\r\nFROM agrego_num),\r\n\r\nfiltro as (select * from seleccionar\r\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\r\n\r\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \r\nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\r\n\r\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\r\n\r\njoins as(\r\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\r\nLEFT JOIN ult_particion\r\nON ult_particion.b = anteult_particion.b\r\n)\r\n\r\nselect * from joins where \r\ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \r\nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5017505, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_particion": {"name": "test_fecha_particion", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests\\generic\\test_fecha_particion.sql", "original_file_path": "tests\\generic\\test_fecha_particion.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_particion", "macro_sql": "{% test fecha_particion(model, column_name) %}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nSELECT *\r\nFROM {{ model }}\r\nwhere year = year(date_trunc('week',CURRENT_DATE))\r\n\tand month = month(date_trunc('week',CURRENT_DATE))\r\n\tand day = DAY(date_trunc('week',CURRENT_DATE))\r\n\tand {{ column_name }} != date_trunc('week',CURRENT_DATE)\r\n\tand tabla in (\r\n\t\t'cstmr_360_cncltrgt01_fix_dim',\r\n\t\t'cstmr_360_cncltrgt02_fix_dim',\r\n\t\t'cstmr_360_rtntrgt_fix_dim',\r\n\t\t'cstmr_360_data_fix_fct',\r\n\t\t'cstmr_360_perfhcf_fix_dim'\r\n    )\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5027375, "supported_languages": null}, "macro.dbt_athena.athena__get_columns_in_relation": {"name": "athena__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_athena.athena__get_columns_in_relation", "macro_sql": "{% macro athena__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5037456, "supported_languages": null}, "macro.dbt_athena.athena__get_empty_schema_sql": {"name": "athena__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_athena.athena__get_empty_schema_sql", "macro_sql": "{% macro athena__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ dml_data_type(col['data_type']) }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.dml_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5047448, "supported_languages": null}, "macro.dbt_athena.athena__get_catalog": {"name": "athena__get_catalog", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_athena.athena__get_catalog", "macro_sql": "{% macro athena__get_catalog(information_schema, schemas) -%}\n    {{ return(adapter.get_catalog()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5057454, "supported_languages": null}, "macro.dbt_athena.athena__list_schemas": {"name": "athena__list_schemas", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_athena.athena__list_schemas", "macro_sql": "{% macro athena__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5067425, "supported_languages": null}, "macro.dbt_athena.athena__list_relations_without_caching": {"name": "athena__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_athena.athena__list_relations_without_caching", "macro_sql": "{% macro athena__list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5067425, "supported_languages": null}, "macro.dbt_athena.athena__persist_docs": {"name": "athena__persist_docs", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt_athena.athena__persist_docs", "macro_sql": "{% macro athena__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% set persist_relation_docs = for_relation and config.persist_relation_docs() and model.description %}\n  {% set persist_column_docs = for_columns and config.persist_column_docs() and model.columns %}\n  {% if (persist_relation_docs or persist_column_docs) and relation.type != 'view' %}\n    {% do adapter.persist_docs_to_glue(relation,\n                                       model,\n                                       persist_relation_docs,\n                                       persist_column_docs) %}}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5087798, "supported_languages": null}, "macro.dbt_athena.athena__drop_relation": {"name": "athena__drop_relation", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_athena.athena__drop_relation", "macro_sql": "{% macro athena__drop_relation(relation) -%}\n  {%- set native_drop = config.get('native_drop', default=false) -%}\n  {%- set rel_type_object = adapter.get_glue_table_type(relation) -%}\n  {%- set rel_type = none if rel_type_object == none else rel_type_object.value -%}\n  {%- set natively_droppable = rel_type == 'iceberg_table' or relation.type == 'view' -%}\n\n  {%- if native_drop and natively_droppable -%}\n    {%- do drop_relation_sql(relation) -%}\n  {%- else -%}\n    {%- do drop_relation_glue(relation) -%}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.drop_relation_sql", "macro.dbt_athena.drop_relation_glue"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5117855, "supported_languages": null}, "macro.dbt_athena.drop_relation_glue": {"name": "drop_relation_glue", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_athena.drop_relation_glue", "macro_sql": "{% macro drop_relation_glue(relation) -%}\n  {%- do log('Dropping relation via Glue and S3 APIs') -%}\n  {%- do adapter.clean_up_table(relation) -%}\n  {%- do adapter.delete_from_glue_catalog(relation) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.51279, "supported_languages": null}, "macro.dbt_athena.drop_relation_sql": {"name": "drop_relation_sql", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_athena.drop_relation_sql", "macro_sql": "{% macro drop_relation_sql(relation) -%}\n\n  {%- do log('Dropping relation via SQL only') -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {%- if relation.type == 'view' -%}\n      drop {{ relation.type }} if exists {{ relation.render() }}\n    {%- else -%}\n      drop {{ relation.type }} if exists {{ relation.render_hive() }}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.513788, "supported_languages": null}, "macro.dbt_athena.set_table_classification": {"name": "set_table_classification", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_athena.set_table_classification", "macro_sql": "{% macro set_table_classification(relation) -%}\n  {%- set format = config.get('format', default='parquet') -%}\n  {% call statement('set_table_classification', auto_begin=False) -%}\n    alter table {{ relation.render_hive() }} set tblproperties ('classification' = '{{ format }}')\n  {%- endcall %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5147846, "supported_languages": null}, "macro.dbt_athena.athena__rename_relation": {"name": "athena__rename_relation", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_athena.athena__rename_relation", "macro_sql": "{% macro athena__rename_relation(from_relation, to_relation) %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render_hive() }} rename to `{{ to_relation.schema }}`.`{{ to_relation.identifier }}`\n  {%- endcall %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5157893, "supported_languages": null}, "macro.dbt_athena.athena__create_schema": {"name": "athena__create_schema", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_athena.athena__create_schema", "macro_sql": "{% macro athena__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().render_hive() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5173047, "supported_languages": null}, "macro.dbt_athena.athena__drop_schema": {"name": "athena__drop_schema", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_athena.athena__drop_schema", "macro_sql": "{% macro athena__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().render_hive() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5178156, "supported_languages": null}, "macro.dbt_athena.alter_relation_add_columns": {"name": "alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt_athena.alter_relation_add_columns", "macro_sql": "{% macro alter_relation_add_columns(relation, add_columns = none) -%}\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n      alter {{ relation.type }} {{ relation.render_hive() }}\n          add columns (\n            {%- for column in add_columns -%}\n                {{ column.name }} {{ ddl_data_type(column.data_type) }}{{ ', ' if not loop.last }}\n            {%- endfor -%}\n          )\n  {%- endset -%}\n\n  {% if (add_columns | length) > 0 %}\n    {{ return(run_query(sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.ddl_data_type", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5218408, "supported_languages": null}, "macro.dbt_athena.alter_relation_drop_columns": {"name": "alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt_athena.alter_relation_drop_columns", "macro_sql": "{% macro alter_relation_drop_columns(relation, remove_columns = none) -%}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {%- for column in remove_columns -%}\n    {% set sql -%}\n      alter {{ relation.type }} {{ relation.render_hive() }} drop column {{ column.name }}\n    {% endset %}\n    {% do run_query(sql) %}\n  {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5228255, "supported_languages": null}, "macro.dbt_athena.alter_relation_replace_columns": {"name": "alter_relation_replace_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt_athena.alter_relation_replace_columns", "macro_sql": "{% macro alter_relation_replace_columns(relation, replace_columns = none) -%}\n  {% if replace_columns is none %}\n    {% set replace_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n      alter {{ relation.type }} {{ relation.render_hive() }}\n          replace columns (\n            {%- for column in replace_columns -%}\n                {{ column.name }} {{ ddl_data_type(column.data_type) }}{{ ', ' if not loop.last }}\n            {%- endfor -%}\n          )\n  {%- endset -%}\n\n  {% if (replace_columns | length) > 0 %}\n    {{ return(run_query(sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.ddl_data_type", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5248232, "supported_languages": null}, "macro.dbt_athena.validate_get_incremental_strategy": {"name": "validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\helpers.sql", "unique_id": "macro.dbt_athena.validate_get_incremental_strategy", "macro_sql": "{% macro validate_get_incremental_strategy(raw_strategy, table_type) %}\n  {%- if table_type == 'iceberg' -%}\n    {% set invalid_strategy_msg -%}\n      Invalid incremental strategy provided: {{ raw_strategy }}\n      Incremental models on Iceberg tables only work with 'append' or 'merge' (v3 only) strategy.\n    {%- endset %}\n    {% if raw_strategy not in ['append', 'merge'] %}\n      {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n    {% endif %}\n  {%- else -%}\n    {% set invalid_strategy_msg -%}\n      Invalid incremental strategy provided: {{ raw_strategy }}\n      Expected one of: 'append', 'insert_overwrite'\n    {%- endset %}\n\n    {% if raw_strategy not in ['append', 'insert_overwrite'] %}\n      {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5308769, "supported_languages": null}, "macro.dbt_athena.incremental_insert": {"name": "incremental_insert", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\helpers.sql", "unique_id": "macro.dbt_athena.incremental_insert", "macro_sql": "{% macro incremental_insert(on_schema_change, tmp_relation, target_relation, existing_relation, statement_name=\"main\") %}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {% endif %}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.process_schema_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5328763, "supported_languages": null}, "macro.dbt_athena.delete_overlapping_partitions": {"name": "delete_overlapping_partitions", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\helpers.sql", "unique_id": "macro.dbt_athena.delete_overlapping_partitions", "macro_sql": "{% macro delete_overlapping_partitions(target_relation, tmp_relation, partitioned_by) %}\n  {%- set partitioned_keys = partitioned_by | tojson | replace('\\\"', '') | replace('[', '') | replace(']', '') -%}\n  {% call statement('get_partitions', fetch_result=True) %}\n    select distinct {{partitioned_keys}} from {{ tmp_relation }};\n  {% endcall %}\n  {%- set table = load_result('get_partitions').table -%}\n  {%- set rows = table.rows -%}\n  {%- set partitions = [] -%}\n  {%- for row in rows -%}\n    {%- set single_partition = [] -%}\n    {%- for col in row -%}\n      {%- set column_type = adapter.convert_type(table, loop.index0) -%}\n      {%- if column_type == 'integer' -%}\n        {%- set value = col|string -%}\n      {%- elif column_type == 'string' -%}\n        {%- set value = \"'\" + col + \"'\" -%}\n      {%- elif column_type == 'date' -%}\n        {%- set value = \"'\" + col|string + \"'\" -%}\n      {%- elif column_type == 'timestamp' -%}\n        {%- set value = \"'\" + col|string + \"'\" -%}\n      {%- else -%}\n        {%- do exceptions.raise_compiler_error('Need to add support for column type ' + column_type) -%}\n      {%- endif -%}\n      {%- do single_partition.append(partitioned_by[loop.index0] + '=' + value) -%}\n    {%- endfor -%}\n    {%- set single_partition_expression = single_partition | join(' and ') -%}\n    {%- do partitions.append('(' + single_partition_expression + ')') -%}\n  {%- endfor -%}\n  {%- for i in range(partitions | length) %}\n    {%- do adapter.clean_up_partitions(target_relation, partitions[i]) -%}\n  {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5373838, "supported_languages": null}, "macro.dbt_athena.remove_partitions_from_columns": {"name": "remove_partitions_from_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\helpers.sql", "unique_id": "macro.dbt_athena.remove_partitions_from_columns", "macro_sql": "{% macro remove_partitions_from_columns(columns_with_partitions, partition_keys) %}\n  {%- set columns = [] -%}\n  {%- for column in columns_with_partitions -%}\n    {%- if column.name not in partition_keys -%}\n      {%- do columns.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {{ return(columns) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5378969, "supported_languages": null}, "macro.dbt_athena.materialization_incremental_athena": {"name": "materialization_incremental_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt_athena.materialization_incremental_athena", "macro_sql": "{% materialization incremental, adapter='athena' -%}\n\n  {% set raw_strategy = config.get('incremental_strategy') or 'insert_overwrite' %}\n  {% set table_type = config.get('table_type', default='hive') | lower %}\n  {% set strategy = validate_get_incremental_strategy(raw_strategy, table_type) %}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set lf_tags_config = config.get('lf_tags_config') %}\n  {% set lf_grants = config.get('lf_grants') %}\n  {% set partitioned_by = config.get('partitioned_by', default=none) %}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  -- If no partitions are used with insert_overwrite, we fall back to append mode.\n  {% if partitioned_by is none and strategy == 'insert_overwrite' %}\n    {% set strategy = 'append' %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) -%}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n    {% do drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) -%}\n  {% elif partitioned_by is not none and strategy == 'insert_overwrite' %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n    {% if tmp_relation is not none %}\n      {% do drop_relation(tmp_relation) %}\n    {% endif %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do delete_overlapping_partitions(target_relation, tmp_relation, partitioned_by) %}\n    {% set build_sql = incremental_insert(on_schema_change, tmp_relation, target_relation, existing_relation) %}\n    {% do to_drop.append(tmp_relation) %}\n  {% elif strategy == 'append' %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n    {% if tmp_relation is not none %}\n      {% do drop_relation(tmp_relation) %}\n    {% endif %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% set build_sql = incremental_insert(on_schema_change, tmp_relation, target_relation, existing_relation) %}\n    {% do to_drop.append(tmp_relation) %}\n  {% elif strategy == 'merge' and table_type == 'iceberg' %}\n    {% set unique_key = config.get('unique_key') %}\n    {% set incremental_predicates = config.get('incremental_predicates') %}\n    {% set delete_condition = config.get('delete_condition') %}\n    {% set empty_unique_key -%}\n      Merge strategy must implement unique_key as a single column or a list of columns.\n    {%- endset %}\n    {% if unique_key is none %}\n      {% do exceptions.raise_compiler_error(empty_unique_key) %}\n    {% endif %}\n    {% if incremental_predicates is not none %}\n      {% set inc_predicates_not_list -%}\n        Merge strategy must implement incremental_predicates as a list of predicates.\n      {%- endset %}\n      {% if not adapter.is_list(incremental_predicates) %}\n        {% do exceptions.raise_compiler_error(inc_predicates_not_list) %}\n      {% endif %}\n    {% endif %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n    {% if tmp_relation is not none %}\n      {% do drop_relation(tmp_relation) %}\n    {% endif %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% set build_sql = iceberg_merge(on_schema_change, tmp_relation, target_relation, unique_key, incremental_predicates, existing_relation, delete_condition) %}\n    {% do to_drop.append(tmp_relation) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n    {{ build_sql }}\n  {% endcall %}\n\n  -- set table properties\n  {% if not to_drop and table_type != 'iceberg' %}\n    {{ set_table_classification(target_relation) }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n    {% do drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% if lf_tags_config is not none %}\n    {{ adapter.add_lf_tags(target_relation, lf_tags_config) }}\n  {% endif %}\n\n  {% if lf_grants is not none %}\n    {{ adapter.apply_lf_grants(target_relation, lf_grants) }}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_athena.validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.drop_relation", "macro.dbt.run_query", "macro.dbt_athena.delete_overlapping_partitions", "macro.dbt_athena.incremental_insert", "macro.dbt_athena.iceberg_merge", "macro.dbt.statement", "macro.dbt_athena.set_table_classification", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5631413, "supported_languages": ["sql"]}, "macro.dbt_athena.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_athena.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower in merge_update_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = dest_columns -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5849273, "supported_languages": null}, "macro.dbt_athena.get_update_statement": {"name": "get_update_statement", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_athena.get_update_statement", "macro_sql": "\n\n{%- macro get_update_statement(col, rule, is_last) -%}\n    {%- if rule == \"coalesce\" -%}\n        {{ col.quoted }} = {{ 'coalesce(src.' + col.quoted + ', target.' + col.quoted + ')' }}\n    {%- elif rule == \"sum\" -%}\n      {%- if col.data_type.startswith(\"map\") -%}\n          {{ col.quoted }} = {{ 'map_zip_with(coalesce(src.' + col.quoted + ', map()), coalesce(target.' + col.quoted + ', map()), (k, v1, v2) -> coalesce(v1, 0) + coalesce(v2, 0))' }}\n      {%- else -%}\n        {{ col.quoted }} = {{ 'src.' + col.quoted + ' + target.' + col.quoted }}\n      {%- endif -%}\n    {%- elif rule == \"append\" -%}\n        {{ col.quoted }} = {{ 'src.' + col.quoted + ' || target.' + col.quoted }}\n    {%- elif rule == \"append_distinct\" -%}\n        {{ col.quoted }} = {{ 'array_distinct(src.' + col.quoted + ' || target.' + col.quoted + ')' }}\n    {%- elif rule == \"replace\" -%}\n        {{ col.quoted }} = {{ 'src.' + col.quoted }}\n    {%- else -%}\n        {{ col.quoted }} = {{ rule | replace(\"_new_\", 'src.' + col.quoted) | replace(\"_old_\", 'target.' + col.quoted) }}\n    {%- endif -%}\n    {{ \",\" if not is_last }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5889785, "supported_languages": null}, "macro.dbt_athena.iceberg_merge": {"name": "iceberg_merge", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_athena.iceberg_merge", "macro_sql": "{% macro iceberg_merge(on_schema_change, tmp_relation, target_relation, unique_key, incremental_predicates, existing_relation, delete_condition, statement_name=\"main\") %}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set merge_update_columns_default_rule = config.get('merge_update_columns_default_rule', 'replace') -%}\n    {%- set merge_update_columns_rules = config.get('merge_update_columns_rules') -%}\n\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {% endif %}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {%- if unique_key is sequence and unique_key is not string -%}\n      {%- set unique_key_cols = unique_key -%}\n    {%- else -%}\n      {%- set unique_key_cols = [unique_key] -%}\n    {%- endif -%}\n    {%- set src_columns_quoted = [] -%}\n    {%- set dest_columns_wo_keys = [] -%}\n    {%- for col in dest_columns -%}\n      {%- do src_columns_quoted.append('src.' + col.quoted ) -%}\n      {%- if col.name not in unique_key_cols -%}\n        {%- do dest_columns_wo_keys.append(col) -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns_wo_keys) -%}\n    {%- set src_cols_csv = src_columns_quoted | join(', ') -%}\n    merge into {{ target_relation }} as target using {{ tmp_relation }} as src\n    on (\n      {%- for key in unique_key_cols %}\n        target.{{ key }} = src.{{ key }} {{ \"and \" if not loop.last }}\n      {%- endfor %}\n    )\n    {% if incremental_predicates is not none -%}\n    and (\n      {%- for inc_predicate in incremental_predicates %}\n        {{ inc_predicate }} {{ \"and \" if not loop.last }}\n      {%- endfor %}\n    )\n    {%- endif %}\n    {% if delete_condition is not none -%}\n    when matched and ({{ delete_condition }})\n      then delete\n    {%- endif %}\n    when matched\n      then update set\n        {%- for col in update_columns %}\n          {%- if merge_update_columns_rules and col.name in merge_update_columns_rules %}\n            {{ get_update_statement(col, merge_update_columns_rules[col.name], loop.last) }}\n          {%- else -%}\n            {{ get_update_statement(col, merge_update_columns_default_rule, loop.last) }}\n          {%- endif -%}\n        {%- endfor %}\n    when not matched\n      then insert ({{ dest_cols_csv }})\n       values ({{ src_cols_csv }});\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.process_schema_changes", "macro.dbt_athena.get_merge_update_columns", "macro.dbt_athena.get_update_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.5949872, "supported_languages": null}, "macro.dbt_athena.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt_athena.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  {%- set partitioned_by = config.get('partitioned_by', default=none) -%}\n  {% set table_type = config.get('table_type', default='hive') | lower %}\n  {%- if partitioned_by is none -%}\n      {%- set partitioned_by = [] -%}\n  {%- endif %}\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_columns(target_relation, add_to_target_arr) -%}\n     {%- endif -%}\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n     {% if table_type == 'iceberg' %}\n       {% if add_to_target_arr | length > 0 %}\n         {%- do alter_relation_add_columns(target_relation, add_to_target_arr) -%}\n       {% endif %}\n       {% if remove_from_target_arr | length > 0 %}\n         {%- do alter_relation_drop_columns(target_relation, remove_from_target_arr) -%}\n       {% endif %}\n     {% else %}\n       {%- set replace_with_target_arr = remove_partitions_from_columns(schema_changes_dict['source_columns'], partitioned_by) -%}\n       {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 or new_target_types | length > 0 %}\n         {%- do alter_relation_replace_columns(target_relation, replace_with_target_arr) -%}\n       {% endif %}\n     {% endif %}\n  {% endif %}\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  {% do log(schema_change_message) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.alter_relation_add_columns", "macro.dbt_athena.alter_relation_drop_columns", "macro.dbt_athena.remove_partitions_from_columns", "macro.dbt_athena.alter_relation_replace_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6030633, "supported_languages": null}, "macro.dbt_athena.athena__create_table_as": {"name": "athena__create_table_as", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt_athena.athena__create_table_as", "macro_sql": "{% macro athena__create_table_as(temporary, relation, sql) -%}\n  {%- set materialized = config.get('materialized', default='table') -%}\n  {%- set external_location = config.get('external_location', default=none) -%}\n  {%- set partitioned_by = config.get('partitioned_by', default=none) -%}\n  {%- set bucketed_by = config.get('bucketed_by', default=none) -%}\n  {%- set bucket_count = config.get('bucket_count', default=none) -%}\n  {%- set field_delimiter = config.get('field_delimiter', default=none) -%}\n  {%- set table_type = config.get('table_type', default='hive') | lower -%}\n  {%- set format = config.get('format', default='parquet') -%}\n  {%- set write_compression = config.get('write_compression', default=none) -%}\n  {%- set s3_data_dir = config.get('s3_data_dir', default=target.s3_data_dir) -%}\n  {%- set s3_data_naming = config.get('s3_data_naming', default=target.s3_data_naming) -%}\n  {%- set extra_table_properties = config.get('table_properties', default=none) -%}\n\n  {%- set location_property = 'external_location' -%}\n  {%- set partition_property = 'partitioned_by' -%}\n  {%- set work_group_output_location_enforced = adapter.is_work_group_output_location_enforced() -%}\n  {%- set location = adapter.generate_s3_location(relation,\n                                                 s3_data_dir,\n                                                 s3_data_naming,\n                                                 external_location,\n                                                 temporary) -%}\n  {%- set native_drop = config.get('native_drop', default=false) -%}\n\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif -%}\n\n  {%- if table_type == 'iceberg' -%}\n    {%- set location_property = 'location' -%}\n    {%- set partition_property = 'partitioning' -%}\n    {%- if bucketed_by is not none or bucket_count is not none -%}\n      {%- set ignored_bucket_iceberg -%}\n      bucketed_by or bucket_count cannot be used with Iceberg tables. You have to use the bucket function\n      when partitioning. Will be ignored\n      {%- endset -%}\n      {%- set bucketed_by = none -%}\n      {%- set bucket_count = none -%}\n      {% do log(ignored_bucket_iceberg) %}\n    {%- endif -%}\n    {%- if 'unique' not in s3_data_naming or external_location is not none -%}\n      {%- set error_unique_location_iceberg -%}\n        You need to have an unique table location when creating Iceberg table since we use the RENAME feature\n        to have near-zero downtime.\n      {%- endset -%}\n      {% do exceptions.raise_compiler_error(error_unique_location_iceberg) %}\n    {%- endif -%}\n  {%- endif %}\n\n  {%- if native_drop and table_type == 'iceberg' -%}\n    {% do log('Config native_drop enabled, skipping direct S3 delete') %}\n  {%- else -%}\n    {% do adapter.delete_from_s3(location) %}\n  {%- endif -%}\n\n  create table {{ relation }}\n  with (\n    table_type='{{ table_type }}',\n    is_external={%- if table_type == 'iceberg' -%}false{%- else -%}true{%- endif %},\n  {%- if not work_group_output_location_enforced or table_type == 'iceberg' -%}\n    {{ location_property }}='{{ location }}',\n  {%- endif %}\n  {%- if partitioned_by is not none %}\n    {{ partition_property }}=ARRAY{{ partitioned_by | tojson | replace('\\\"', '\\'') }},\n  {%- endif %}\n  {%- if bucketed_by is not none %}\n    bucketed_by=ARRAY{{ bucketed_by | tojson | replace('\\\"', '\\'') }},\n  {%- endif %}\n  {%- if bucket_count is not none %}\n    bucket_count={{ bucket_count }},\n  {%- endif %}\n  {%- if field_delimiter is not none %}\n    field_delimiter='{{ field_delimiter }}',\n  {%- endif %}\n  {%- if write_compression is not none %}\n    write_compression='{{ write_compression }}',\n  {%- endif %}\n    format='{{ format }}'\n  {%- if extra_table_properties is not none -%}\n    {%- for prop_name, prop_value in extra_table_properties.items() -%}\n    ,\n    {{ prop_name }}={{ prop_value }}\n    {%- endfor -%}\n  {% endif %}\n  )\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6242356, "supported_languages": null}, "macro.dbt_athena.materialization_table_athena": {"name": "materialization_table_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt_athena.materialization_table_athena", "macro_sql": "{% materialization table, adapter='athena' -%}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set lf_tags_config = config.get('lf_tags_config') -%}\n  {%- set lf_grants = config.get('lf_grants') -%}\n\n  {%- set table_type = config.get('table_type', default='hive') | lower -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set is_ha = config.get('ha', default=false) -%}\n  {%- set s3_data_dir = config.get('s3_data_dir', default=target.s3_data_dir) -%}\n  {%- set s3_data_naming = config.get('s3_data_naming', default='table_unique') -%}\n  {%- set full_refresh_config = config.get('full_refresh', default=False) -%}\n  {%- set is_full_refresh_mode = (flags.FULL_REFRESH == True or full_refresh_config == True) -%}\n  {%- set versions_to_keep = config.get('versions_to_keep', default=4) -%}\n  {%- set external_location = config.get('external_location', default=none) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set tmp_relation = api.Relation.create(identifier=target_relation.identifier ~ '__ha',\n                                             schema=schema,\n                                             database=database,\n                                             s3_path_table_part=target_relation.identifier,\n                                             type='table') -%}\n\n  {%- if (\n    table_type == 'hive'\n    and is_ha\n    and ('unique' not in s3_data_naming or external_location is not none)\n  ) -%}\n      {%- set error_unique_location_hive_ha -%}\n          You need to have an unique table location when using ha config with hive table.\n          Use s3_data_naming unique, table_unique or schema_table_unique, and avoid to set an explicit\n          external_location.\n      {%- endset -%}\n      {% do exceptions.raise_compiler_error(error_unique_location_hive_ha) %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {%- if table_type == 'hive' -%}\n\n    -- for ha tables that are not in full refresh mode and when the relation exists we use the swap behavior\n    {%- if is_ha and not is_full_refresh_mode and old_relation is not none -%}\n      -- drop the tmp_relation\n      {%- if tmp_relation is not none -%}\n        {%- do adapter.delete_from_glue_catalog(tmp_relation) -%}\n      {%- endif -%}\n\n      -- create tmp table\n      {% call statement('main') -%}\n        {{ create_table_as(False, tmp_relation, sql) }}\n      {%- endcall %}\n\n      -- swap table\n      {%- set swap_table = adapter.swap_table(tmp_relation,\n                                              target_relation) -%}\n\n      -- delete glue tmp table, do not use drop_relation, as it will remove data of the target table\n      {%- do adapter.delete_from_glue_catalog(tmp_relation) -%}\n\n      {% do adapter.expire_glue_table_versions(target_relation,\n                                               versions_to_keep,\n                                               True) %}\n    {%- else -%}\n      -- Here we are in the case of non-ha tables or ha tables but in case of full refresh.\n      {%- if old_relation is not none -%}\n        {{ drop_relation(old_relation) }}\n      {%- endif -%}\n      {%- call statement('main') -%}\n        {{ create_table_as(False, target_relation, sql) }}\n      {%- endcall %}\n    {%- endif -%}\n\n    {{ set_table_classification(target_relation) }}\n\n  {%- else -%}\n\n    {%- if old_relation is none -%}\n      {%- call statement('main') -%}\n        {{ create_table_as(False, target_relation, sql) }}\n      {%- endcall %}\n    {%- else -%}\n      {%- if tmp_relation is not none -%}\n        {%- do drop_relation(tmp_relation) -%}\n      {%- endif -%}\n\n      {%- set old_relation_bkp = make_temp_relation(old_relation, '__bkp') -%}\n      -- If we have this, it means that at least the first renaming occurred but there was an issue\n      -- afterwards, therefore we are in weird state. The easiest and cleanest should be to remove\n      -- the backup relation. It won't have an impact because since we are in the else condition,\n      -- that means that old relation exists therefore no downtime yet.\n      {%- if old_relation_bkp is not none -%}\n        {%- do drop_relation(old_relation_bkp) -%}\n      {%- endif -%}\n\n      {%- call statement('main') -%}\n        {{ create_table_as(False, tmp_relation, sql) }}\n      {%- endcall -%}\n\n      {{ rename_relation(old_relation, old_relation_bkp) }}\n      {{ rename_relation(tmp_relation, target_relation) }}\n\n      {{ drop_relation(old_relation_bkp) }}\n    {%- endif -%}\n\n  {%- endif -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% if lf_tags_config is not none %}\n    {{ adapter.add_lf_tags(target_relation, lf_tags_config) }}\n  {% endif %}\n\n  {% if lf_grants is not none %}\n    {{ adapter.apply_lf_grants(target_relation, lf_grants) }}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation", "macro.dbt_athena.set_table_classification", "macro.dbt.make_temp_relation", "macro.dbt.rename_relation", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6450586, "supported_languages": ["sql"]}, "macro.dbt_athena.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt_athena.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set lf_tags_config = config.get('lf_tags_config') -%}\n  {%- set lf_grants = config.get('lf_grants') -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier,\n      schema=schema,\n      database=database,\n      type='view',\n    ) -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {% if lf_tags_config is not none %}\n    {{ adapter.add_lf_tags(target_relation, lf_tags_config) }}\n  {% endif %}\n\n  {% if lf_grants is not none %}\n    {{ adapter.apply_lf_grants(target_relation, lf_grants) }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6550677, "supported_languages": null}, "macro.dbt_athena.athena__create_view_as": {"name": "athena__create_view_as", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_athena.athena__create_view_as", "macro_sql": "{% macro athena__create_view_as(relation, sql) -%}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif -%}\n  create or replace view\n    {{ relation }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6560636, "supported_languages": null}, "macro.dbt_athena.materialization_view_athena": {"name": "materialization_view_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt_athena.materialization_view_athena", "macro_sql": "{% materialization view, adapter='athena' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do return(to_return) %}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_athena.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6570632, "supported_languages": ["sql"]}, "macro.dbt_athena.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_athena.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    -- No truncate in Athena so always drop CSV table and recreate\n    {{ drop_relation(old_relation) }}\n    {% set sql = create_csv_table(model, agate_table) %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation", "macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.67369, "supported_languages": null}, "macro.dbt_athena.try_cast_timestamp": {"name": "try_cast_timestamp", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_athena.try_cast_timestamp", "macro_sql": "{% macro try_cast_timestamp(col) %}\n    {% set date_formats = [\n      '%Y-%m-%d %H:%i:%s',\n      '%Y/%m/%d %H:%i:%s',\n      '%d %M %Y %H:%i:%s',\n      '%d/%m/%Y %H:%i:%s',\n      '%d-%m-%Y %H:%i:%s',\n      '%Y-%m-%d %H:%i:%s.%f',\n      '%Y/%m/%d %H:%i:%s.%f',\n      '%d %M %Y %H:%i:%s.%f',\n      '%d/%m/%Y %H:%i:%s.%f',\n      '%Y-%m-%dT%H:%i:%s.%fZ',\n      '%Y-%m-%dT%H:%i:%sZ',\n      '%Y-%m-%dT%H:%i:%s',\n    ]%}\n\n    coalesce(\n      {% for date_format in date_formats %}\n        try(date_parse({{ col }}, '{{ date_format }}'))\n        {%- if not loop.last -%}, {% endif -%}\n      {% endfor %}\n    ) as {{ col }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.674689, "supported_languages": null}, "macro.dbt_athena.create_csv_table_insert": {"name": "create_csv_table_insert", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_athena.create_csv_table_insert", "macro_sql": "{% macro create_csv_table_insert(model, agate_table) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set lf_tags_config = config.get('lf_tags_config') -%}\n  {%- set lf_grants = config.get('lf_grants') -%}\n  {%- set column_override = config.get('column_types', {}) -%}\n  {%- set quote_seed_column = config.get('quote_columns') -%}\n  {%- set s3_data_dir = config.get('s3_data_dir', target.s3_data_dir) -%}\n  {%- set s3_data_naming = config.get('s3_data_naming', target.s3_data_naming) -%}\n  {%- set external_location = config.get('external_location') -%}\n\n  {%- set relation = api.Relation.create(\n    identifier=identifier,\n    schema=model.schema,\n    database=model.database,\n    type='table'\n  ) -%}\n\n  {%- set location = adapter.generate_s3_location(relation,\n                                                 s3_data_dir,\n                                                 s3_data_naming,\n                                                 external_location,\n                                                 temporary) -%}\n\n  {% set sql_table %}\n    create external table {{ relation.render_hive() }} (\n        {%- for col_name in agate_table.column_names -%}\n          {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n          {%- set type = column_override.get(col_name, inferred_type) -%}\n          {%- set type = type if type != \"string\" else \"varchar\" -%}\n          {%- set column_name = (col_name | string) -%}\n          {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ ddl_data_type(type) }} {%- if not loop.last -%}, {% endif -%}\n        {%- endfor -%}\n    )\n    location '{{ location }}'\n\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql_table }}\n  {%- endcall %}\n\n  {% if lf_tags_config is not none %}\n    {{ adapter.add_lf_tags(relation, lf_tags_config) }}\n  {% endif %}\n\n  {% if lf_grants is not none %}\n    {{ adapter.apply_lf_grants(relation, lf_grants) }}\n  {% endif %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.ddl_data_type", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6847854, "supported_languages": null}, "macro.dbt_athena.create_csv_table_upload": {"name": "create_csv_table_upload", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_athena.create_csv_table_upload", "macro_sql": "{% macro create_csv_table_upload(model, agate_table) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set lf_tags_config = config.get('lf_tags_config') -%}\n  {%- set lf_grants = config.get('lf_grants') -%}\n\n  {%- set column_override = config.get('column_types', {}) -%}\n  {%- set quote_seed_column = config.get('quote_columns', None) -%}\n  {%- set s3_data_dir = config.get('s3_data_dir', default=target.s3_data_dir) -%}\n  {%- set s3_data_naming = config.get('s3_data_naming', target.s3_data_naming) -%}\n  {%- set external_location = config.get('external_location', default=none) -%}\n\n  {%- set tmp_relation = api.Relation.create(\n    identifier=identifier + \"__dbt_tmp\",\n    schema=model.schema,\n    database=model.database,\n    type='table'\n  ) -%}\n\n  {%- set tmp_s3_location = adapter.upload_seed_to_s3(\n    tmp_relation,\n    agate_table,\n    s3_data_dir,\n    s3_data_naming,\n    external_location,\n  ) -%}\n\n  -- create target relation\n  {%- set relation = api.Relation.create(\n    identifier=identifier,\n    schema=model.schema,\n    database=model.database,\n    type='table'\n  ) -%}\n\n  -- drop tmp relation if exists\n  {{ drop_relation(tmp_relation) }}\n\n  {% set sql_tmp_table %}\n    create external table {{ tmp_relation.render_hive() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} string {%- if not loop.last -%}, {% endif -%}\n        {%- endfor -%}\n    )\n    row format serde 'org.apache.hadoop.hive.serde2.OpenCSVSerde'\n    location '{{ tmp_s3_location }}'\n    tblproperties (\n      'skip.header.line.count'='1'\n    )\n  {% endset %}\n\n  -- casting to type string is not allowed needs to be varchar\n  {% set sql %}\n    select\n        {% for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set type = type if type != \"string\" else \"varchar\" -%}\n            {%- set column_name = (col_name | string) -%}\n            {%- set quoted_column_name = adapter.quote_seed_column(column_name, quote_seed_column) -%}\n            {% if type == 'timestamp' %}\n              {{ try_cast_timestamp(quoted_column_name) }}\n            {% else %}\n              cast(nullif({{quoted_column_name}}, '') as {{ type }}) as {{quoted_column_name}}\n            {% endif %}\n            {%- if not loop.last -%}, {% endif -%}\n        {%- endfor %}\n    from\n        {{ tmp_relation }}\n  {% endset %}\n\n  -- create tmp table\n  {% call statement('_') -%}\n    {{ sql_tmp_table }}\n  {%- endcall -%}\n\n  -- create target table from tmp table\n  {% set sql_table = create_table_as(false, relation, sql)  %}\n  {% call statement('_') -%}\n    {{ sql_table }}\n  {%- endcall %}\n\n  -- drop tmp table\n  {{ drop_relation(tmp_relation) }}\n\n  -- delete csv file from s3\n  {% do adapter.delete_from_s3(tmp_s3_location) %}\n\n  {% if lf_tags_config is not none %}\n    {{ adapter.add_lf_tags(relation, lf_tags_config) }}\n  {% endif %}\n\n  {% if lf_grants is not none %}\n    {{ adapter.apply_lf_grants(relation, lf_grants) }}\n  {% endif %}\n\n  {{ return(sql_table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation", "macro.dbt_athena.try_cast_timestamp", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6953268, "supported_languages": null}, "macro.dbt_athena.athena__create_csv_table": {"name": "athena__create_csv_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_athena.athena__create_csv_table", "macro_sql": "{% macro athena__create_csv_table(model, agate_table) %}\n\n  {%- set seed_by_insert = config.get('seed_by_insert', False) | as_bool -%}\n\n  {%- if seed_by_insert -%}\n    {% do log('seed by insert...') %}\n    {%- set sql_table = create_csv_table_insert(model, agate_table) -%}\n  {%- else -%}\n    {% do log('seed by upload...') %}\n    {%- set sql_table = create_csv_table_upload(model, agate_table) -%}\n  {%- endif -%}\n\n  {{ return(sql_table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.create_csv_table_insert", "macro.dbt_athena.create_csv_table_upload"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.6983905, "supported_languages": null}, "macro.dbt_athena.athena__load_csv_rows": {"name": "athena__load_csv_rows", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_athena.athena__load_csv_rows", "macro_sql": "{% macro athena__load_csv_rows(model, agate_table) %}\n    {%- set seed_by_insert = config.get('seed_by_insert', False) | as_bool -%}\n  {%- if seed_by_insert %}\n    {{ default__load_csv_rows(model, agate_table) }}\n  {%- else -%}\n    select 1\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.701404, "supported_languages": null}, "macro.dbt_athena.athena__snapshot_hash_arguments": {"name": "athena__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_athena.athena__snapshot_hash_arguments", "macro_sql": "{% macro athena__snapshot_hash_arguments(args) -%}\n    to_hex(md5(to_utf8({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.721621, "supported_languages": null}, "macro.dbt_athena.hive_snapshot_merge_sql": {"name": "hive_snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_athena.hive_snapshot_merge_sql", "macro_sql": "{% macro hive_snapshot_merge_sql(target, source, insert_cols, table_type) -%}\n    {%- set target_relation = adapter.get_relation(database=target.database, schema=target.schema, identifier=target.identifier) -%}\n    {%- if target_relation is not none -%}\n      {% do adapter.drop_relation(target_relation) %}\n    {%- endif -%}\n\n    {% set sql -%}\n      select * from {{ source }};\n    {%- endset -%}\n\n    {{ create_table_as(False, target_relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7226207, "supported_languages": null}, "macro.dbt_athena.iceberg_snapshot_merge_sql": {"name": "iceberg_snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_athena.iceberg_snapshot_merge_sql", "macro_sql": "{% macro iceberg_snapshot_merge_sql(target, source, insert_cols) %}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n    {%- set src_columns = [] -%}\n    {%- for col in insert_cols -%}\n      {%- do src_columns.append('dbt_internal_source.' + col) -%}\n    {%- endfor -%}\n    {%- set src_cols_csv = src_columns | join(', ') -%}\n\n    merge into {{ target }} as dbt_internal_dest\n    using {{ source }} as dbt_internal_source\n    on dbt_internal_source.dbt_scd_id = dbt_internal_dest.dbt_scd_id\n\n    when matched\n     and dbt_internal_dest.dbt_valid_to is null\n     and dbt_internal_source.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = dbt_internal_source.dbt_valid_to\n\n    when not matched\n     and dbt_internal_source.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ src_cols_csv }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7246232, "supported_languages": null}, "macro.dbt_athena.hive_create_new_snapshot_table": {"name": "hive_create_new_snapshot_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_athena.hive_create_new_snapshot_table", "macro_sql": "{% macro hive_create_new_snapshot_table(target, source, insert_cols) %}\n    {%- set temp_relation = make_temp_relation(target, '__dbt_tmp_snapshot') -%}\n    {%- set preexisting_tmp_relation = load_cached_relation(temp_relation) -%}\n    {%- if preexisting_tmp_relation is not none -%}\n      {%- do adapter.drop_relation(preexisting_tmp_relation) -%}\n    {%- endif -%}\n\n    {# TODO: Add insert_cols #}\n    {%- set src_columns = [] -%}\n    {%- set dst_columns = [] -%}\n    {%- set updated_columns = [] -%}\n    {%- for col in insert_cols -%}\n      {%- do src_columns.append('dbt_internal_source.' + col) -%}\n      {%- do dst_columns.append('dbt_internal_dest.' + col) -%}\n      {%- if col.replace('\"', '') in ['dbt_valid_to'] -%}\n        {%- do updated_columns.append('dbt_internal_source.' + col) -%}\n      {%- else -%}\n        {%- do updated_columns.append('dbt_internal_dest.' + col) -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- set src_cols_csv = src_columns | join(', ') -%}\n    {%- set dst_cols_csv = dst_columns | join(', ') -%}\n    {%- set updated_cols_csv = updated_columns | join(', ') -%}\n\n    {%- set source_columns = adapter.get_columns_in_relation(source) -%}\n\n    {% set sql -%}\n      -- Unchanged rows\n      select {{ dst_cols_csv }}\n      from {{ target }} as dbt_internal_dest\n      left join {{ source }} as dbt_internal_source\n      on dbt_internal_source.dbt_scd_id = dbt_internal_dest.dbt_scd_id\n      where dbt_internal_source.dbt_scd_id is null\n\n      union all\n\n      -- Updated or deleted rows\n      select {{ updated_cols_csv }}\n      from {{ target }} as dbt_internal_dest\n      inner join {{ source }} as dbt_internal_source\n      on dbt_internal_source.dbt_scd_id = dbt_internal_dest.dbt_scd_id\n      where dbt_internal_dest.dbt_valid_to is null\n        and dbt_internal_source.dbt_change_type in ('update', 'delete')\n\n      union all\n\n      -- New rows\n      select {{ src_cols_csv }}\n      from {{ source }} as dbt_internal_source\n      left join {{ target }} as dbt_internal_dest\n      on dbt_internal_dest.dbt_scd_id = dbt_internal_source.dbt_scd_id\n      where dbt_internal_dest.dbt_scd_id is null\n\n    {%- endset -%}\n\n    {% call statement('create_new_snapshot_table') %}\n        {{ create_table_as(False, temp_relation, sql) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.load_cached_relation", "macro.dbt.replace", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7287443, "supported_languages": null}, "macro.dbt_athena.materialization_snapshot_athena": {"name": "materialization_snapshot_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_athena.materialization_snapshot_athena", "macro_sql": "{% materialization snapshot, adapter='athena' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set file_format = config.get('file_format', 'parquet') -%}\n  {%- set table_type = config.get('table_type', 'hive') -%}\n\n  {%- set lf_tags_config = config.get('lf_tags_config') -%}\n  {%- set lf_grants = config.get('lf_grants') -%}\n\n  {{ log('Checking if target table exists') }}\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_relation = make_temp_relation(target_relation) %}\n      {%- set preexisting_staging_relation = load_cached_relation(staging_relation) -%}\n      {%- if preexisting_staging_relation is not none -%}\n      {%- do adapter.drop_relation(preexisting_staging_relation) -%}\n      {%- endif -%}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n\n      {% if missing_columns %}\n        {% do alter_relation_add_columns(target_relation, missing_columns) %}\n      {% endif %}\n\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% if table_type == 'iceberg' %}\n          {% set final_sql = iceberg_snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns,\n             )\n          %}\n      {% else %}\n          {% set new_snapshot_table = hive_create_new_snapshot_table(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns,\n             )\n          %}\n          {% set final_sql = hive_snapshot_merge_sql(\n                target = target_relation,\n                source = new_snapshot_table\n             )\n          %}\n      {% endif %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% if staging_table is defined %}\n      {% do adapter.drop_relation(staging_table) %}\n  {% endif %}\n\n  {% if new_snapshot_table is defined %}\n      {% do adapter.drop_relation(new_snapshot_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {% if lf_tags_config is not none %}\n    {{ adapter.add_lf_tags(target_relation, lf_tags_config) }}\n  {% endif %}\n\n  {% if lf_grants is not none %}\n    {{ adapter.apply_lf_grants(target_relation, lf_grants) }}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.make_temp_relation", "macro.dbt.load_cached_relation", "macro.dbt.build_snapshot_staging_table", "macro.dbt_athena.alter_relation_add_columns", "macro.dbt_athena.iceberg_snapshot_merge_sql", "macro.dbt_athena.hive_create_new_snapshot_table", "macro.dbt_athena.hive_snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7406988, "supported_languages": ["sql"]}, "macro.dbt_athena.athena__any_value": {"name": "athena__any_value", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_athena.athena__any_value", "macro_sql": "{% macro athena__any_value(expression) -%}\n    arbitrary({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7406988, "supported_languages": null}, "macro.dbt_athena.athena__array_append": {"name": "athena__array_append", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt_athena.athena__array_append", "macro_sql": "{% macro athena__array_append(array, new_element) -%}\n    {{ array }} || {{ new_element }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7416992, "supported_languages": null}, "macro.dbt_athena.athena__array_concat": {"name": "athena__array_concat", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt_athena.athena__array_concat", "macro_sql": "{% macro athena__array_concat(array_1, array_2) -%}\n    {{ array_1 }} || {{ array_2 }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7416992, "supported_languages": null}, "macro.dbt_athena.athena__array_construct": {"name": "athena__array_construct", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_athena.athena__array_construct", "macro_sql": "{% macro athena__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    {{ safe_cast('array[]', 'array(' ~ data_type ~ ')') }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7426984, "supported_languages": null}, "macro.dbt_athena.athena__bool_or": {"name": "athena__bool_or", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt_athena.athena__bool_or", "macro_sql": "{% macro athena__bool_or(expression) -%}\n    bool_or({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7426984, "supported_languages": null}, "macro.dbt_athena.athena__type_float": {"name": "athena__type_float", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_float", "macro_sql": "\n\n{%- macro athena__type_float() -%}\n    DOUBLE\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.743717, "supported_languages": null}, "macro.dbt_athena.athena__type_numeric": {"name": "athena__type_numeric", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_numeric", "macro_sql": "{%- macro athena__type_numeric() -%}\n    DECIMAL(38,6)\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.743717, "supported_languages": null}, "macro.dbt_athena.athena__type_int": {"name": "athena__type_int", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_int", "macro_sql": "{%- macro athena__type_int() -%}\n    INTEGER\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.743717, "supported_languages": null}, "macro.dbt_athena.athena__type_string": {"name": "athena__type_string", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_string", "macro_sql": "{%- macro athena__type_string() -%}\n    VARCHAR\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7453449, "supported_languages": null}, "macro.dbt_athena.athena__dateadd": {"name": "athena__dateadd", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_athena.athena__dateadd", "macro_sql": "{% macro athena__dateadd(datepart, interval, from_date_or_timestamp) -%}\n    date_add('{{ datepart }}', {{ interval }}, {{ from_date_or_timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.746277, "supported_languages": null}, "macro.dbt_athena.athena__datediff": {"name": "athena__datediff", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_athena.athena__datediff", "macro_sql": "{% macro athena__datediff(first_date, second_date, datepart) -%}\n    {%- if datepart == 'year' -%}\n        (year(CAST({{ second_date }} AS TIMESTAMP)) - year(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'quarter' -%}\n        ({{ datediff(first_date, second_date, 'year') }} * 4) + quarter(CAST({{ second_date }} AS TIMESTAMP)) - quarter(CAST({{ first_date }} AS TIMESTAMP))\n    {%- elif datepart == 'month' -%}\n        ({{ datediff(first_date, second_date, 'year') }} * 12) + month(CAST({{ second_date }} AS TIMESTAMP)) - month(CAST({{ first_date }} AS TIMESTAMP))\n    {%- elif datepart == 'day' -%}\n        ((to_milliseconds((CAST(CAST({{ second_date }} AS TIMESTAMP) AS DATE) - CAST(CAST({{ first_date }} AS TIMESTAMP) AS DATE)))) / 86400000)\n    {%- elif datepart == 'week' -%}\n         ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when dow(CAST({{first_date}} AS TIMESTAMP)) <= dow(CAST({{second_date}} AS TIMESTAMP)) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {%- elif datepart == 'hour' -%}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + hour(CAST({{ second_date }} AS TIMESTAMP)) - hour(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'minute' -%}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + minute(CAST({{ second_date }} AS TIMESTAMP)) - minute(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'second' -%}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + second(CAST({{ second_date }} AS TIMESTAMP)) - second(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'millisecond' -%}\n        (to_milliseconds((CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP))))\n    {%- else -%}\n        {% if execute %}{{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in Athena: {!r}\".format(datepart)) }}{% endif %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7538912, "supported_languages": null}, "macro.dbt_athena.athena__date_trunc": {"name": "athena__date_trunc", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_athena.athena__date_trunc", "macro_sql": "{% macro athena__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7548883, "supported_languages": null}, "macro.dbt_athena.ddl_data_type": {"name": "ddl_data_type", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\ddl_dml_data_type.sql", "original_file_path": "macros\\utils\\ddl_dml_data_type.sql", "unique_id": "macro.dbt_athena.ddl_data_type", "macro_sql": "{% macro ddl_data_type(col_type) -%}\n    -- transform varchar\n  {% set re = modules.re %}\n  {% set data_type = re.sub('(?:varchar|character varying)(?:\\(\\d+\\))?', 'string', col_type) %}\n\n  -- transform array and map\n  {%- if 'array' in data_type or 'map' in data_type -%}\n    {% set data_type = data_type.replace('(', '<').replace(')', '>') -%}\n  {%- endif -%}\n\n  -- transform int\n  {%- if 'integer' in data_type -%}\n    {% set data_type = data_type.replace('integer', 'int') -%}\n  {%- endif -%}\n\n  {{ return(data_type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.758683, "supported_languages": null}, "macro.dbt_athena.dml_data_type": {"name": "dml_data_type", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\ddl_dml_data_type.sql", "original_file_path": "macros\\utils\\ddl_dml_data_type.sql", "unique_id": "macro.dbt_athena.dml_data_type", "macro_sql": "{% macro dml_data_type(col_type) -%}\n  {%- set re = modules.re -%}\n  -- transform int to integer\n  {%- set data_type = re.sub('\\bint\\b', 'integer', col_type) -%}\n  -- transform string to varchar because string does not work in DML\n  {%- set data_type = re.sub('string', 'varchar', data_type) -%}\n  -- transform float to real because float does not work in DML\n  {%- set data_type = re.sub('float', 'real', data_type) -%}\n  {{ return(data_type) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7606812, "supported_languages": null}, "macro.dbt_athena.athena__hash": {"name": "athena__hash", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_athena.athena__hash", "macro_sql": "{% macro athena__hash(field) -%}\n    lower(to_hex(md5(to_utf8(cast({{field}} as varchar)))))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.761687, "supported_languages": null}, "macro.dbt_athena.athena__right": {"name": "athena__right", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt_athena.athena__right", "macro_sql": "{% macro athena__right(string_text, length_expression) %}\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr({{ string_text }}, -1 * ({{ length_expression }}))\n    end\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7626834, "supported_languages": null}, "macro.dbt_athena.athena__safe_cast": {"name": "athena__safe_cast", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_athena.athena__safe_cast", "macro_sql": "{% macro athena__safe_cast(field, type) -%}\n    try_cast({{field}} as {{type}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7626834, "supported_languages": null}, "macro.dbt_athena.athena__current_timestamp": {"name": "athena__current_timestamp", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_athena.athena__current_timestamp", "macro_sql": "{% macro athena__current_timestamp() -%}\n  {{ cast_timestamp('now()') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.cast_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7636921, "supported_languages": null}, "macro.dbt_athena.cast_timestamp": {"name": "cast_timestamp", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_athena.cast_timestamp", "macro_sql": "{% macro cast_timestamp(timestamp_col) -%}\n  {%- set config = model.get('config', {}) -%}\n  {%- set table_type = config.get('table_type', 'glue') -%}\n  {%- if table_type == 'iceberg' -%}\n    cast({{ timestamp_col }} as timestamp(6))\n  {%- else -%}\n    cast({{ timestamp_col }} as timestamp)\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7656837, "supported_languages": null}, "macro.dbt_athena.end_of_time": {"name": "end_of_time", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_athena.end_of_time", "macro_sql": "{% macro end_of_time() -%}\n  {{ return(adapter.dispatch('end_of_time')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__end_of_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7656837, "supported_languages": null}, "macro.dbt_athena.athena__end_of_time": {"name": "athena__end_of_time", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_athena.athena__end_of_time", "macro_sql": "{% macro athena__end_of_time() -%}\n  cast('9999-01-01' AS timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7656837, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7717621, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7727625, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7727625, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.773758, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7747598, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7757583, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7757583, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7767594, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7778857, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.778912, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.779961, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7809315, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.783935, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.784925, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7859347, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7859347, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7899559, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7949874, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7959833, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7974913, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7980072, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.7980072, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.799034, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8010206, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.802021, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8030195, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8040204, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8050194, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8060188, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8070185, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8095205, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8110676, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8140755, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.81607, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.81607, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8170667, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.817577, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8206055, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8216014, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8216014, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8226013, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8226013, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8236063, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8246045, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8246045, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8256006, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8256006, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8277044, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8277044, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8291664, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8297462, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8317385, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8347435, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8410635, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8420634, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8420634, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8450708, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8471193, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8486915, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8497198, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8517199, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8537087, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8537087, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.854711, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8557086, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8557086, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8577468, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8592567, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8597925, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8618212, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8638191, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8648174, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.865814, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.86681, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8678331, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.868849, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.868849, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.868849, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.869865, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.869865, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8708637, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8708637, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8748589, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8799248, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.882934, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8839262, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8880198, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8900354, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.891034, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8930333, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8950386, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8960483, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8975642, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.8990142, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9000294, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9010289, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9020264, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.903032, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.904027, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9050233, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9060237, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9060237, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.907684, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9127383, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.91376, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9147415, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9147415, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.915736, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.919588, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9219248, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.924925, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9259202, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9288952, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9452791, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.946835, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9592261, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.963249, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9642441, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9677956, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.968883, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9708786, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.980904, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9848943, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9899843, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.9929793, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.997663, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547875.998683, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0006802, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.001679, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0026963, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0046778, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.005674, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.005674, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.007707, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.007707, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0091636, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0127296, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0137227, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.015729, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.016729, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0172427, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0197592, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0217562, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "original_file_path": "macros\\materializations\\models\\table\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0217562, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0237637, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0247564, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0257566, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0275974, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.02936, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.02936, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0307558, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0377674, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0427768, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0437868, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0453942, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0469606, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0486288, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0497615, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0518534, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0586824, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.069309, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.071767, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0727665, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.074775, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.075776, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.075776, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0767732, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0767732, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0788507, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0798864, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0808847, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0818722, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0879085, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.0979836, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1060128, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1060128, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1070147, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1075284, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1080396, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1080396, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1080396, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1110792, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1120796, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1130774, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1140702, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1291885, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.131662, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.132659, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.142729, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1437418, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1437418, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1452584, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1468089, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1468089, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.150399, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1553702, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1568985, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1579301, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1660266, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1675656, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.169585, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1746023, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1755805, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1790547, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1810637, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1830654, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.186067, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1870675, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.188617, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.188617, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1906114, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1906114, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1926215, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1946063, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1956072, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1976879, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1991184, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.1991184, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2001421, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2011414, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2021317, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2031507, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2061498, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.207151, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2076666, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2076666, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2076666, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2086797, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2086797, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2096794, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2106926, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2106926, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2116835, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2126808, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2126808, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2126808, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2136755, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2146754, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2156756, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2156756, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2171938, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2171938, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2177384, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2177384, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2192345, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2192345, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2197635, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2197635, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.220773, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.220773, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2217739, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2217739, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2227843, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2237864, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2247941, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2289104, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2309258, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2319412, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2319412, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2329395, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.233938, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2349362, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.235933, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.236927, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2377958, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.239088, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.239088, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2411013, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2411013, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2420979, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.243103, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2440994, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2451024, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2456174, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\r\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.248787, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\r\n\r\n{%- if start_date and end_date -%}\r\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\r\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\r\n\r\n{%- elif n_dateparts and datepart -%}\r\n\r\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\r\n{%- set end_date = dbt_date.tomorrow() -%}\r\n{%- endif -%}\r\n\r\nwith date_spine as\r\n(\r\n\r\n    {{ dbt_date.date_spine(\r\n        datepart=datepart,\r\n        start_date=start_date,\r\n        end_date=end_date,\r\n       )\r\n    }}\r\n\r\n)\r\nselect\r\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\r\nfrom\r\n    date_spine d\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2528927, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\r\n\r\n{%- if start_date and end_date -%}\r\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\r\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\r\n\r\n{%- elif n_dateparts and datepart -%}\r\n\r\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\r\n{%- set end_date = dbt_date.tomorrow() -%}\r\n{%- endif -%}\r\n\r\nwith date_spine as\r\n(\r\n\r\n    {{ dbt_date.date_spine(\r\n        datepart=datepart,\r\n        start_date=start_date,\r\n        end_date=end_date,\r\n       )\r\n    }}\r\n\r\n)\r\nselect\r\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\r\nfrom\r\n    date_spine d\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.255462, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\r\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2786736, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\r\nwith base_dates as (\r\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\r\n),\r\ndates_with_prior_year_dates as (\r\n\r\n    select\r\n        cast(d.date_day as date) as date_day,\r\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\r\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\r\n    from\r\n    \tbase_dates d\r\n\r\n)\r\nselect\r\n    d.date_day,\r\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\r\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\r\n    d.prior_year_date_day as prior_year_date_day,\r\n    d.prior_year_over_year_date_day,\r\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\r\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\r\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\r\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\r\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\r\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\r\n\r\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\r\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\r\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\r\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\r\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\r\n\r\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\r\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\r\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\r\n\r\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\r\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\r\n\r\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\r\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\r\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\r\n\r\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\r\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\r\n\r\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\r\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\r\n\r\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\r\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\r\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\r\n\r\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\r\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\r\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\r\nfrom\r\n    dates_with_prior_year_dates d\r\norder by 1\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.286026, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\r\nwith base_dates as (\r\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\r\n),\r\ndates_with_prior_year_dates as (\r\n\r\n    select\r\n        cast(d.date_day as date) as date_day,\r\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\r\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\r\n    from\r\n    \tbase_dates d\r\n\r\n)\r\nselect\r\n    d.date_day,\r\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\r\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\r\n    d.prior_year_date_day as prior_year_date_day,\r\n    d.prior_year_over_year_date_day,\r\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\r\n\r\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\r\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\r\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\r\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\r\n\r\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\r\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\r\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\r\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\r\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\r\n\r\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\r\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\r\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\r\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\r\n\r\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\r\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\r\n\r\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\r\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\r\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\r\n\r\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\r\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\r\n\r\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\r\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\r\n\r\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\r\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\r\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\r\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\r\n\r\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\r\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\r\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\r\nfrom\r\n    dates_with_prior_year_dates d\r\norder by 1\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.294561, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\r\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\r\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\r\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2986603, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\r\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\r\n    cast({{ column }} as {{ dbt.type_timestamp() }})\r\n)\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.2996752, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\r\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.300677, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\r\nfrom_utc_timestamp(\r\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\r\n        '{{ target_tz }}'\r\n        )\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3016944, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\r\ncast(\r\n    cast({{ column }} as {{ dbt.type_timestamp() }})\r\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\r\n)\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3026938, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\r\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3026938, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\r\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3046792, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\r\n    date_part('{{ datepart }}', {{  date }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3046792, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\r\n    extract({{ datepart }} from {{ date }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3057024, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\r\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3077242, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\r\n\r\n{%- macro default__day_name(date, short) -%}\r\n{%- set f = 'Dy' if short else 'Day' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3077242, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\r\n\r\n{%- macro snowflake__day_name(date, short) -%}\r\n    {%- if short -%}\r\n    dayname({{ date }})\r\n    {%- else -%}\r\n    -- long version not implemented on Snowflake so we're doing it manually :/\r\n    case dayname({{ date }})\r\n        when 'Mon' then 'Monday'\r\n        when 'Tue' then 'Tuesday'\r\n        when 'Wed' then 'Wednesday'\r\n        when 'Thu' then 'Thursday'\r\n        when 'Fri' then 'Friday'\r\n        when 'Sat' then 'Saturday'\r\n        when 'Sun' then 'Sunday'\r\n    end\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.308748, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\r\n\r\n{%- macro bigquery__day_name(date, short) -%}\r\n{%- set f = '%a' if short else '%A' -%}\r\n    format_date('{{ f }}', cast({{ date }} as date))\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3107388, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\r\n\r\n{%- macro postgres__day_name(date, short) -%}\r\n{# FM = Fill mode, which suppresses padding blanks #}\r\n{%- set f = 'FMDy' if short else 'FMDay' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.312737, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\r\n{{ dbt_date.date_part('day', date) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3137426, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\r\n\r\n{%- macro redshift__day_of_month(date) -%}\r\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3147469, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\r\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.320825, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\r\n\r\n{%- macro default__day_of_week(date, isoweek) -%}\r\n\r\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\r\n\r\n    {%- if isoweek -%}\r\n    case\r\n        -- Shift start of week from Sunday (0) to Monday (1)\r\n        when {{ dow }} = 0 then 7\r\n        else {{ dow }}\r\n    end\r\n    {%- else -%}\r\n    {{ dow }} + 1\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3228228, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\r\n\r\n{%- macro snowflake__day_of_week(date, isoweek) -%}\r\n\r\n    {%- if isoweek -%}\r\n        {%- set dow_part = 'dayofweekiso' -%}\r\n        {{ dbt_date.date_part(dow_part, date) }}\r\n    {%- else -%}\r\n        {%- set dow_part = 'dayofweek' -%}\r\n        case\r\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\r\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\r\n        end\r\n    {%- endif -%}\r\n\r\n\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3248274, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\r\n\r\n{%- macro bigquery__day_of_week(date, isoweek) -%}\r\n\r\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\r\n\r\n    {%- if isoweek -%}\r\n    case\r\n        -- Shift start of week from Sunday (1) to Monday (2)\r\n        when {{ dow }} = 1 then 7\r\n        else {{ dow }} - 1\r\n    end\r\n    {%- else -%}\r\n    {{ dow }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3258235, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\r\n\r\n\r\n{%- macro postgres__day_of_week(date, isoweek) -%}\r\n\r\n    {%- if isoweek -%}\r\n        {%- set dow_part = 'isodow' -%}\r\n        -- Monday(1) to Sunday (7)\r\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\r\n    {%- else -%}\r\n        {%- set dow_part = 'dow' -%}\r\n        -- Sunday(1) to Saturday (7)\r\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3309264, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\r\n\r\n\r\n{%- macro redshift__day_of_week(date, isoweek) -%}\r\n\r\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\r\n\r\n    {%- if isoweek -%}\r\n    case\r\n        -- Shift start of week from Sunday (0) to Monday (1)\r\n        when {{ dow }} = 0 then 7\r\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\r\n    end\r\n    {%- else -%}\r\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3359165, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\r\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3379745, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\r\n\r\n{%- macro default__day_of_year(date) -%}\r\n    {{ dbt_date.date_part('dayofyear', date) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3389964, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\r\n\r\n{%- macro postgres__day_of_year(date) -%}\r\n    {{ dbt_date.date_part('doy', date) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3389964, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\r\n\r\n{%- macro redshift__day_of_year(date) -%}\r\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.341008, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\r\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3491008, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\r\n    {%- if format != \"seconds\" -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n    to_timestamp({{ epochs }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3496797, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\r\n    {%- if format != \"seconds\" -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3516738, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\r\n    {%- if format == \"seconds\" -%}\r\n    {%- set scale = 0 -%}\r\n    {%- elif format == \"milliseconds\" -%}\r\n    {%- set scale = 3 -%}\r\n    {%- elif format == \"microseconds\" -%}\r\n    {%- set scale = 6 -%}\r\n    {%- else -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3546765, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\r\n    {%- if format == \"seconds\" -%}\r\n        timestamp_seconds({{ epochs }})\r\n    {%- elif format == \"milliseconds\" -%}\r\n        timestamp_millis({{ epochs }})\r\n    {%- elif format == \"microseconds\" -%}\r\n        timestamp_micros({{ epochs }})\r\n    {%- else -%}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\r\n        )\r\n    }}\r\n    {% endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3556776, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3577676, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\r\n{%- set dt = dbt_date.iso_week_start(date) -%}\r\n{{ dbt_date.n_days_away(6, dt) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3587885, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\r\n\r\n{%- macro default__iso_week_end(date) -%}\r\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3598034, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\r\n\r\n{%- macro snowflake__iso_week_end(date) -%}\r\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.360811, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.363807, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\r\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3648012, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\r\n\r\n{%- macro default__iso_week_of_year(date) -%}\r\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3648012, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\r\n\r\n{%- macro snowflake__iso_week_of_year(date) -%}\r\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3658042, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\r\n\r\n{%- macro postgres__iso_week_of_year(date) -%}\r\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\r\n{{ dbt_date._iso_week_of_year(date, 'week') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3658042, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.36794, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\r\ncast({{ dbt.date_trunc(week_type, date) }} as date)\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3693032, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\r\n\r\n{%- macro default__iso_week_start(date) -%}\r\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3699791, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\r\n\r\n{%- macro snowflake__iso_week_start(date) -%}\r\n{{ dbt_date._iso_week_start(date, 'week') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3699791, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\r\n\r\n{%- macro postgres__iso_week_start(date) -%}\r\n{{ dbt_date._iso_week_start(date, 'week') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.370984, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\r\n{{ dbt_date.n_months_ago(1, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.372991, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\r\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.374992, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\r\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3801074, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\r\n{{ dbt_date.n_weeks_ago(1, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3821094, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\r\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3850994, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\r\n\r\n{%- macro default__month_name(date, short) -%}\r\n{%- set f = 'MON' if short else 'MONTH' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.386105, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\r\n\r\n{%- macro bigquery__month_name(date, short) -%}\r\n{%- set f = '%b' if short else '%B' -%}\r\n    format_date('{{ f }}', cast({{ date }} as date))\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.387099, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\r\n\r\n{%- macro snowflake__month_name(date, short) -%}\r\n{%- set f = 'MON' if short else 'MMMM' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.388623, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\r\n\r\n{%- macro postgres__month_name(date, short) -%}\r\n{# FM = Fill mode, which suppresses padding blanks #}\r\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\r\n    to_char({{ date }}, '{{ f }}')\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.389031, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\r\n{{ dbt_date.n_months_away(1, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.390047, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\r\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3910484, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\r\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3920414, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\r\n{{ dbt_date.n_weeks_away(1, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3920414, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\r\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3930483, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{%- set n = n|int -%}\r\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3950462, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\r\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.396061, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt.date_trunc('month',\r\n    dbt.dateadd('month', -1 * n,\r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3985927, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt.date_trunc('month',\r\n    dbt.dateadd('month', n,\r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.3996127, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt.date_trunc('week',\r\n    dbt.dateadd('week', -1 * n,\r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4016058, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\r\n{%- set n = n|int -%}\r\n{{ dbt.date_trunc('week',\r\n    dbt.dateadd('week', n,\r\n        dbt_date.today(tz)\r\n        )\r\n    ) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4026082, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\r\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.404615, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\r\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4056067, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\r\ncast({{ dbt_date.now(tz) }} as date)\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4056067, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\r\n{{ dbt_date.n_days_away(1, date, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4076402, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\r\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4088516, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro default__to_unixtimestamp(timestamp) -%}\r\n    {{ dbt_date.date_part('epoch', timestamp) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4088516, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\r\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4098654, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\r\n\r\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\r\n    unix_seconds({{ timestamp }})\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4118714, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4138646, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\r\n{{ last_day(date, 'week') }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4138646, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\r\n\r\n{%- macro snowflake__week_end(date) -%}\r\n{%- set dt = dbt_date.week_start(date) -%}\r\n{{ dbt_date.n_days_away(6, dt) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4148686, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\r\n\r\n{%- macro postgres__week_end(date) -%}\r\n{%- set dt = dbt_date.week_start(date) -%}\r\n{{ dbt_date.n_days_away(6, dt) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.415869, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4189284, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\r\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4199364, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\r\n\r\n{%- macro postgres__week_of_year(date) -%}\r\n{# postgresql 'week' returns isoweek. Use to_char instead.\r\n   WW = the first week starts on the first day of the year #}\r\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4209304, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\r\n{%-set dt = date if date else dbt_date.today(tz) -%}\r\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4229298, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\r\ncast({{ dbt.date_trunc('week', date) }} as date)\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4239318, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\r\n\r\n{%- macro snowflake__week_start(date) -%}\r\n    {#\r\n        Get the day of week offset: e.g. if the date is a Sunday,\r\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\r\n    #}\r\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\r\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4249344, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\r\n\r\n{%- macro postgres__week_start(date) -%}\r\n-- Sunday as week start date\r\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4259355, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\r\n{{ dbt_date.n_days_ago(1, date, tz) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4277358, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\r\n{#\r\nThis macro requires you to pass in a ref to a date dimension, created via\r\ndbt_date.get_date_dimension()s\r\n#}\r\nwith fscl_year_dates_for_periods as (\r\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\r\n),\r\nfscl_year_w13 as (\r\n\r\n    select\r\n        f.*,\r\n        -- We count the weeks in a 13 week period\r\n        -- and separate the 4-5-4 week sequences\r\n        mod(cast(\r\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\r\n            ), 13) as w13_number,\r\n        -- Chop weeks into 13 week merch quarters\r\n        cast(\r\n            least(\r\n                floor((f.fiscal_week_of_year-1)/13.0)\r\n                , 3)\r\n            as {{ dbt.type_int() }}) as quarter_number\r\n    from\r\n        fscl_year_dates_for_periods f\r\n\r\n),\r\nfscl_periods as (\r\n\r\n    select\r\n        f.date_day,\r\n        f.fiscal_year_number,\r\n        f.week_start_date,\r\n        f.week_end_date,\r\n        f.fiscal_week_of_year,\r\n        case\r\n            -- we move week 53 into the 3rd period of the quarter\r\n            when f.fiscal_week_of_year = 53 then 3\r\n            when f.w13_number between 0 and 3 then 1\r\n            when f.w13_number between 4 and 8 then 2\r\n            when f.w13_number between 9 and 12 then 3\r\n        end as period_of_quarter,\r\n        f.quarter_number\r\n    from\r\n        fscl_year_w13 f\r\n\r\n),\r\nfscl_periods_quarters as (\r\n\r\n    select\r\n        f.*,\r\n        cast((\r\n            (f.quarter_number * 3) + f.period_of_quarter\r\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\r\n    from\r\n        fscl_periods f\r\n\r\n)\r\nselect\r\n    date_day,\r\n    fiscal_year_number,\r\n    week_start_date,\r\n    week_end_date,\r\n    fiscal_week_of_year,\r\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\r\n    fiscal_period_number,\r\n    quarter_number+1 as fiscal_quarter_number,\r\n    period_of_quarter as fiscal_period_of_quarter\r\nfrom\r\n    fscl_periods_quarters\r\norder by 1,2\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4307864, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\r\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.436786, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\r\n-- this gets all the dates within a fiscal year\r\n-- determined by the given year-end-month\r\n-- ending on the saturday closest to that month's end date\r\nwith date_dimension as (\r\n    select * from {{ dates }}\r\n),\r\nyear_month_end as (\r\n\r\n    select\r\n       d.year_number - {{ shift_year }} as fiscal_year_number,\r\n       d.month_end_date\r\n    from\r\n        date_dimension d\r\n    where\r\n        d.month_of_year = {{ year_end_month }}\r\n    group by 1,2\r\n\r\n),\r\nweeks as (\r\n\r\n    select\r\n        d.year_number,\r\n        d.month_of_year,\r\n        d.date_day as week_start_date,\r\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\r\n    from\r\n        date_dimension d\r\n    where\r\n        d.day_of_week = {{ week_start_day }}\r\n\r\n),\r\n-- get all the weeks that start in the month the year ends\r\nyear_week_ends as (\r\n\r\n    select\r\n        d.year_number - {{ shift_year }} as fiscal_year_number,\r\n        d.week_end_date\r\n    from\r\n        weeks d\r\n    where\r\n        d.month_of_year = {{ year_end_month }}\r\n    group by\r\n        1,2\r\n\r\n),\r\n-- then calculate which Saturday is closest to month end\r\nweeks_at_month_end as (\r\n\r\n    select\r\n        d.fiscal_year_number,\r\n        d.week_end_date,\r\n        m.month_end_date,\r\n        rank() over\r\n            (partition by d.fiscal_year_number\r\n                order by\r\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\r\n\r\n            ) as closest_to_month_end\r\n    from\r\n        year_week_ends d\r\n        join\r\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\r\n),\r\nfiscal_year_range as (\r\n\r\n    select\r\n        w.fiscal_year_number,\r\n        cast(\r\n            {{ dbt.dateadd('day', 1,\r\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\r\n            as date) as fiscal_year_start_date,\r\n        w.week_end_date as fiscal_year_end_date\r\n    from\r\n        weeks_at_month_end w\r\n    where\r\n        w.closest_to_month_end = 1\r\n\r\n),\r\nfiscal_year_dates as (\r\n\r\n    select\r\n        d.date_day,\r\n        m.fiscal_year_number,\r\n        m.fiscal_year_start_date,\r\n        m.fiscal_year_end_date,\r\n        w.week_start_date,\r\n        w.week_end_date,\r\n        -- we reset the weeks of the year starting with the merch year start date\r\n        dense_rank()\r\n            over(\r\n                partition by m.fiscal_year_number\r\n                order by w.week_start_date\r\n                ) as fiscal_week_of_year\r\n    from\r\n        date_dimension d\r\n        join\r\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\r\n        join\r\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\r\n\r\n)\r\nselect * from fiscal_year_dates order by 1\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4389834, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\r\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4409873, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\r\n    {%- call statement('get_intervals_between', fetch_result=True) %}\r\n\r\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_intervals_between') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values[0]) }}\r\n    {%- else -%}\r\n        {{ return(1) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.442978, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\r\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4449847, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\r\n\r\n\r\n{# call as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dbt.dateadd(week, 1, current_date)\"\r\n) #}\r\n\r\n\r\nwith rawdata as (\r\n\r\n    {{\r\n        dbt_date.generate_series(\r\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\r\n        )\r\n    }}\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        {{\r\n            dbt.dateadd(\r\n                datepart,\r\n                \"row_number() over (order by 1) - 1\",\r\n                start_date\r\n            )\r\n        }}\r\n    ) as date_{{datepart}}\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_{{datepart}} <= {{ end_date }}\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4463067, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\r\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4510396, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\r\n\r\n    {% if upper_bound <= 0 %}\r\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\r\n    {% endif %}\r\n\r\n    {% for _ in range(1, 100) %}\r\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\r\n    {% endfor %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4540405, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\r\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4540405, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\r\n\r\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    {% for i in range(n) %}\r\n    p{{i}}.generated_number * power(2, {{i}})\r\n    {% if not loop.last %} + {% endif %}\r\n    {% endfor %}\r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    {% for i in range(n) %}\r\n    p as p{{i}}\r\n    {% if not loop.last %} cross join {% endif %}\r\n    {% endfor %}\r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= {{upper_bound}}\r\n    order by generated_number\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4570367, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\r\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4575477, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\r\n\r\n    ln({{ x }})\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.458577, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\r\n\r\n    ln({{ x }})\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4595983, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\r\n\r\n    ln({{ x }})\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4605672, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\r\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.462576, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\r\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4655612, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\r\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\r\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4655612, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\r\n    percentile_cont({{ field }}, {{ quantile }})\r\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4670744, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\r\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4676042, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\r\n\r\n    rand()\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4686189, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\r\n\r\n    rand()\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4690592, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\r\n\r\n    uniform(0::float, 1::float, random())\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4690592, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\r\n\r\n    random()\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.470076, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\r\n\r\n    random()\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.471072, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\r\n\r\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\r\n        source_value, regexp, position, occurrence, is_raw, flags\r\n    ) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.474071, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\r\n{# unclear if other databases support raw strings or flags #}\r\n{% if is_raw or flags %}\r\n    {{ exceptions.warn(\r\n            \"is_raw and flags options are not supported for this adapter \"\r\n            ~ \"and are being ignored.\"\r\n    ) }}\r\n{% endif %}\r\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4760802, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\r\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\r\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\r\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4786274, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\r\n{% if flags %}\r\n    {{ exceptions.warn(\r\n            \"The flags option is not supported for BigQuery and is being ignored.\"\r\n    ) }}\r\n{% endif %}\r\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\r\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4816275, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\r\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\r\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1)\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4826305, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\r\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\r\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.485624, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\r\n{% for flag in flags %}\r\n    {% if flag not in alphabet %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\r\n    ) }}\r\n    {% endif %}\r\n{% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.487138, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\r\n                                                          column_name,\r\n                                                          value,\r\n                                                          group_by=None,\r\n                                                          row_condition=None\r\n                                                          ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }}) > {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4896848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\r\n                                                       column_name,\r\n                                                       value,\r\n                                                       group_by=None,\r\n                                                       row_condition=None\r\n                                                       ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }}) < {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4926848, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\r\n                                                column_name,\r\n                                                value,\r\n                                                group_by=None,\r\n                                                row_condition=None\r\n                                                ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }}) = {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4946725, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\r\n                                                                compare_model,\r\n                                                                column_name,\r\n                                                                compare_column_name,\r\n                                                                row_condition=None,\r\n                                                                compare_row_condition=None\r\n                                                                ) %}\r\n{%- set expression -%}\r\ncount(distinct {{ column_name }})\r\n{%- endset -%}\r\n{%- set compare_expression -%}\r\n{%- if compare_column_name -%}\r\ncount(distinct {{ compare_column_name }})\r\n{%- else -%}\r\n{{ expression }}\r\n{%- endif -%}\r\n{%- endset -%}\r\n{{ dbt_expectations.test_equal_expression(\r\n    model,\r\n    expression=expression,\r\n    compare_model=compare_model,\r\n    compare_expression=compare_expression,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition\r\n) }}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.4977307, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\r\n                                                     column_name,\r\n                                                     value_set,\r\n                                                     quote_values=True,\r\n                                                     row_condition=None\r\n                                                     ) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that are not in the set\r\n    select\r\n        v.value_field\r\n    from\r\n        all_values v\r\n        left join\r\n        unique_set_values s on v.value_field = s.value_field\r\n    where\r\n        s.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.502769, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\r\n                                                            value_set,\r\n                                                            quote_values=True,\r\n                                                            row_condition=None\r\n                                                            ) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n    -- values in set that are not in the list of values from the model\r\n    select\r\n        s.value_field\r\n    from\r\n        unique_set_values s\r\n        left join\r\n        all_values v on s.value_field = v.value_field\r\n    where\r\n        v.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.506767, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\r\n                                                            value_set,\r\n                                                            quote_values=True,\r\n                                                            row_condition=None\r\n                                                            ) %}\r\n\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as column_value\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        all_values v\r\n        full outer join\r\n        unique_set_values s on v.column_value = s.value_field\r\n    where\r\n        v.column_value is null or\r\n        s.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.51085, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\r\n                                                min_value=None,\r\n                                                max_value=None,\r\n                                                group_by=None,\r\n                                                row_condition=None,\r\n                                                strictly=False\r\n                                                ) %}\r\n{% set expression %}\r\nmax({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5138574, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) %}\r\n{% set expression %}\r\navg({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5168588, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.median(column_name) }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5199294, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) %}\r\n{% set expression %}\r\nmin({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5229309, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\r\n                                                       column_name,\r\n                                                       value_set,\r\n                                                       top_n,\r\n                                                       quote_values=True,\r\n                                                       data_type=\"decimal\",\r\n                                                       row_condition=None\r\n                                                       ) -%}\r\n\r\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\r\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\r\n        ) }}\r\n\r\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5276103, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\r\n                                                                      column_name,\r\n                                                                      value_set,\r\n                                                                      top_n,\r\n                                                                      quote_values,\r\n                                                                      data_type,\r\n                                                                      row_condition\r\n                                                                      ) %}\r\n\r\nwith value_counts as (\r\n\r\n    select\r\n        {% if quote_values -%}\r\n        {{ column_name }}\r\n        {%- else -%}\r\n        cast({{ column_name }} as {{ data_type }})\r\n        {%- endif %} as value_field,\r\n        count(*) as value_count\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n    group by {% if quote_values -%}\r\n                {{ column_name }}\r\n            {%- else -%}\r\n                cast({{ column_name }} as {{ data_type }})\r\n            {%- endif %}\r\n\r\n),\r\nvalue_counts_ranked as (\r\n\r\n    select\r\n        *,\r\n        row_number() over(order by value_count desc) as value_count_rank\r\n    from\r\n        value_counts\r\n\r\n),\r\nvalue_count_top_n as (\r\n\r\n    select\r\n        value_field\r\n    from\r\n        value_counts_ranked\r\n    where\r\n        value_count_rank = {{ top_n }}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        '{{ value }}'\r\n        {%- else -%}\r\n        cast({{ value }} as {{ data_type }})\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n\r\n),\r\nunique_set_values as (\r\n\r\n    select distinct value_field\r\n    from\r\n        set_values\r\n\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that are not in the set\r\n    select\r\n        value_field\r\n    from\r\n        value_count_top_n\r\n    where\r\n        value_field not in (select value_field from unique_set_values)\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.53465, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\r\n                                                            min_value=None,\r\n                                                            max_value=None,\r\n                                                            group_by=None,\r\n                                                            row_condition=None,\r\n                                                            strictly=False\r\n                                                            ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.537753, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\r\n                                                            quantile,\r\n                                                            min_value=None,\r\n                                                            max_value=None,\r\n                                                            group_by=None,\r\n                                                            row_condition=None,\r\n                                                            strictly=False\r\n                                                            ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5448098, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\r\n                                                    min_value=None,\r\n                                                    max_value=None,\r\n                                                    group_by=None,\r\n                                                    row_condition=None,\r\n                                                    strictly=False\r\n                                                    ) -%}\r\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\r\n                                                    model, column_name,\r\n                                                    min_value,\r\n                                                    max_value,\r\n                                                    group_by,\r\n                                                    row_condition,\r\n                                                    strictly\r\n                                                    ) }}\r\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5490384, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\r\n                                                    model, column_name,\r\n                                                    min_value,\r\n                                                    max_value,\r\n                                                    group_by,\r\n                                                    row_condition,\r\n                                                    strictly\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\nstddev({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.551038, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\r\n                                                min_value=None,\r\n                                                max_value=None,\r\n                                                group_by=None,\r\n                                                row_condition=None,\r\n                                                strictly=False\r\n                                                ) %}\r\n{% set expression %}\r\nsum({{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5550425, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\r\n                                                            min_value=None,\r\n                                                            max_value=None,\r\n                                                            group_by=None,\r\n                                                            row_condition=None,\r\n                                                            strictly=False\r\n                                                            ) %}\r\n{% set expression %}\r\ncount(distinct {{ column_name }})\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.558573, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\r\n                                                   min_value=None,\r\n                                                   max_value=None,\r\n                                                   row_condition=None,\r\n                                                   strictly=False\r\n                                                   ) %}\r\n\r\n{% set expression %}\r\n{{ column_name }}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.560035, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\r\n                                                   sort_column=None,\r\n                                                   strictly=True,\r\n                                                   row_condition=None,\r\n                                                   group_by=None) %}\r\n\r\n{%- set sort_column = column_name if not sort_column else sort_column -%}\r\n{%- set operator = \"<\" if strictly else \"<=\" %}\r\nwith all_values as (\r\n\r\n    select\r\n        {{ sort_column }} as sort_column,\r\n        {%- if group_by -%}\r\n        {{ group_by | join(\", \") }},\r\n        {%- endif %}\r\n        {{ column_name }} as value_field\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nadd_lag_values as (\r\n\r\n    select\r\n        sort_column,\r\n        value_field,\r\n        lag(value_field) over\r\n            {%- if not group_by -%}\r\n                (order by sort_column)\r\n            {%- else -%}\r\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\r\n            {%- endif  %} as value_field_lag\r\n    from\r\n        all_values\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        add_lag_values\r\n    where\r\n        value_field_lag is not null\r\n        and\r\n        not (value_field {{ operator }} value_field_lag)\r\n\r\n)\r\nselect *\r\nfrom validation_errors\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.564042, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\r\n                                                   sort_column=None,\r\n                                                   strictly=True,\r\n                                                   row_condition=None,\r\n                                                   group_by=None) %}\r\n\r\n{%- set sort_column = column_name if not sort_column else sort_column -%}\r\n{%- set operator = \">\" if strictly else \">=\" -%}\r\nwith all_values as (\r\n\r\n    select\r\n        {{ sort_column }} as sort_column,\r\n        {%- if group_by -%}\r\n        {{ group_by | join(\", \") }},\r\n        {%- endif %}\r\n        {{ column_name }} as value_field\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nadd_lag_values as (\r\n\r\n    select\r\n        sort_column,\r\n        {%- if group_by -%}\r\n        {{ group_by | join(\", \") }},\r\n        {%- endif %}\r\n        value_field,\r\n        lag(value_field) over\r\n            {%- if not group_by -%}\r\n                (order by sort_column)\r\n            {%- else -%}\r\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\r\n            {%- endif  %} as value_field_lag\r\n    from\r\n        all_values\r\n\r\n),\r\nvalidation_errors as (\r\n    select\r\n        *\r\n    from\r\n        add_lag_values\r\n    where\r\n        value_field_lag is not null\r\n        and\r\n        not (value_field {{ operator }} value_field_lag)\r\n\r\n)\r\nselect *\r\nfrom validation_errors\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5675755, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\r\n                                                   value_set,\r\n                                                   quote_values=True,\r\n                                                   row_condition=None\r\n                                                   ) %}\r\n\r\nwith all_values as (\r\n\r\n    select\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        cast('{{ value }}' as {{ dbt.type_string() }})\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that are not in the set\r\n    select\r\n        v.value_field\r\n    from\r\n        all_values v\r\n        left join\r\n        set_values s on v.value_field = s.value_field\r\n    where\r\n        s.value_field is null\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.572597, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\r\n{%- if execute -%}\r\n\r\n    {%- set column_name = column_name | upper -%}\r\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\r\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\r\n    with relation_columns as (\r\n\r\n        {% for column in columns_in_relation %}\r\n        select\r\n            cast('{{ column.name | upper }}' as {{ dbt.type_string() }}) as relation_column,\r\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    test_data as (\r\n\r\n        select\r\n            *\r\n        from\r\n            relation_columns\r\n        where\r\n            relation_column = '{{ column_name }}'\r\n            and\r\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\r\n\r\n    )\r\n    select *\r\n    from test_data\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5755985, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\r\n\r\n{% set expression = column_name ~ \" is null\" %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5771196, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\r\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5776558, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\r\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5786784, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\r\n\r\nwith test_data as (\r\n\r\n    select\r\n        distinct {{ column_name }} as distinct_values\r\n    from\r\n        {{ model }}\r\n\r\n ),\r\n {% if display_inconsistent_columns %}\r\n validation_errors as (\r\n\r\n    select\r\n        lower(distinct_values) as inconsistent_columns,\r\n        count(distinct_values) as set_count_case_insensitive\r\n    from\r\n        test_data\r\n    group by 1\r\n    having\r\n        count(distinct_values) > 1\r\n\r\n )\r\n select * from validation_errors\r\n {% else %}\r\n validation_errors as (\r\n\r\n    select\r\n        count(1) as set_count,\r\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\r\n    from\r\n        test_data\r\n\r\n )\r\n select *\r\n from\r\n    validation_errors\r\n where\r\n    set_count != set_count_case_insensitive\r\n {% endif %}\r\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5796955, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\r\n                                                   value_set,\r\n                                                   quote_values=True,\r\n                                                   row_condition=None\r\n                                                   ) %}\r\n\r\nwith all_values as (\r\n\r\n    select\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n\r\n),\r\nset_values as (\r\n\r\n    {% for value in value_set -%}\r\n    select\r\n        {% if quote_values -%}\r\n        cast('{{ value }}' as {{ dbt.type_string() }})\r\n        {%- else -%}\r\n        {{ value }}\r\n        {%- endif %} as value_field\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n),\r\nvalidation_errors as (\r\n    -- values from the model that match the set\r\n    select\r\n        v.value_field\r\n    from\r\n        all_values v\r\n        join\r\n        set_values s on v.value_field = s.value_field\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5827024, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\r\n\r\n{% set expression = column_name ~ \" is not null\" %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.583699, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\r\n\r\n{%- if take_logs %}\r\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\r\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\r\n{%- else -%}\r\ncoalesce({{ metric_column }}, 0)\r\n{%- endif %}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.591719, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\r\n                                  column_name,\r\n                                  date_column_name,\r\n                                  group_by=None,\r\n                                  period='day',\r\n                                  lookback_periods=1,\r\n                                  trend_periods=7,\r\n                                  test_periods=14,\r\n                                  sigma_threshold=3,\r\n                                  sigma_threshold_upper=None,\r\n                                  sigma_threshold_lower=None,\r\n                                  take_diffs=true,\r\n                                  take_logs=true\r\n                                ) -%}\r\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\r\n                                  column_name,\r\n                                  date_column_name,\r\n                                  group_by,\r\n                                  period,\r\n                                  lookback_periods,\r\n                                  trend_periods,\r\n                                  test_periods,\r\n                                  sigma_threshold,\r\n                                  sigma_threshold_upper,\r\n                                  sigma_threshold_lower,\r\n                                  take_diffs,\r\n                                  take_logs\r\n                                ) }}\r\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.5937319, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\r\n                                  column_name,\r\n                                  date_column_name,\r\n                                  group_by,\r\n                                  period,\r\n                                  lookback_periods,\r\n                                  trend_periods,\r\n                                  test_periods,\r\n                                  sigma_threshold,\r\n                                  sigma_threshold_upper,\r\n                                  sigma_threshold_lower,\r\n                                  take_diffs,\r\n                                  take_logs\r\n                                ) %}\r\n\r\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\r\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\r\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\r\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\r\n\r\nwith metric_values as (\r\n\r\n    with grouped_metric_values as (\r\n\r\n        select\r\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\r\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\r\n            sum({{ column_name }}) as agg_metric_value\r\n        from\r\n            {{ model }}\r\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\r\n\r\n    )\r\n    {%- if take_diffs %}\r\n    , grouped_metric_values_with_priors as (\r\n\r\n        select\r\n            *,\r\n            lag(agg_metric_value, {{ lookback_periods }}) over(\r\n                {{ partition_by }}\r\n                order by metric_period) as prior_agg_metric_value\r\n    from\r\n        grouped_metric_values d\r\n\r\n    )\r\n    select\r\n        *,\r\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\r\n        -\r\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\r\n        as metric_test_value\r\n    from\r\n        grouped_metric_values_with_priors d\r\n\r\n    {%- else %}\r\n\r\n    select\r\n        *,\r\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\r\n        as metric_test_value\r\n    from\r\n        grouped_metric_values\r\n\r\n    {%- endif %}\r\n\r\n),\r\nmetric_moving_calcs as (\r\n\r\n    select\r\n        *,\r\n        avg(metric_test_value)\r\n            over({{ partition_by }}\r\n                    order by metric_period rows\r\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\r\n        stddev(metric_test_value)\r\n            over({{ partition_by }}\r\n                    order by metric_period rows\r\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\r\n    from\r\n        metric_values\r\n\r\n),\r\nmetric_sigma as (\r\n\r\n    select\r\n        *,\r\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\r\n        (metric_test_value - metric_test_rolling_average)/\r\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\r\n    from\r\n        metric_moving_calcs\r\n\r\n)\r\nselect\r\n    *\r\nfrom\r\n    metric_sigma\r\nwhere\r\n\r\n    metric_period >= cast(\r\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\r\n            as {{ dbt_expectations.type_timestamp() }})\r\n    and\r\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\r\n    and\r\n\r\n    not (\r\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\r\n        metric_test_sigma <= {{ sigma_threshold_upper }}\r\n    )\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.598783, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\r\n                                  column_name,\r\n                                  group_by=None,\r\n                                  sigma_threshold=3\r\n                                ) -%}\r\n    {{\r\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\r\n            model, column_name, group_by, sigma_threshold\r\n        )\r\n    }}\r\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6007872, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\r\n                                  column_name,\r\n                                  group_by,\r\n                                  sigma_threshold\r\n                                ) %}\r\n\r\nwith metric_values as (\r\n\r\n    select\r\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\r\n        sum({{ column_name }}) as {{ column_name }}\r\n    from\r\n        {{ model }}\r\n    {% if group_by -%}\r\n    {{  dbt_expectations.group_by(group_by | length) }}\r\n    {%- endif %}\r\n\r\n),\r\nmetric_values_with_statistics as (\r\n\r\n    select\r\n        *,\r\n        avg({{ column_name }}) over() as {{ column_name }}_average,\r\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\r\n    from\r\n        metric_values\r\n\r\n),\r\nmetric_values_z_scores as (\r\n\r\n    select\r\n        *,\r\n        ({{ column_name }} - {{ column_name }}_average)/\r\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\r\n    from\r\n        metric_values_with_statistics\r\n\r\n)\r\nselect\r\n    *\r\nfrom\r\n    metric_values_z_scores\r\nwhere\r\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6027923, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\r\n                                                            date_col,\r\n                                                            date_part=\"day\",\r\n                                                            interval=None,\r\n                                                            row_condition=None,\r\n                                                            exclusion_condition=None,\r\n                                                            test_start_date=None,\r\n                                                            test_end_date=None) -%}\r\n{% if not execute %}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n{% if not test_start_date or not test_end_date %}\r\n    {% set sql %}\r\n\r\n        select\r\n            min({{ date_col }}) as start_{{ date_part }},\r\n            max({{ date_col }}) as end_{{ date_part }}\r\n        from {{ model }}\r\n        {% if row_condition %}\r\n        where {{ row_condition }}\r\n        {% endif %}\r\n\r\n    {% endset %}\r\n\r\n    {%- set dr = run_query(sql) -%}\r\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\r\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\r\n\r\n{% endif %}\r\n\r\n{% if not test_start_date %}\r\n{% set start_date = db_start_date %}\r\n{% else %}\r\n{% set start_date = test_start_date %}\r\n{% endif %}\r\n\r\n\r\n{% if not test_end_date %}\r\n{% set end_date = db_end_date %}\r\n{% else %}\r\n{% set end_date = test_end_date %}\r\n{% endif %}\r\nwith base_dates as (\r\n\r\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\r\n    {% if interval %}\r\n    {#\r\n        Filter the date spine created above down to the interval granularity using a modulo operation.\r\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\r\n        e.g. for 2-day interval from a starting Jan 1, 2020:\r\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\r\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\r\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\r\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\r\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\r\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\r\n    #}\r\n    where mod(\r\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\r\n            cast({{interval}} as {{ dbt.type_int() }})\r\n        ) = 0\r\n    {% endif %}\r\n\r\n),\r\nmodel_data as (\r\n\r\n    select\r\n    {% if not interval %}\r\n\r\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\r\n\r\n    {% else %}\r\n        {#\r\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\r\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\r\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\r\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\r\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\r\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\r\n                all of which align with records from the interval-date spine\r\n        #}\r\n        {{ dbt.dateadd(\r\n            date_part,\r\n            \"mod(\r\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\r\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\r\n            ) * (-1)\",\r\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\r\n        )}} as date_{{ date_part }},\r\n\r\n    {% endif %}\r\n\r\n        count(*) as row_cnt\r\n    from\r\n        {{ model }} f\r\n    {% if row_condition %}\r\n    where {{ row_condition }}\r\n    {% endif %}\r\n    group by\r\n        date_{{date_part}}\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\r\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\r\n        coalesce(f.row_cnt, 0) as row_cnt\r\n    from\r\n        base_dates d\r\n        left join\r\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\r\n)\r\nselect\r\n    *\r\nfrom final\r\nwhere row_cnt = 0\r\n{% if exclusion_condition %}\r\n  and {{ exclusion_condition }}\r\n{% endif %}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6169229, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\r\n                                                                column_A,\r\n                                                                column_B,\r\n                                                                or_equal=False,\r\n                                                                row_condition=None\r\n                                                                ) %}\r\n\r\n{% set operator = \">=\" if or_equal else \">\" %}\r\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.621984, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\r\n                                                        column_A,\r\n                                                        column_B,\r\n                                                        row_condition=None\r\n                                                        ) %}\r\n\r\n{% set operator = \"=\" %}\r\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6229854, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\r\n                                                        column_A,\r\n                                                        column_B,\r\n                                                        value_pairs_set,\r\n                                                        row_condition=None\r\n                                                        ) %}\r\n\r\n{% set expression %}\r\n{% for pair in value_pairs_set %}\r\n{%- if (pair | length) == 2 %}\r\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\r\n{% else %}\r\n{{ exceptions.raise_compiler_error(\r\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\r\n        Got: '\" ~ pair ~ \"'.'\"\r\n    ) }}\r\n{% endif %}\r\n{% endfor %}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.626987, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\r\n                                                column_list,\r\n                                                quote_columns=False,\r\n                                                ignore_row_if=\"all_values_are_missing\",\r\n                                                row_condition=None\r\n                                                ) %}\r\n{% if not column_list %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set columns=column_list %}\r\n{% elif quote_columns %}\r\n    {%- set columns=[] %}\r\n        {% for column in column_list -%}\r\n            {% set columns = columns.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set row_condition_ext -%}\r\n\r\n    {%- if row_condition  %}\r\n    {{ row_condition }} and\r\n    {% endif -%}\r\n\r\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\r\n\r\n{%- endset -%}\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    from {{ model }}\r\n    where\r\n        1=1\r\n    {%- if row_condition_ext %}\r\n        and {{ row_condition_ext }}\r\n    {% endif %}\r\n    group by\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    having count(*) > 1\r\n\r\n)\r\nselect * from validation_errors\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6356235, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\r\n                                                column_list,\r\n                                                sum_total,\r\n                                                group_by=None,\r\n                                                row_condition=None\r\n                                                ) %}\r\n\r\n{% set expression %}\r\n{% for column in column_list %}\r\nsum({{ column }}){% if not loop.last %} + {% endif %}\r\n{% endfor %} = {{ sum_total }}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=group_by,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6387136, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\r\n                                                    column_list,\r\n                                                    quote_columns=False,\r\n                                                    ignore_row_if=\"all_values_are_missing\",\r\n                                                    row_condition=None\r\n                                                    )  -%}\r\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\r\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6427503, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\r\n                                                    column_list,\r\n                                                    quote_columns,\r\n                                                    ignore_row_if,\r\n                                                    row_condition\r\n                                                    ) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set columns=column_list %}\r\n{% elif quote_columns %}\r\n    {%- set columns=[] %}\r\n        {% for column in column_list -%}\r\n            {% set columns = columns.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set row_condition_ext -%}\r\n\r\n    {%- if row_condition  %}\r\n    {{ row_condition }} and\r\n    {% endif -%}\r\n\r\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\r\n\r\n{%- endset -%}\r\n\r\nwith column_values as (\r\n\r\n    select\r\n        row_number() over(order by 1) as row_index,\r\n        {% for column in columns -%}\r\n        {{ column }}{% if not loop.last %},{% endif %}\r\n        {%- endfor %}\r\n    from {{ model }}\r\n    where\r\n        1=1\r\n    {%- if row_condition_ext %}\r\n        and {{ row_condition_ext }}\r\n    {% endif %}\r\n\r\n),\r\nunpivot_columns as (\r\n\r\n    {% for column in columns %}\r\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\r\n    {% if not loop.last %}union all{% endif %}\r\n    {% endfor %}\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        row_index,\r\n        count(distinct column_value) as column_values\r\n    from unpivot_columns\r\n    group by 1\r\n    having count(distinct column_value) < {{ columns | length }}\r\n\r\n)\r\nselect * from validation_errors\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6479013, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\r\n                                                    like_pattern,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6498828, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\r\n                                                    like_pattern_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n    {% for like_pattern in like_pattern_list %}\r\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\r\n    {%- if not loop.last %}\r\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\r\n    {% endif -%}\r\n    {% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6528842, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\r\n                                                    regex,\r\n                                                    row_condition=None,\r\n                                                    is_raw=False,\r\n                                                    flags=\"\"\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6558795, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\r\n                                                    regex_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None,\r\n                                                    is_raw=False,\r\n                                                    flags=\"\"\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n    {% for regex in regex_list %}\r\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\r\n    {%- if not loop.last %}\r\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\r\n    {% endif -%}\r\n    {% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.660918, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\r\n                                                    like_pattern,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6629238, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\r\n                                                    like_pattern_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n    {% for like_pattern in like_pattern_list %}\r\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\r\n    {%- if not loop.last %}\r\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\r\n    {% endif -%}\r\n    {% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6659207, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\r\n                                                    regex,\r\n                                                    row_condition=None,\r\n                                                    is_raw=False,\r\n                                                    flags=\"\"\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6678913, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\r\n                                                    regex_list,\r\n                                                    match_on=\"any\",\r\n                                                    row_condition=None,\r\n                                                    is_raw=False,\r\n                                                    flags=\"\"\r\n                                                    ) %}\r\n\r\n{% set expression %}\r\n{% for regex in regex_list %}\r\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\r\n{%- if not loop.last %}\r\n{{ \" and \" if match_on == \"all\" else \" or \"}}\r\n{% endif -%}\r\n{% endfor %}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.671925, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\r\n                                                         min_value=None,\r\n                                                         max_value=None,\r\n                                                         row_condition=None,\r\n                                                         strictly=False\r\n                                                      ) %}\r\n{% set expression %}\r\n{{ dbt.length(column_name) }}\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_between(model,\r\n                                        expression=expression,\r\n                                        min_value=min_value,\r\n                                        max_value=max_value,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition,\r\n                                        strictly=strictly\r\n                                        ) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6739259, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\r\n                                                    value,\r\n                                                    row_condition=None\r\n                                                    ) %}\r\n\r\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression,\r\n                                        group_by_columns=None,\r\n                                        row_condition=row_condition\r\n                                        )\r\n                                        }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6749275, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\r\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6759288, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n\r\n    {%- set column_name = column_name | map(transform) | join -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n\r\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\r\n\r\n    {%- if column_index -%}\r\n\r\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\r\n\r\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\r\n\r\n    {%- else -%}\r\n\r\n        {%- set column_index_matches = true -%}\r\n\r\n    {%- endif %}\r\n\r\n    with test_data as (\r\n\r\n        select\r\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\r\n            {{ matching_column_index }} as matching_column_index,\r\n            {{ column_index_matches }} as column_index_matches\r\n\r\n    )\r\n    select *\r\n    from test_data\r\n    where\r\n        not(matching_column_index >= 0 and column_index_matches)\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6806557, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\r\n                                                        group_by,\r\n                                                        timestamp_column,\r\n                                                        datepart,\r\n                                                        interval,\r\n                                                        row_condition=None) %}\r\n\r\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\r\n                                                                                                group_by,\r\n                                                                                                timestamp_column,\r\n                                                                                                datepart,\r\n                                                                                                interval,\r\n                                                                                                row_condition) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6856608, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\r\n                                                                        group_by,\r\n                                                                        timestamp_column,\r\n                                                                        datepart,\r\n                                                                        interval,\r\n                                                                        row_condition) %}\r\nwith latest_grouped_timestamps as (\r\n\r\n    select\r\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\r\n        max(1) as join_key,\r\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\r\n    from\r\n        {{ model }}\r\n    where\r\n        -- to exclude erroneous future dates\r\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\r\n        {% if row_condition %}\r\n        and {{ row_condition }}\r\n        {% endif %}\r\n\r\n    {% if group_by -%}\r\n    {{  dbt_expectations.group_by(group_by | length) }}\r\n    {%- endif %}\r\n),\r\ntotal_row_counts as (\r\n\r\n    select\r\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\r\n        max(1) as join_key,\r\n        count(*) as row_count\r\n    from\r\n        latest_grouped_timestamps\r\n    {% if group_by -%}\r\n    {{  dbt_expectations.group_by(group_by | length) }}\r\n    {%- endif %}\r\n\r\n\r\n),\r\noutdated_grouped_timestamps as (\r\n\r\n    select *\r\n    from\r\n        latest_grouped_timestamps\r\n    where\r\n        -- are the max timestamps per group older than the specified cutoff?\r\n        latest_timestamp_column <\r\n            cast(\r\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\r\n                as {{ dbt_expectations.type_timestamp() }}\r\n            )\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        r.row_count,\r\n        t.*\r\n    from\r\n        total_row_counts r\r\n        left join\r\n        outdated_grouped_timestamps t\r\n        on\r\n            {% for g in group_by %}\r\n            r.{{ g }} = t.{{ g }} and\r\n            {% endfor %}\r\n            r.join_key = t.join_key\r\n    where\r\n        -- fail if either no rows were returned due to row_condition,\r\n        -- or the recency test returned failed rows\r\n        r.row_count = 0\r\n        or\r\n        t.join_key is not null\r\n\r\n)\r\nselect * from validation_errors\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6891103, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\r\n                                                column_name,\r\n                                                datepart,\r\n                                                interval,\r\n                                                row_condition=None) %}\r\n\r\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\r\n                                                                                        column_name,\r\n                                                                                        datepart,\r\n                                                                                        interval,\r\n                                                                                        row_condition) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.692768, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\r\n{%- set default_start_date = '1970-01-01' -%}\r\nwith max_recency as (\r\n\r\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\r\n    from\r\n        {{ model }}\r\n    where\r\n        -- to exclude erroneous future dates\r\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\r\n        {% if row_condition %}\r\n        and {{ row_condition }}\r\n        {% endif %}\r\n)\r\nselect\r\n    *\r\nfrom\r\n    max_recency\r\nwhere\r\n    -- if the row_condition excludes all rows, we need to compare against a default date\r\n    -- to avoid false negatives\r\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\r\n        <\r\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6957693, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\r\n                                                expression,\r\n                                                compare_model,\r\n                                                compare_expression=None,\r\n                                                group_by=None,\r\n                                                compare_group_by=None,\r\n                                                row_condition=None,\r\n                                                compare_row_condition=None,\r\n                                                tolerance=0.0,\r\n                                                tolerance_percent=None\r\n                                                ) -%}\r\n\r\n\r\n{{ dbt_expectations.test_equal_expression(\r\n    model,\r\n    expression=expression,\r\n    compare_model=compare_model,\r\n    compare_expression=compare_expression,\r\n    group_by=group_by,\r\n    compare_group_by=compare_group_by,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition,\r\n    tolerance=tolerance,\r\n    tolerance_percent=tolerance_percent\r\n) }}\r\n\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.6977975, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    select *\r\n    from\r\n        input_columns i\r\n        left join\r\n        relation_columns r on r.relation_column = i.input_column\r\n    where\r\n        -- catch any column in input list that is not in the list of table columns\r\n        r.relation_column is null\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7018123, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select\r\n            {{ loop.index }} as relation_column_idx,\r\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select\r\n            {{ loop.index }} as input_column_idx,\r\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    select *\r\n    from\r\n        relation_columns r\r\n        full outer join\r\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\r\n    where\r\n        -- catch any column in input list that is not in the sequence of table columns\r\n        -- or any table column that is not in the input sequence\r\n        r.relation_column is null or\r\n        i.input_column is null\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7058098, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    select *\r\n    from\r\n        relation_columns r\r\n        full outer join\r\n        input_columns i on r.relation_column = i.input_column\r\n    where\r\n        -- catch any column in input list that is not in the list of table columns\r\n        -- or any table column that is not in the input list\r\n        r.relation_column is null or\r\n        i.input_column is null\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7088487, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\r\n{%- if execute -%}\r\n    {%- set column_list = column_list | map(transform) | list -%}\r\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\r\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\r\n    with relation_columns as (\r\n\r\n        {% for col_name in relation_column_names %}\r\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    ),\r\n    input_columns as (\r\n\r\n        {% for col_name in column_list %}\r\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\r\n        {% if not loop.last %}union all{% endif %}\r\n        {% endfor %}\r\n    )\r\n    -- catch any column in input list that is in the list of table columns\r\n    select *\r\n    from\r\n        input_columns i\r\n        inner join\r\n        relation_columns r on r.relation_column = i.input_column\r\n\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7128248, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\r\n                                                    min_value=None,\r\n                                                    max_value=None\r\n                                                    ) -%}\r\n{%- if min_value is none and max_value is none -%}\r\n{{ exceptions.raise_compiler_error(\r\n    \"You have to provide either a min_value, max_value or both.\"\r\n) }}\r\n{%- endif -%}\r\n{%- if execute -%}\r\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\r\n\r\n{%- set expression %}\r\n( 1=1\r\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\r\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\r\n)\r\n{% endset -%}\r\n\r\nwith test_data as (\r\n\r\n    select\r\n        {{ number_actual_columns }} as number_actual_columns,\r\n        {{ min_value if min_value else 0 }} as min_value,\r\n        {{ max_value if max_value else 0 }} as max_value\r\n\r\n)\r\nselect *\r\nfrom test_data\r\nwhere\r\n    not {{ expression }}\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7168171, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\r\n{%- if execute -%}\r\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\r\nwith test_data as (\r\n\r\n    select\r\n        {{ number_actual_columns }} as number_actual_columns,\r\n        {{ value }} as value\r\n\r\n)\r\nselect *\r\nfrom test_data\r\nwhere\r\n    number_actual_columns != value\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7178335, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\r\n{%- if execute -%}\r\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\r\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\r\nwith test_data as (\r\n\r\n    select\r\n        {{ number_columns }} as number_columns,\r\n        {{ compare_number_columns }} as compare_number_columns\r\n\r\n)\r\nselect *\r\nfrom test_data\r\nwhere\r\n    number_columns != compare_number_columns\r\n{%- endif -%}\r\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7198417, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\r\n                                                min_value=None,\r\n                                                max_value=None,\r\n                                                group_by=None,\r\n                                                row_condition=None,\r\n                                                strictly=False\r\n                                            ) -%}\r\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\r\n                        'dbt_expectations') (model,\r\n                                                min_value,\r\n                                                max_value,\r\n                                                group_by,\r\n                                                row_condition,\r\n                                                strictly\r\n                                                ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7228434, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\r\n\r\n{%- macro default__test_expect_table_row_count_to_be_between(model,\r\n                                                min_value,\r\n                                                max_value,\r\n                                                group_by,\r\n                                                row_condition,\r\n                                                strictly\r\n                                                ) -%}\r\n{% set expression %}\r\ncount(*)\r\n{% endset %}\r\n{{ dbt_expectations.expression_between(model,\r\n    expression=expression,\r\n    min_value=min_value,\r\n    max_value=max_value,\r\n    group_by_columns=group_by,\r\n    row_condition=row_condition,\r\n    strictly=strictly\r\n    ) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7238426, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\r\n                                            value,\r\n                                            group_by=None,\r\n                                            row_condition=None\r\n                                            ) -%}\r\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\r\n                        'dbt_expectations') (model,\r\n                                                value,\r\n                                                group_by,\r\n                                                row_condition\r\n                                                ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7258494, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\r\n\r\n\r\n\r\n{%- macro default__test_expect_table_row_count_to_equal(model,\r\n                                                value,\r\n                                                group_by,\r\n                                                row_condition\r\n                                                ) -%}\r\n{% set expression %}\r\ncount(*) = {{ value }}\r\n{% endset %}\r\n{{ dbt_expectations.expression_is_true(model,\r\n    expression=expression,\r\n    group_by_columns=group_by,\r\n    row_condition=row_condition)\r\n    }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7268476, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\r\n                                            compare_model,\r\n                                            group_by=None,\r\n                                            compare_group_by=None,\r\n                                            factor=1,\r\n                                            row_condition=None,\r\n                                            compare_row_condition=None\r\n                                        ) -%}\r\n\r\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\r\n                        'dbt_expectations') (model,\r\n                                                compare_model,\r\n                                                group_by,\r\n                                                compare_group_by,\r\n                                                factor,\r\n                                                row_condition,\r\n                                                compare_row_condition\r\n                                            ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.730181, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\r\n\r\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\r\n                                                    compare_model,\r\n                                                    group_by,\r\n                                                    compare_group_by,\r\n                                                    factor,\r\n                                                    row_condition,\r\n                                                    compare_row_condition\r\n                                                    ) -%}\r\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\r\n    compare_model=compare_model,\r\n    compare_expression=\"count(*) * \" + factor|string,\r\n    group_by=group_by,\r\n    compare_group_by=compare_group_by,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition\r\n) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7312026, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\r\n                                                                    compare_model,\r\n                                                                    factor,\r\n                                                                    group_by=None,\r\n                                                                    compare_group_by=None,\r\n                                                                    row_condition=None,\r\n                                                                    compare_row_condition=None\r\n                                            ) -%}\r\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\r\n                        'dbt_expectations') (model,\r\n                                                compare_model,\r\n                                                factor,\r\n                                                group_by,\r\n                                                compare_group_by,\r\n                                                row_condition,\r\n                                                compare_row_condition\r\n                                            ) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7341943, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\r\n\r\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\r\n                                                                    compare_model,\r\n                                                                    factor,\r\n                                                                    group_by,\r\n                                                                    compare_group_by,\r\n                                                                    row_condition,\r\n                                                                    compare_row_condition\r\n                                                                    ) -%}\r\n\r\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\r\n    compare_model,\r\n    group_by=group_by,\r\n    compare_group_by=compare_group_by,\r\n    factor=factor,\r\n    row_condition=row_condition,\r\n    compare_row_condition=compare_row_condition\r\n) }}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7351954, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\r\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\r\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\r\n{%- do return(relation_column_names) -%}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7367046, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\r\n{%- set matching_items = [] -%}\r\n{%- for itm in list1 -%}\r\n    {%- if itm in list2 -%}\r\n        {%- do matching_items.append(itm) -%}\r\n    {%- endif -%}\r\n{%- endfor -%}\r\n{%- do return(matching_items) -%}\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7377203, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\r\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7489803, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\r\n\r\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\r\n    select\r\n        {% if group_by %}\r\n        {% for g in group_by -%}\r\n            {{ g }} as col_{{ loop.index }},\r\n        {% endfor -%}\r\n        {% endif %}\r\n        {{ expression }} as expression\r\n    from\r\n        {{ model }}\r\n    {%- if row_condition %}\r\n    where\r\n        {{ row_condition }}\r\n    {% endif %}\r\n    {% if group_by %}\r\n    group by\r\n        {% for g in group_by -%}\r\n            {{ loop.index }}{% if not loop.last %},{% endif %}\r\n        {% endfor %}\r\n    {% endif %}\r\n{% endmacro -%}\r\n\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7506514, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\r\n                                compare_model=None,\r\n                                compare_expression=None,\r\n                                group_by=None,\r\n                                compare_group_by=None,\r\n                                row_condition=None,\r\n                                compare_row_condition=None,\r\n                                tolerance=0.0,\r\n                                tolerance_percent=None\r\n                                ) -%}\r\n\r\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\r\n                                model,\r\n                                expression,\r\n                                compare_model,\r\n                                compare_expression,\r\n                                group_by,\r\n                                compare_group_by,\r\n                                row_condition,\r\n                                compare_row_condition,\r\n                                tolerance,\r\n                                tolerance_percent) }}\r\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7526464, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\r\n\r\n{%- macro default__test_equal_expression(\r\n                                model,\r\n                                expression,\r\n                                compare_model,\r\n                                compare_expression,\r\n                                group_by,\r\n                                compare_group_by,\r\n                                row_condition,\r\n                                compare_row_condition,\r\n                                tolerance,\r\n                                tolerance_percent) -%}\r\n\r\n    {%- set compare_model = model if not compare_model else compare_model -%}\r\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\r\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\r\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\r\n\r\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\r\n    with a as (\r\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\r\n    ),\r\n    b as (\r\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\r\n    ),\r\n    final as (\r\n\r\n        select\r\n            {% for i in range(1, n_cols + 1) -%}\r\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\r\n            {% endfor %}\r\n            a.expression,\r\n            b.expression as compare_expression,\r\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\r\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\r\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\r\n        from\r\n        {% if n_cols > 0 %}\r\n            a\r\n            full outer join\r\n            b on\r\n            {% for i in range(1, n_cols + 1) -%}\r\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\r\n            {% endfor -%}\r\n        {% else %}\r\n            a cross join b\r\n        {% endif %}\r\n    )\r\n    -- DEBUG:\r\n    -- select * from final\r\n    select\r\n        *\r\n    from final\r\n    where\r\n        {% if tolerance_percent %}\r\n        expression_difference_percent > {{ tolerance_percent }}\r\n        {% else %}\r\n        expression_difference > {{ tolerance }}\r\n        {% endif %}\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.755646, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\r\n                                 expression,\r\n                                 min_value=None,\r\n                                 max_value=None,\r\n                                 group_by_columns=None,\r\n                                 row_condition=None,\r\n                                 strictly=False\r\n                                 ) %}\r\n\r\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7586982, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\r\n                            expression,\r\n                            min_value,\r\n                            max_value,\r\n                            group_by_columns,\r\n                            row_condition,\r\n                            strictly\r\n                            ) %}\r\n\r\n{%- if min_value is none and max_value is none -%}\r\n{{ exceptions.raise_compiler_error(\r\n    \"You have to provide either a min_value, max_value or both.\"\r\n) }}\r\n{%- endif -%}\r\n\r\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\r\n\r\n{% set expression_min_max %}\r\n( 1=1\r\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\r\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\r\n)\r\n{% endset %}\r\n\r\n{{ dbt_expectations.expression_is_true(model,\r\n                                        expression=expression_min_max,\r\n                                        group_by_columns=group_by_columns,\r\n                                        row_condition=row_condition)\r\n                                        }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7627504, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\r\n                                 expression,\r\n                                 test_condition=\"= true\",\r\n                                 group_by_columns=None,\r\n                                 row_condition=None\r\n                                 ) %}\r\n\r\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7657182, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\r\n                                 expression,\r\n                                 test_condition=\"= true\",\r\n                                 group_by_columns=None,\r\n                                 row_condition=None\r\n                                 ) %}\r\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7667203, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\r\nwith grouped_expression as (\r\n    select\r\n        {% if group_by_columns %}\r\n        {% for group_by_column in group_by_columns -%}\r\n        {{ group_by_column }} as col_{{ loop.index }},\r\n        {% endfor -%}\r\n        {% endif %}\r\n        {{ dbt_expectations.truth_expression(expression) }}\r\n    from {{ model }}\r\n     {%- if row_condition %}\r\n    where\r\n        {{ row_condition }}\r\n    {% endif %}\r\n    {% if group_by_columns %}\r\n    group by\r\n    {% for group_by_column in group_by_columns -%}\r\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\r\n    {% endfor %}\r\n    {% endif %}\r\n\r\n),\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from\r\n        grouped_expression\r\n    where\r\n        not(expression {{ test_condition }})\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7687554, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\r\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7697666, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\r\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\r\n    {% if ignore_row_if not in ignore_row_if_values %}\r\n        {{ exceptions.raise_compiler_error(\r\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\r\n        ) }}\r\n    {% endif %}\r\n\r\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\r\n    not (\r\n        {% for column in columns -%}\r\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\r\n        {% endfor %}\r\n    )\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.771772, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\r\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7727728, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\r\n  {{ expression }} as expression\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7727728, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\r\n{%- macro type_timestamp() -%}\r\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7737727, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\r\n    timestamp\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7737727, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\r\n    timestamp_ntz\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7747717, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\r\n    timestamp without time zone\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7747717, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\r\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7747717, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\r\n    datetime\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7757714, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\r\n    timestamp_ntz\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7757714, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\r\n    timestamp without time zone\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7757714, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\r\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7767675, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\r\n\r\n{%- macro default__group_by(n) -%}\r\n\r\n  group by {% for i in range(1, n + 1) -%}\r\n      {{ i }}{{ ',' if not loop.last }}\r\n   {%- endfor -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7772794, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7788038, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\r\n\r\nwith meet_condition as(\r\n  select *\r\n  from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n  select *\r\n  from meet_condition\r\n  where\r\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\r\n    1 = 2\r\n\r\n  {%- if min_value is not none %}\r\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\r\n  {%- endif %}\r\n\r\n  {%- if max_value is not none %}\r\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\r\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\r\n  {%- endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7798183, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.780818, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\nselect *\r\nfrom (\r\n    select\r\n        {# In TSQL, subquery aggregate columns need aliases #}\r\n        {# thus: a filler col name, 'filler_column' #}\r\n      {{select_gb_cols}}\r\n      count({{ column_name }}) as filler_column\r\n\r\n    from {{ model }}\r\n\r\n    {{groupby_gb_cols}}\r\n\r\n    having count({{ column_name }}) = 0\r\n\r\n) validation_errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7828174, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\r\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7838144, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\r\n\r\n{# T-SQL does not let you use numbers as aliases for columns #}\r\n{# Thus, no \"GROUP BY 1\" #}\r\n\r\nwith table_a as (\r\nselect\r\n  {{ column_name }},\r\n  count(*) as num_rows\r\nfrom {{ model }}\r\ngroup by {{ column_name }}\r\n),\r\n\r\ntable_b as (\r\nselect\r\n  {{ field }},\r\n  count(*) as num_rows\r\nfrom {{ to }}\r\ngroup by {{ field }}\r\n),\r\n\r\nexcept_a as (\r\n  select *\r\n  from table_a\r\n  {{ dbt.except() }}\r\n  select *\r\n  from table_b\r\n),\r\n\r\nexcept_b as (\r\n  select *\r\n  from table_b\r\n  {{ dbt.except() }}\r\n  select *\r\n  from table_a\r\n),\r\n\r\nunioned as (\r\n  select *\r\n  from except_a\r\n  union all\r\n  select *\r\n  from except_b\r\n)\r\n\r\nselect *\r\nfrom unioned\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.784814, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\r\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.785817, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\r\n\r\n{% set set_diff %}\r\n    count(*) + coalesce(abs(\r\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\r\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\r\n    ), 0)\r\n{% endset %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = set_diff) }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n-- setup\r\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\r\n\r\n{#-\r\nIf the compare_cols arg is provided, we can run this test without querying the\r\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\r\n-#}\r\n\r\n{%- if not compare_columns -%}\r\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\r\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\r\n{%- endif -%}\r\n\r\n{% set compare_cols_csv = compare_columns | join(', ') %}\r\n\r\nwith a as (\r\n\r\n    select * from {{ model }}\r\n\r\n),\r\n\r\nb as (\r\n\r\n    select * from {{ compare_model }}\r\n\r\n),\r\n\r\na_minus_b as (\r\n\r\n    select {{compare_cols_csv}} from a\r\n    {{ dbt.except() }}\r\n    select {{compare_cols_csv}} from b\r\n\r\n),\r\n\r\nb_minus_a as (\r\n\r\n    select {{compare_cols_csv}} from b\r\n    {{ dbt.except() }}\r\n    select {{compare_cols_csv}} from a\r\n\r\n),\r\n\r\nunioned as (\r\n\r\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\r\n    union all\r\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\r\n\r\n)\r\n\r\nselect * from unioned\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7888422, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.790853, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\r\n\r\n{#-- Needs to be set at parse time, before we return '' below --#}\r\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\r\n\r\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n{%- if not execute -%}\r\n    {{ return('') }}\r\n{% endif %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\r\n  {% set join_gb_cols %}\r\n    {% for c in group_by_columns %}\r\n      and a.{{c}} = b.{{c}}\r\n    {% endfor %}\r\n  {% endset %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\r\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\r\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\r\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\r\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n\r\nwith a as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_equal_rowcount,\r\n      count(*) as count_a \r\n    from {{ model }}\r\n    {{groupby_gb_cols}}\r\n\r\n\r\n),\r\nb as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_equal_rowcount,\r\n      count(*) as count_b \r\n    from {{ compare_model }}\r\n    {{groupby_gb_cols}}\r\n\r\n),\r\nfinal as (\r\n\r\n    select\r\n    \r\n        {% for c in group_by_columns -%}\r\n          a.{{c}} as {{c}}_a,\r\n          b.{{c}} as {{c}}_b,\r\n        {% endfor %}\r\n\r\n        count_a,\r\n        count_b,\r\n        abs(count_a - count_b) as diff_count\r\n\r\n    from a\r\n    full join b\r\n    on\r\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\r\n    {{join_gb_cols}}\r\n\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7938552, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\r\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7948534, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\r\n\r\n{% set column_list = '*' if should_store_failures() else \"1\" %}\r\n\r\nselect\r\n    {{ column_list }}\r\nfrom {{ model }}\r\n{% if column_name is none %}\r\nwhere not({{ expression }})\r\n{%- else %}\r\nwhere not({{ column_name }} {{ expression }})\r\n{%- endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.795858, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.7978666, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\r\n\r\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set join_gb_cols %}\r\n    {% for c in group_by_columns %}\r\n      and a.{{c}} = b.{{c}}\r\n    {% endfor %}\r\n  {% endset %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\r\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\r\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\r\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\r\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n\r\n\r\nwith a as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_fewer_rows_than,\r\n      count(*) as count_our_model \r\n    from {{ model }}\r\n    {{ groupby_gb_cols }}\r\n\r\n),\r\nb as (\r\n\r\n    select \r\n      {{select_gb_cols}}\r\n      1 as id_dbtutils_test_fewer_rows_than,\r\n      count(*) as count_comparison_model \r\n    from {{ compare_model }}\r\n    {{ groupby_gb_cols }}\r\n\r\n),\r\ncounts as (\r\n\r\n    select\r\n\r\n        {% for c in group_by_columns -%}\r\n          a.{{c}} as {{c}}_a,\r\n          b.{{c}} as {{c}}_b,\r\n        {% endfor %}\r\n\r\n        count_our_model,\r\n        count_comparison_model\r\n    from a\r\n    full join b on \r\n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\r\n    {{ join_gb_cols }}\r\n\r\n),\r\nfinal as (\r\n\r\n    select *,\r\n        case\r\n            -- fail the test if we have more rows than the reference model and return the row count delta\r\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\r\n            -- fail the test if they are the same number\r\n            when count_our_model = count_comparison_model then 1\r\n            -- pass the test if the delta is positive (i.e. return the number 0)\r\n            else 0\r\n    end as row_count_delta\r\n    from counts\r\n\r\n)\r\n\r\nselect * from final\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.800887, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.806888, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\r\n{% if gaps == 'not_allowed' %}\r\n    {% set allow_gaps_operator='=' %}\r\n    {% set allow_gaps_operator_in_words='equal_to' %}\r\n{% elif gaps == 'allowed' %}\r\n    {% set allow_gaps_operator='<=' %}\r\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\r\n{% elif gaps == 'required' %}\r\n    {% set allow_gaps_operator='<' %}\r\n    {% set allow_gaps_operator_in_words='less_than' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n{% if not zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<' %}\r\n    {% set allow_zero_length_operator_in_words='less_than' %}\r\n{% elif zero_length_range_allowed %}\r\n    {% set allow_zero_length_operator='<=' %}\r\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\r\n\r\nwith window_functions as (\r\n\r\n    select\r\n        {% if partition_by %}\r\n        {{ partition_by }} as partition_by_col,\r\n        {% endif %}\r\n        {{ lower_bound_column }} as lower_bound,\r\n        {{ upper_bound_column }} as upper_bound,\r\n\r\n        lead({{ lower_bound_column }}) over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\r\n        ) as next_lower_bound,\r\n\r\n        row_number() over (\r\n            {{ partition_clause }}\r\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\r\n        ) = 1 as is_last_record\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\ncalc as (\r\n    -- We want to return records where one of our assumptions fails, so we'll use\r\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\r\n    select\r\n        *,\r\n\r\n        -- For each record: lower_bound should be < upper_bound.\r\n        -- Coalesce it to return an error on the null case (implicit assumption\r\n        -- these columns are not_null)\r\n        coalesce(\r\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\r\n            false\r\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\r\n\r\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\r\n        -- Coalesce it to handle null cases for the last record.\r\n        coalesce(\r\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\r\n            is_last_record,\r\n            false\r\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n\r\n    from window_functions\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        *\r\n    from calc\r\n\r\n    where not(\r\n        -- THE FOLLOWING SHOULD BE TRUE --\r\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\r\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\r\n    )\r\n)\r\n\r\nselect * from validation_errors\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8119297, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\r\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8129275, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\r\nwith all_values as (\r\n\r\n    select distinct\r\n        {{ column_name }} as value_field\r\n\r\n    from {{ model }}\r\n\r\n),\r\n\r\nvalidation_errors as (\r\n\r\n    select\r\n        value_field\r\n\r\n    from all_values\r\n    where value_field in (\r\n        {% for value in values -%}\r\n            {% if quote -%}\r\n            '{{ value }}'\r\n            {%- else -%}\r\n            {{ value }}\r\n            {%- endif -%}\r\n            {%- if not loop.last -%},{%- endif %}\r\n        {%- endfor %}\r\n        )\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8139243, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8149207, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n\r\nselect\r\n    {# In TSQL, subquery aggregate columns need aliases #}\r\n    {# thus: a filler col name, 'filler_column' #}\r\n    {{select_gb_cols}}\r\n    count(distinct {{ column_name }}) as filler_column\r\n\r\nfrom {{ model }}\r\n\r\n  {{groupby_gb_cols}}\r\n\r\nhaving count(distinct {{ column_name }}) = 1\r\n\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.815925, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\r\n\r\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8179388, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\r\n\r\n    with\r\n    \r\n    all_values as (\r\n\r\n        select \r\n\r\n\r\n            {% if trim_whitespace == true -%}\r\n\r\n                trim({{ column_name }}) as {{ column_name }}\r\n\r\n            {%- else -%}\r\n\r\n                {{ column_name }}\r\n\r\n            {%- endif %}\r\n            \r\n        from {{ model }}\r\n\r\n    ),\r\n\r\n    errors as (\r\n\r\n        select * from all_values\r\n        where {{ column_name }} = ''\r\n\r\n    )\r\n\r\n    select * from errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8179388, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8199604, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\r\n\r\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\r\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\r\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\nwith validation as (\r\n  select\r\n    {{select_gb_cols}}\r\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\r\n  from {{ model }}\r\n  {{groupby_gb_cols}}\r\n),\r\nvalidation_errors as (\r\n  select\r\n    {{select_gb_cols}}\r\n    not_null_proportion\r\n  from validation\r\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\r\n)\r\nselect\r\n  *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.821963, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\r\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.82296, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\r\n\r\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\r\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\n\r\nwith recency as (\r\n\r\n    select \r\n\r\n      {{ select_gb_cols }}\r\n      {% if ignore_time_component %}\r\n        cast(max({{ field }}) as date) as most_recent\r\n      {%- else %}\r\n        max({{ field }}) as most_recent\r\n      {%- endif %}\r\n\r\n    from {{ model }}\r\n\r\n    {{ groupby_gb_cols }}\r\n\r\n)\r\n\r\nselect\r\n\r\n    {{ select_gb_cols }}\r\n    most_recent,\r\n    {{ threshold }} as threshold\r\n\r\nfrom recency\r\nwhere most_recent < {{ threshold }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8249638, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8274734, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\r\n\r\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\r\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\r\n\r\nwith left_table as (\r\n\r\n  select\r\n    {{column_name}} as id\r\n\r\n  from {{model}}\r\n\r\n  where {{column_name}} is not null\r\n    and {{from_condition}}\r\n\r\n),\r\n\r\nright_table as (\r\n\r\n  select\r\n    {{field}} as id\r\n\r\n  from {{to}}\r\n\r\n  where {{field}} is not null\r\n    and {{to_condition}}\r\n\r\n),\r\n\r\nexceptions as (\r\n\r\n  select\r\n    left_table.id,\r\n    right_table.id as right_id\r\n\r\n  from left_table\r\n\r\n  left join right_table\r\n         on left_table.id = right_table.id\r\n\r\n  where right_table.id is null\r\n\r\n)\r\n\r\nselect * from exceptions\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8279815, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\r\n\r\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\r\n\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8300061, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\r\n\r\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\r\n\r\n{% if group_by_columns|length() > 0 %}\r\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\r\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\r\n{% endif %}\r\n\r\nwith windowed as (\r\n\r\n    select\r\n        {{ select_gb_cols }}\r\n        {{ column_name }},\r\n        lag({{ column_name }}) over (\r\n            {{partition_gb_cols}}\r\n            order by {{ column_name }}\r\n        ) as {{ previous_column_name }}\r\n    from {{ model }}\r\n),\r\n\r\nvalidation_errors as (\r\n    select\r\n        *\r\n    from windowed\r\n    {% if datepart %}\r\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\r\n    {% else %}\r\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\r\n    {% endif %}\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8320065, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\r\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8330047, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\r\n\r\n{% if not quote_columns %}\r\n    {%- set column_list=combination_of_columns %}\r\n{% elif quote_columns %}\r\n    {%- set column_list=[] %}\r\n        {% for column in combination_of_columns -%}\r\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\r\n        {%- endfor %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\r\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\r\n    ) }}\r\n{% endif %}\r\n\r\n{%- set columns_csv=column_list | join(', ') %}\r\n\r\n\r\nwith validation_errors as (\r\n\r\n    select\r\n        {{ columns_csv }}\r\n    from {{ model }}\r\n    group by {{ columns_csv }}\r\n    having count(*) > 1\r\n\r\n)\r\n\r\nselect *\r\nfrom validation_errors\r\n\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8350043, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\r\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8360054, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\r\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8360054, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\r\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8370068, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\r\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8375201, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\r\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8390589, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\r\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.840082, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\r\n\r\n{#- Lower case the string -#}\r\n{% set string = string | lower %}\r\n{#- Replace spaces and dashes with underscores -#}\r\n{% set string = modules.re.sub('[ -]+', '_', string) %}\r\n{#- Only take letters, numbers, and underscores -#}\r\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\r\n{#- Prepends \"_\" if string begins with a number -#}\r\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\r\n\r\n{{ return(string) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8420777, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\r\n    {%- if obj.is_cte -%}\r\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\r\n        {% if obj.name.startswith(ephemeral_prefix) %}\r\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\r\n        {% else %}\r\n            {% set model_name = obj.name %}\r\n        {%- endif -%}\r\n        {% set error_message %}\r\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\r\n\r\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\r\n        {% endset %}\r\n        {%- do exceptions.raise_compiler_error(error_message) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8440778, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\r\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\r\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\r\n    {%- endif -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8455846, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\r\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.847618, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\r\n    {%- call statement('get_intervals_between', fetch_result=True) %}\r\n\r\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_intervals_between') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values[0]) }}\r\n    {%- else -%}\r\n        {{ return(1) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8486292, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\r\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8496397, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\r\n\r\n\r\n{# call as follows:\r\n\r\ndate_spine(\r\n    \"day\",\r\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\r\n    \"dbt.dateadd(week, 1, current_date)\"\r\n) #}\r\n\r\n\r\nwith rawdata as (\r\n\r\n    {{dbt_utils.generate_series(\r\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\r\n    )}}\r\n\r\n),\r\n\r\nall_periods as (\r\n\r\n    select (\r\n        {{\r\n            dbt.dateadd(\r\n                datepart,\r\n                \"row_number() over (order by 1) - 1\",\r\n                start_date\r\n            )\r\n        }}\r\n    ) as date_{{datepart}}\r\n    from rawdata\r\n\r\n),\r\n\r\nfiltered as (\r\n\r\n    select *\r\n    from all_periods\r\n    where date_{{datepart}} <= {{ end_date }}\r\n\r\n)\r\n\r\nselect * from filtered\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8496397, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\r\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8516412, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\r\n\r\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    with row_numbered as (\r\n        select\r\n            _inner.*,\r\n            row_number() over (\r\n                partition by {{ partition_by }}\r\n                order by {{ order_by }}\r\n            ) as rn\r\n        from {{ relation }} as _inner\r\n    )\r\n\r\n    select\r\n        distinct data.*\r\n    from {{ relation }} as data\r\n    {#\r\n    -- Not all DBs will support natural joins but the ones that do include:\r\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\r\n    -- Apache Spark, SingleStore, Vertica\r\n    -- Those that do not appear to support natural joins include:\r\n    -- SQLServer, Trino, Presto, Rockset, Athena\r\n    #}\r\n    natural join row_numbered\r\n    where row_numbered.rn = 1\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8526444, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8526444, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\r\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select\r\n        distinct on ({{ partition_by }}) *\r\n    from {{ relation }}\r\n    order by {{ partition_by }}{{ ',' ~ order_by }}\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8536384, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\r\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select *\r\n    from {{ relation }}\r\n    qualify\r\n        row_number() over (\r\n            partition by {{ partition_by }}\r\n            order by {{ order_by }}\r\n        ) = 1\r\n\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8536384, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\r\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\r\n\r\n    select unique.*\r\n    from (\r\n        select\r\n            array_agg (\r\n                original\r\n                order by {{ order_by }}\r\n                limit 1\r\n            )[offset(0)] unique\r\n        from {{ relation }} original\r\n        group by {{ partition_by }}\r\n    )\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8546398, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\r\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8556373, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\r\n\r\n    {% if upper_bound <= 0 %}\r\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\r\n    {% endif %}\r\n\r\n    {% for _ in range(1, 100) %}\r\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\r\n    {% endfor %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.857147, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\r\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8576689, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\r\n\r\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\r\n\r\n    with p as (\r\n        select 0 as generated_number union all select 1\r\n    ), unioned as (\r\n\r\n    select\r\n\r\n    {% for i in range(n) %}\r\n    p{{i}}.generated_number * power(2, {{i}})\r\n    {% if not loop.last %} + {% endif %}\r\n    {% endfor %}\r\n    + 1\r\n    as generated_number\r\n\r\n    from\r\n\r\n    {% for i in range(n) %}\r\n    p as p{{i}}\r\n    {% if not loop.last %} cross join {% endif %}\r\n    {% endfor %}\r\n\r\n    )\r\n\r\n    select *\r\n    from unioned\r\n    where generated_number <= {{upper_bound}}\r\n    order by generated_number\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8586817, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\r\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8596895, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\r\n\r\n{%- macro default__generate_surrogate_key(field_list) -%}\r\n\r\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\r\n    {% set default_null_value = \"\" %}\r\n{% else %}\r\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\r\n{% endif %}\r\n\r\n{%- set fields = [] -%}\r\n\r\n{%- for field in field_list -%}\r\n\r\n    {%- do fields.append(\r\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\r\n    ) -%}\r\n\r\n    {%- if not loop.last %}\r\n        {%- do fields.append(\"'-'\") -%}\r\n    {%- endif -%}\r\n\r\n{%- endfor -%}\r\n\r\n{{ dbt.hash(dbt.concat(fields)) }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8616924, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\r\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8636944, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% set default = [] if not default %}\r\n        {{ return(default) }}\r\n    {% endif %}\r\n\r\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\r\n\r\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\r\n    {# TODO: Change the method signature in a future 0.x.0 release #}\r\n    {%- set target_relation = table -%}\r\n\r\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\r\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\r\n\r\n    {%- call statement('get_column_values', fetch_result=true) %}\r\n\r\n        {%- if not relation_exists and default is none -%}\r\n\r\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\r\n\r\n        {%- elif not relation_exists and default is not none -%}\r\n\r\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\r\n\r\n          {{ return(default) }}\r\n\r\n        {%- else -%}\r\n\r\n\r\n            select\r\n                {{ column }} as value\r\n\r\n            from {{ target_relation }}\r\n\r\n            {% if where is not none %}\r\n            where {{ where }}\r\n            {% endif %}\r\n\r\n            group by {{ column }}\r\n            order by {{ order_by }}\r\n\r\n            {% if max_records is not none %}\r\n            limit {{ max_records }}\r\n            {% endif %}\r\n\r\n        {% endif %}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set value_list = load_result('get_column_values') -%}\r\n\r\n    {%- if value_list and value_list['data'] -%}\r\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\r\n        {{ return(values) }}\r\n    {%- else -%}\r\n        {{ return(default) }}\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8677084, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\r\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8687189, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\r\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\r\n\r\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {{ return('') }}\r\n    {% endif %}\r\n\r\n    {%- set include_cols = [] %}\r\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\r\n    {%- set except = except | map(\"lower\") | list %}\r\n    {%- for col in cols -%}\r\n        {%- if col.column|lower not in except -%}\r\n            {% do include_cols.append(col.column) %}\r\n        {%- endif %}\r\n    {%- endfor %}\r\n\r\n    {{ return(include_cols) }}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.870734, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\r\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8717315, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\r\n\r\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\r\n\r\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\r\n\r\n        {{ query }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {% set sql_results={} %}\r\n\r\n    {%- if execute -%}\r\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\r\n        {% for column_name, column in sql_results_table.items() %}\r\n            {% do sql_results.update({column_name: column.values()}) %}\r\n        {% endfor %}\r\n    {%- endif -%}\r\n\r\n    {{ return(sql_results) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8737295, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8747277, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8777535, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8797843, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {%- call statement('get_tables', fetch_result=True) %}\r\n\r\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- set table_list = load_result('get_tables') -%}\r\n\r\n    {%- if table_list and table_list['table'] -%}\r\n        {%- set tbl_relations = [] -%}\r\n        {%- for row in table_list['table'] -%}\r\n            {%- set tbl_relation = api.Relation.create(\r\n                database=database,\r\n                schema=row.table_schema,\r\n                identifier=row.table_name,\r\n                type=row.table_type\r\n            ) -%}\r\n            {%- do tbl_relations.append(tbl_relation) -%}\r\n        {%- endfor -%}\r\n\r\n        {{ return(tbl_relations) }}\r\n    {%- else -%}\r\n        {{ return([]) }}\r\n    {%- endif -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8817832, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\r\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8827832, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\r\n\r\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\r\n\r\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\r\n\r\n        {{ query }}\r\n\r\n    {%- endcall -%}\r\n\r\n    {%- if execute -%}\r\n\r\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\r\n        {% if r | length == 0 %}\r\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\r\n            {% set sql_result = default %}\r\n        {% else %}\r\n            {% set sql_result = r[0] %}\r\n        {% endif %}\r\n        \r\n    {%- else -%}\r\n    \r\n        {% set sql_result = default %}\r\n    \r\n    {%- endif -%}\r\n\r\n    {% do return(sql_result) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8847902, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\r\n        (schema_pattern, table_pattern, exclude, database)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8877926, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n        select distinct\r\n            table_schema as {{ adapter.quote('table_schema') }},\r\n            table_name as {{ adapter.quote('table_name') }},\r\n            {{ dbt_utils.get_table_types_sql() }}\r\n        from {{ database }}.information_schema.tables\r\n        where table_schema ilike '{{ schema_pattern }}'\r\n        and table_name ilike '{{ table_pattern }}'\r\n        and table_name not ilike '{{ exclude }}'\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8888042, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\r\n\r\n    {% if '%' in schema_pattern %}\r\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% else %}\r\n        {% set schemata=[schema_pattern] %}\r\n    {% endif %}\r\n\r\n    {% set sql %}\r\n        {% for schema in schemata %}\r\n            select distinct\r\n                table_schema,\r\n                table_name,\r\n                {{ dbt_utils.get_table_types_sql() }}\r\n\r\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\r\n            where lower(table_name) like lower ('{{ table_pattern }}')\r\n                and lower(table_name) not like lower ('{{ exclude }}')\r\n\r\n            {% if not loop.last %} union all {% endif %}\r\n\r\n        {% endfor %}\r\n    {% endset %}\r\n\r\n    {{ return(sql) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8908184, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\r\n    {% if execute %}\r\n\r\n        {% set sql %}\r\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\r\n        where lower(schema_name) like lower('{{ schema_pattern }}')\r\n        {% endset %}\r\n\r\n        {% set results=run_query(sql) %}\r\n\r\n        {% set schemata=results.columns['schema_name'].values() %}\r\n\r\n        {{ return(schemata) }}\r\n\r\n    {% else %}\r\n\r\n        {{ return([]) }}\r\n\r\n    {% endif %}\r\n\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8928173, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8938196, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\r\n\r\n    {{ dbt_utils.get_tables_by_pattern_sql(\r\n        schema_pattern = schema,\r\n        table_pattern = prefix ~ '%',\r\n        exclude = exclude,\r\n        database = database\r\n    ) }}\r\n    \r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8938196, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\r\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\r\n{%- endmacro -%}\r\n\r\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.894819, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'EXTERNAL TABLE' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as {{ adapter.quote('table_type') }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8958168, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\r\n            case table_type\r\n                when 'BASE TABLE' then 'table'\r\n                when 'FOREIGN' then 'external'\r\n                when 'MATERIALIZED VIEW' then 'materializedview'\r\n                else lower(table_type)\r\n            end as {{ adapter.quote('table_type') }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8958168, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\r\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8968139, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\r\n\r\n{%- macro default__group_by(n) -%}\r\n\r\n  group by {% for i in range(1, n + 1) -%}\r\n      {{ i }}{{ ',' if not loop.last }}   \r\n   {%- endfor -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8973215, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\r\n    acos(-1) * {{degrees}} / 180\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.8993628, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.899846, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n\r\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\r\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\r\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9008462, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\r\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\r\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\r\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\r\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\r\n{%- if unit == 'mi' %}\r\n    {% set conversion_rate = 1 %}\r\n{% elif unit == 'km' %}\r\n    {% set conversion_rate = 1.60934 %}\r\n{% else %}\r\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\r\n{% endif %}\r\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\r\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\r\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9038458, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\r\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9038458, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\r\n{%- for col in cols %}\r\n\r\n    {% if col.is_string() -%}\r\n\r\n    nullif({{col.name}},'') as {{col.name}}\r\n\r\n    {%- else -%}\r\n\r\n    {{col.name}}\r\n\r\n    {%- endif -%}\r\n\r\n{%- if not loop.last -%} , {%- endif -%}\r\n\r\n{%- endfor -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9048467, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\r\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9058466, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\r\n  {% set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  select {{ dbt_utils.nullcheck(cols) }}\r\n  from {{relation}}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.906846, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9088736, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\r\n               values,\r\n               alias=True,\r\n               agg='sum',\r\n               cmp='=',\r\n               prefix='',\r\n               suffix='',\r\n               then_value=1,\r\n               else_value=0,\r\n               quote_identifiers=True,\r\n               distinct=False) %}\r\n  {% for value in values %}\r\n    {{ agg }}(\r\n      {% if distinct %} distinct {% endif %}\r\n      case\r\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\r\n        then {{ then_value }}\r\n      else {{ else_value }}\r\n      end\r\n    )\r\n    {% if alias %}\r\n      {% if quote_identifiers %}\r\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\r\n      {% else %}\r\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\r\n      {% endif %}\r\n    {% endif %}\r\n    {% if not loop.last %},{% endif %}\r\n  {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.911892, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\r\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9128878, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\r\n\r\n{%- macro default__safe_add(field_list) -%}\r\n\r\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\r\n\r\n{%- set error_message = '\r\nWarning: the `safe_add` macro now takes a single list argument instead of \\\r\nstring arguments. The {}.{} model triggered this warning. \\\r\n'.format(model.package_name, model.name) -%}\r\n\r\n{%- do exceptions.warn(error_message) -%}\r\n\r\n{%- endif -%}\r\n\r\n{% set fields = [] %}\r\n\r\n{%- for field in field_list -%}\r\n\r\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\r\n\r\n{%- endfor -%}\r\n\r\n{{ fields|join(' +\\n  ') }}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9148817, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\r\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9148817, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\r\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9158874, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9178958, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.920915, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\r\n    {% set frustrating_jinja_feature = varargs %}\r\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9219155, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\r\n\r\n{%- macro default__surrogate_key(field_list) -%}\r\n\r\n{%- set error_message = '\r\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\r\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\r\ndifferently to empty strings. To restore the behaviour of the original \\\r\nmacro, add a global variable in dbt_project.yml called \\\r\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\r\ndbt_project.yml file with a value of True. \\\r\nThe {}.{} model triggered this warning. \\\r\n'.format(model.package_name, model.name) -%}\r\n\r\n{%- do exceptions.raise_compiler_error(error_message) -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9229162, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\r\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9279335, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\r\n\r\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\r\n\r\n    {%- if exclude and include -%}\r\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\r\n    {%- endif -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\r\n    {%- if not execute %}\r\n        {{ return('') }}\r\n    {% endif -%}\r\n\r\n    {%- set column_override = column_override if column_override is not none else {} -%}\r\n\r\n    {%- set relation_columns = {} -%}\r\n    {%- set column_superset = {} -%}\r\n    {%- set all_excludes = [] -%}\r\n    {%- set all_includes = [] -%}\r\n\r\n    {%- if exclude -%}\r\n        {%- for exc in exclude -%}\r\n            {%- do all_excludes.append(exc | lower) -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n\r\n    {%- if include -%}\r\n        {%- for inc in include -%}\r\n            {%- do all_includes.append(inc | lower) -%}\r\n        {%- endfor -%}\r\n    {%- endif -%}\r\n\r\n    {%- for relation in relations -%}\r\n\r\n        {%- do relation_columns.update({relation: []}) -%}\r\n\r\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\r\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\r\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\r\n        {%- for col in cols -%}\r\n\r\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\r\n        {%- if exclude and col.column | lower in all_excludes -%}\r\n\r\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\r\n        {%- elif include and col.column | lower not in all_includes -%}\r\n\r\n        {#- Otherwise add the column to the column superset -#}\r\n        {%- else -%}\r\n\r\n            {#- update the list of columns in this relation -#}\r\n            {%- do relation_columns[relation].append(col.column) -%}\r\n\r\n            {%- if col.column in column_superset -%}\r\n\r\n                {%- set stored = column_superset[col.column] -%}\r\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\r\n\r\n                    {%- do column_superset.update({col.column: col}) -%}\r\n\r\n                {%- endif %}\r\n\r\n            {%- else -%}\r\n\r\n                {%- do column_superset.update({col.column: col}) -%}\r\n\r\n            {%- endif -%}\r\n\r\n        {%- endif -%}\r\n\r\n        {%- endfor -%}\r\n    {%- endfor -%}\r\n\r\n    {%- set ordered_column_names = column_superset.keys() -%}\r\n    {%- set dbt_command = flags.WHICH -%}\r\n\r\n\r\n    {% if dbt_command in ['run', 'build'] %}\r\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\r\n        {%- set relations_string -%}\r\n            {%- for relation in relations -%}\r\n                {{ relation.name }}\r\n            {%- if not loop.last %}, {% endif -%}\r\n            {%- endfor -%}\r\n        {%- endset -%}\r\n\r\n        {%- set error_message -%}\r\n            There were no columns found to union for relations {{ relations_string }}\r\n        {%- endset -%}\r\n\r\n        {{ exceptions.raise_compiler_error(error_message) }}\r\n    {%- endif -%}\r\n    {%- endif -%}\r\n\r\n    {%- for relation in relations %}\r\n\r\n        (\r\n            select\r\n\r\n                {%- if source_column_name is not none %}\r\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\r\n                {%- endif %}\r\n\r\n                {% for col_name in ordered_column_names -%}\r\n\r\n                    {%- set col = column_superset[col_name] %}\r\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\r\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\r\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\r\n\r\n                {%- endfor %}\r\n\r\n            from {{ relation }}\r\n\r\n            {% if where -%}\r\n            where {{ where }}\r\n            {%- endif %}\r\n        )\r\n\r\n        {% if not loop.last -%}\r\n            union all\r\n        {% endif -%}\r\n\r\n    {%- endfor -%}\r\n\r\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9379778, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\r\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9405532, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\r\n\r\n    {% if not relation %}\r\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\r\n    {% endif %}\r\n\r\n  {%- set exclude = exclude if exclude is not none else [] %}\r\n  {%- set remove = remove if remove is not none else [] %}\r\n\r\n  {%- set include_cols = [] %}\r\n\r\n  {%- set table_columns = {} %}\r\n\r\n  {%- do table_columns.update({relation: []}) %}\r\n\r\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\r\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\r\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\r\n\r\n  {%- for col in cols -%}\r\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\r\n      {% do include_cols.append(col) %}\r\n    {%- endif %}\r\n  {%- endfor %}\r\n\r\n\r\n  {%- for col in include_cols -%}\r\n    select\r\n      {%- for exclude_col in exclude %}\r\n        {{ exclude_col }},\r\n      {%- endfor %}\r\n\r\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\r\n      cast(  {% if col.data_type == 'boolean' %}\r\n           {{ dbt.cast_bool_to_text(col.column) }}\r\n             {% else %}\r\n           {{ col.column }}\r\n             {% endif %}\r\n           as {{ cast_to }}) as {{ value_name }}\r\n\r\n    from {{ relation }}\r\n\r\n    {% if not loop.last -%}\r\n      union all\r\n    {% endif -%}\r\n  {%- endfor -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.946079, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\r\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9486012, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is eaxtly at the bucket egde\r\n        case\r\n            when\r\n                mod(\r\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\r\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\r\n                ) = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9506023, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is exactly at the bucket edge\r\n        case\r\n            when\r\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\r\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\r\n                 = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    least(\r\n        ceil(\r\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\r\n        ),\r\n        {{ num_buckets }} + 1\r\n    )\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9516056, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\r\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9526026, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\r\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9526026, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\r\n\r\n{%- set parsed =\r\n    dbt.split_part(\r\n        dbt.split_part(\r\n            dbt.replace(\r\n                dbt.replace(\r\n                    dbt.replace(field, \"'android-app://'\", \"''\"\r\n                    ), \"'http://'\", \"''\"\r\n                ), \"'https://'\", \"''\"\r\n            ), \"'/'\", 1\r\n        ), \"'?'\", 1\r\n    )\r\n\r\n-%}\r\n\r\n\r\n    {{ dbt.safe_cast(\r\n        parsed,\r\n        dbt.type_string()\r\n        )}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9545994, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\r\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9556017, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\r\n\r\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\r\n\r\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\r\n\r\nnullif({{ split }},'')\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9556017, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\r\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9571126, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\r\n\r\n    {%- set stripped_url =\r\n        dbt.replace(\r\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\r\n    -%}\r\n\r\n    {%- set first_slash_pos -%}\r\n        coalesce(\r\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\r\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\r\n            )\r\n    {%- endset -%}\r\n\r\n    {%- set parsed_path =\r\n        dbt.split_part(\r\n            dbt.right(\r\n                stripped_url,\r\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\r\n                ),\r\n            \"'?'\", 1\r\n            )\r\n    -%}\r\n\r\n    {{ dbt.safe_cast(\r\n        parsed_path,\r\n        dbt.type_string()\r\n    )}}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1694547876.9586573, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.VoluntaryChurnABT.estadisticos_mensual": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.estadisticos_semanal": ["model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week", "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week", "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week", "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week", "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week", "model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week", "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week", "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week", "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week", "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.int_ntt_aggregated_to_week", "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week", "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week", "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada"], "model.VoluntaryChurnABT.intenciones_semanal": ["model.VoluntaryChurnABT.stg__intenciones"], "model.VoluntaryChurnABT.target_semanal": ["model.VoluntaryChurnABT.intenciones_semanal"], "model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__antiguedad_cuenta", "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada"], "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__antiguedad_ultimo_ctt"], "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.stg_dtl_pa__bandwith"], "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.stg_smy_pa__churn_node"], "model.VoluntaryChurnABT.int_consumos_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__consumos"], "model.VoluntaryChurnABT.int_ctt_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__ctt"], "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__ctt_fix"], "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__ctt_producto"], "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__customer_consults"], "model.VoluntaryChurnABT.int_facturas_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_360_staging__facturas"], "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__intencion_producto"], "model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__descuentos", "model.VoluntaryChurnABT.stg_360_staging__dim_producto"], "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__morosidad"], "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__motivo_intencion"], "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__new_offers"], "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__new_orders"], "model.VoluntaryChurnABT.int_nodos_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_dtl_pa__nodos", "model.VoluntaryChurnABT.stg_smy_pa__performances"], "model.VoluntaryChurnABT.int_ntt_aggregated_to_week": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.stg_smy_pa__ntt"], "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__products_tigo_vs_competence"], "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__resultado_intencion"], "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__cartera_detallada", "model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "model.VoluntaryChurnABT.stg__intenciones": ["model.VoluntaryChurnABT.stg_smy_pa__trgt_cancelaciones"], "model.VoluntaryChurnABT.stg_360_staging__antiguedad_cuenta": [], "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada": [], "model.VoluntaryChurnABT.stg_360_staging__descuentos": [], "model.VoluntaryChurnABT.stg_360_staging__dim_producto": [], "model.VoluntaryChurnABT.stg_360_staging__facturas": [], "model.VoluntaryChurnABT.stg_dtl_pa__bandwith": [], "model.VoluntaryChurnABT.stg_dtl_pa__nodos": [], "model.VoluntaryChurnABT.stg_smy_pa__antiguedad_ultimo_ctt": [], "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones": [], "model.VoluntaryChurnABT.stg_smy_pa__churn_node": [], "model.VoluntaryChurnABT.stg_smy_pa__consumos": [], "model.VoluntaryChurnABT.stg_smy_pa__ctt": [], "model.VoluntaryChurnABT.stg_smy_pa__ctt_fix": [], "model.VoluntaryChurnABT.stg_smy_pa__ctt_producto": [], "model.VoluntaryChurnABT.stg_smy_pa__customer_consults": [], "model.VoluntaryChurnABT.stg_smy_pa__intencion_producto": [], "model.VoluntaryChurnABT.stg_smy_pa__morosidad": [], "model.VoluntaryChurnABT.stg_smy_pa__motivo_intencion": [], "model.VoluntaryChurnABT.stg_smy_pa__new_offers": [], "model.VoluntaryChurnABT.stg_smy_pa__new_orders": [], "model.VoluntaryChurnABT.stg_smy_pa__ntt": [], "model.VoluntaryChurnABT.stg_smy_pa__performances": [], "model.VoluntaryChurnABT.stg_smy_pa__products_tigo_vs_competence": [], "model.VoluntaryChurnABT.stg_smy_pa__resultado_intencion": [], "model.VoluntaryChurnABT.stg_smy_pa__retenciones": [], "model.VoluntaryChurnABT.stg_smy_pa__trgt_cancelaciones": [], "model.VoluntaryChurnABT.dbt_results": [], "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0": ["model.VoluntaryChurnABT.dbt_results"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9": ["model.VoluntaryChurnABT.target_semanal"], "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e": ["model.VoluntaryChurnABT.target_semanal"], "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9": ["model.VoluntaryChurnABT.target_semanal"], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "child_map": {"model.VoluntaryChurnABT.estadisticos_mensual": ["test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764", "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9"], "model.VoluntaryChurnABT.estadisticos_semanal": ["model.VoluntaryChurnABT.estadisticos_mensual", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f"], "model.VoluntaryChurnABT.intenciones_semanal": ["model.VoluntaryChurnABT.target_semanal"], "model.VoluntaryChurnABT.target_semanal": ["test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e", "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9", "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9"], "model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_consumos_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc", "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a", "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9"], "model.VoluntaryChurnABT.int_ctt_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_facturas_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d", "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6", "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d"], "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17", "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310", "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c"], "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_nodos_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_bandwith_aggregated_to_week", "model.VoluntaryChurnABT.int_churn_node_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_ntt_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f", "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f", "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d"], "model.VoluntaryChurnABT.int_ntt_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.stg__intenciones": ["model.VoluntaryChurnABT.intenciones_semanal"], "model.VoluntaryChurnABT.stg_360_staging__antiguedad_cuenta": ["model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week"], "model.VoluntaryChurnABT.stg_360_staging__cartera_detallada": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_antiguedad_cuenta_aggregated_to_week", "model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week", "model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week", "model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week", "model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week", "model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week", "model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week", "model.VoluntaryChurnABT.int_new_offers_aggregated_to_week", "model.VoluntaryChurnABT.int_new_orders_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week", "model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week", "model.VoluntaryChurnABT.int_retenciones_aggregated_to_week"], "model.VoluntaryChurnABT.stg_360_staging__descuentos": ["model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week"], "model.VoluntaryChurnABT.stg_360_staging__dim_producto": ["model.VoluntaryChurnABT.int_metricas_descuentos_aggregated_to_week"], "model.VoluntaryChurnABT.stg_360_staging__facturas": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "model.VoluntaryChurnABT.stg_dtl_pa__bandwith": ["model.VoluntaryChurnABT.int_bandwith_aggregated_to_week"], "model.VoluntaryChurnABT.stg_dtl_pa__nodos": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__antiguedad_ultimo_ctt": ["model.VoluntaryChurnABT.int_antiguedad_ultimo_ctt_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones": ["model.VoluntaryChurnABT.int_cancelaciones_aggregated_to_week", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da", "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8", "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f"], "model.VoluntaryChurnABT.stg_smy_pa__churn_node": ["model.VoluntaryChurnABT.int_churn_node_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__consumos": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1", "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498", "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19", "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3", "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4"], "model.VoluntaryChurnABT.stg_smy_pa__ctt": ["model.VoluntaryChurnABT.int_ctt_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__ctt_fix": ["model.VoluntaryChurnABT.int_ctt_fix_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__ctt_producto": ["model.VoluntaryChurnABT.int_ctt_producto_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__customer_consults": ["model.VoluntaryChurnABT.int_customers_consults_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__intencion_producto": ["model.VoluntaryChurnABT.int_intencion_producto_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__morosidad": ["model.VoluntaryChurnABT.int_metricas_morosidad_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__motivo_intencion": ["model.VoluntaryChurnABT.int_motivo_intencion_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__new_offers": ["model.VoluntaryChurnABT.int_new_offers_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__new_orders": ["model.VoluntaryChurnABT.int_new_orders_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__ntt": ["model.VoluntaryChurnABT.int_ntt_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__performances": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a", "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93"], "model.VoluntaryChurnABT.stg_smy_pa__products_tigo_vs_competence": ["model.VoluntaryChurnABT.int_products_tigo_vs_competence_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__resultado_intencion": ["model.VoluntaryChurnABT.int_resultado_intencion_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__retenciones": ["model.VoluntaryChurnABT.int_retenciones_aggregated_to_week", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa", "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37"], "model.VoluntaryChurnABT.stg_smy_pa__trgt_cancelaciones": ["model.VoluntaryChurnABT.stg__intenciones"], "model.VoluntaryChurnABT.dbt_results": ["operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0"], "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9": [], "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a": [], "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9": [], "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e": [], "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9": [], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9": [], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc": [], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d": [], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f": [], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d": [], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d": [], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c": [], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17": [], "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a": [], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8": [], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da": [], "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498": [], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19": [], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3": [], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1": [], "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa": []}, "group_map": {}}