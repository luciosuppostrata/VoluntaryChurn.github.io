{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.3", "generated_at": "2023-04-10T16:00:03.658764Z", "invocation_id": "66f3ea71-e6ba-4e30-894f-4f645f191dd5", "env": {}, "project_id": "ca818801058e20832b1d5132e5dcbb9c", "user_id": "b63ffd37-bf9e-4e4a-9c80-a6a912ffe73b", "send_anonymous_usage_stats": true, "adapter_type": "athena"}, "nodes": {"model.VoluntaryChurnABT.stg__intenciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg__intenciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/stg__intenciones.sql", "original_file_path": "models/staging/stg__intenciones.sql", "unique_id": "model.VoluntaryChurnABT.stg__intenciones", "fqn": ["VoluntaryChurnABT", "staging", "stg__intenciones"], "alias": "stg__intenciones", "checksum": {"name": "sha256", "checksum": "592d43f49f266b9f60bbb4890cfc6437ca2b251930ccb0471328fde826727445"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_ini_pcs": {"name": "dt_ini_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctrtd_fm": {"name": "ctrtd_fm", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctrtd_to": {"name": "ctrtd_to", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_pd": {"name": "id_pd", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_tp_clnt": {"name": "id_tp_clnt", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt_load": {"name": "dt_load", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.3681989, "relation_name": "dev_voluntary_churn_staging.stg__intenciones", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nWITH cancelaciones AS (\n\n    SELECT * from {{ref('stg_smy_pa__cancelaciones')}}\n\n    ),\n\n    retenciones AS(\n\n        SELECT * from {{ref('stg_smy_pa__retenciones')}}\n\n    ),\n\n    intenciones AS (\n    \n        SELECT * FROM cancelaciones\n        UNION ALL\n        SELECT * FROM retenciones\n    \n    )\n\n    SELECT \n    *, \n    date_trunc('week', dt_ini_pcs) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', dt_ini_pcs)) as fecha_final_semana,\n    year(date_add('week', 1, date_trunc('week', dt_ini_pcs))) as year,\n    month(date_add('week', 1, date_trunc('week', dt_ini_pcs))) as month,\n    day(date_add('week', 1, date_trunc('week', dt_ini_pcs))) as day         \n    FROM intenciones", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"], ["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/stg__intenciones.sql", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),cancelaciones AS (\n\n    SELECT * from __dbt__cte__stg_smy_pa__cancelaciones\n\n    ),\n\n    retenciones AS(\n\n        SELECT * from __dbt__cte__stg_smy_pa__retenciones\n\n    ),\n\n    intenciones AS (\n    \n        SELECT * FROM cancelaciones\n        UNION ALL\n        SELECT * FROM retenciones\n    \n    )\n\n    SELECT \n    *, \n    date_trunc('week', dt_ini_pcs) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', dt_ini_pcs)) as fecha_final_semana,\n    year(date_add('week', 1, date_trunc('week', dt_ini_pcs))) as year,\n    month(date_add('week', 1, date_trunc('week', dt_ini_pcs))) as month,\n    day(date_add('week', 1, date_trunc('week', dt_ini_pcs))) as day         \n    FROM intenciones", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}, {"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}]}, "model.VoluntaryChurnABT.stg_dtl_pa__nodos": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_dtl_pa__nodos", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/dtl_pa/stg_dtl_pa__nodos.sql", "original_file_path": "models/staging/dtl_pa/stg_dtl_pa__nodos.sql", "unique_id": "model.VoluntaryChurnABT.stg_dtl_pa__nodos", "fqn": ["VoluntaryChurnABT", "staging", "dtl_pa", "stg_dtl_pa__nodos"], "alias": "stg_dtl_pa__nodos", "checksum": {"name": "sha256", "checksum": "33c6b0b71dfc70ef2924b3895d6f7a0df43a21100de530c6e51a2bba88fa54d8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nodo": {"name": "nodo", "description": "Maximo de NTW_CMPT_NM", "meta": {}, "data_type": null, "quote": null, "tags": []}, "es_gold": {"name": "es_gold", "description": "Si nodo contiene '%GOLD%'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.364922, "relation_name": "dev_voluntary_churn_staging.stg_dtl_pa__nodos", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nWITH nodos_cuenta_dia as (\n    SELECT DISTINCT\n    ARTF.HH_CD,\n\tNTWD.NTW_CMPT_NM,\n    DATE(CONCAT(NTWD.year, '-', NTWD.month, '-', NTWD.day)) fecha\n    FROM PROD_RAW_DWH_DTL_PA.AR_TRCKNG_FCT ARTF\n\tLEFT JOIN PROD_RAW_DWH_DTL.SRC_STM_DIM SRCD ON SRCD.SRC_STM_KEY = ARTF.SRC_STM_KEY\n                                                    AND CONCAT(SRCD.year, '-', SRCD.month, '-', SRCD.day) = CONCAT(ARTF.year, '-', ARTF.month, '-', ARTF.day)\n\tLEFT JOIN PROD_RAW_DWH_DTL_PA.NTW_CMPT_DIM NTWD ON NTWD.NTW_CMPT_KEY = ARTF.NTW_CMPT_KEY\n                                                    AND CONCAT(NTWD.year, '-', NTWD.month, '-', NTWD.day) = CONCAT(ARTF.year, '-', ARTF.month, '-', ARTF.day)\n    WHERE \n        SRCD.SRC_STM_UNIT_NM = 'HOME'\n        AND ARTF.HH_CD IS NOT NULL\n        AND NTWD.NTW_CMPT_NM != 'NOT APPLICABLE'\n        AND SRCD.end_dt > SRCD.eff_dt\n        AND NTWD.end_dt > NTWD.eff_dt\n        AND NTWD.year >= '2023'\n        AND DATE(CONCAT(NTWD.year, '-', NTWD.month, '-', NTWD.day)) <= date_trunc('week', CURRENT_DATE)\n        ),\n\nclasificacion_semanal AS (\n    SELECT \n    hh_cd,\n    date_trunc('week', fecha) AS fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', fecha)) AS fecha_final_semana,\n    MAX(NTW_CMPT_NM) AS nodo\n    FROM nodos_cuenta_dia\n    group by hh_cd, date_trunc('week', fecha), date_add('day', 6, date_trunc('week', fecha))\n)\n\nSELECT \n*,\ncase when nodo like '%GOLD%' then 1 else 0 end AS es_gold,\n{{ partition('fecha_inicio_semana')}}\nFROM clasificacion_semanal\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/dtl_pa/stg_dtl_pa__nodos.sql", "compiled": true, "compiled_code": "\n\nWITH nodos_cuenta_dia as (\n    SELECT DISTINCT\n    ARTF.HH_CD,\n\tNTWD.NTW_CMPT_NM,\n    DATE(CONCAT(NTWD.year, '-', NTWD.month, '-', NTWD.day)) fecha\n    FROM PROD_RAW_DWH_DTL_PA.AR_TRCKNG_FCT ARTF\n\tLEFT JOIN PROD_RAW_DWH_DTL.SRC_STM_DIM SRCD ON SRCD.SRC_STM_KEY = ARTF.SRC_STM_KEY\n                                                    AND CONCAT(SRCD.year, '-', SRCD.month, '-', SRCD.day) = CONCAT(ARTF.year, '-', ARTF.month, '-', ARTF.day)\n\tLEFT JOIN PROD_RAW_DWH_DTL_PA.NTW_CMPT_DIM NTWD ON NTWD.NTW_CMPT_KEY = ARTF.NTW_CMPT_KEY\n                                                    AND CONCAT(NTWD.year, '-', NTWD.month, '-', NTWD.day) = CONCAT(ARTF.year, '-', ARTF.month, '-', ARTF.day)\n    WHERE \n        SRCD.SRC_STM_UNIT_NM = 'HOME'\n        AND ARTF.HH_CD IS NOT NULL\n        AND NTWD.NTW_CMPT_NM != 'NOT APPLICABLE'\n        AND SRCD.end_dt > SRCD.eff_dt\n        AND NTWD.end_dt > NTWD.eff_dt\n        AND NTWD.year >= '2023'\n        AND DATE(CONCAT(NTWD.year, '-', NTWD.month, '-', NTWD.day)) <= date_trunc('week', CURRENT_DATE)\n        ),\n\nclasificacion_semanal AS (\n    SELECT \n    hh_cd,\n    date_trunc('week', fecha) AS fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', fecha)) AS fecha_final_semana,\n    MAX(NTW_CMPT_NM) AS nodo\n    FROM nodos_cuenta_dia\n    group by hh_cd, date_trunc('week', fecha), date_add('day', 6, date_trunc('week', fecha))\n)\n\nSELECT \n*,\ncase when nodo like '%GOLD%' then 1 else 0 end AS es_gold,\n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\nFROM clasificacion_semanal\nWHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.stg_360_staging__facturas": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_staging__facturas", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/360_staging/stg_360_staging__facturas.sql", "original_file_path": "models/staging/360_staging/stg_360_staging__facturas.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_staging__facturas", "fqn": ["VoluntaryChurnABT", "staging", "360_staging", "stg_360_staging__facturas"], "alias": "stg_360_staging__facturas", "checksum": {"name": "sha256", "checksum": "a9658b38a2c5ecbbef184bdc06636905e419a1216d2b21cbe7f108247364e24b"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inv_prd_eff_dt": {"name": "inv_prd_eff_dt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ttl": {"name": "ttl", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "srl_nmbr": {"name": "srl_nmbr", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "es_factura": {"name": "es_factura", "description": "Booleano si srl_nmbr contiene 'FAC-%'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.362806, "relation_name": "dev_voluntary_churn_staging.stg_360_staging__facturas", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\n\nwith clasificacion_conversion as (\n    SELECT DISTINCT\n    bill_ar_cd as hh_cd,\n    inv_prd_eff_dt,\n    ttl,\n    srl_nmbr,\n    case when srl_nmbr like 'FAC-%' then 1 else 0 end es_factura,\n    date_trunc('week', inv_prd_eff_dt) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', inv_prd_eff_dt)) as fecha_final_semana \n    FROM prod_staging.fact_factura_fijo\n    where inv_prd_eff_dt >= date('2023-01-01')\n    and year >= '2023'\n    and inv_prd_eff_dt <= CURRENT_DATE\n)\n\nselect\n*,\n{{ partition('fecha_inicio_semana') }}\nfrom clasificacion_conversion\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/360_staging/stg_360_staging__facturas.sql", "compiled": true, "compiled_code": "\n\nwith clasificacion_conversion as (\n    SELECT DISTINCT\n    bill_ar_cd as hh_cd,\n    inv_prd_eff_dt,\n    ttl,\n    srl_nmbr,\n    case when srl_nmbr like 'FAC-%' then 1 else 0 end es_factura,\n    date_trunc('week', inv_prd_eff_dt) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', inv_prd_eff_dt)) as fecha_final_semana \n    FROM prod_staging.fact_factura_fijo\n    where inv_prd_eff_dt >= date('2023-01-01')\n    and year >= '2023'\n    and inv_prd_eff_dt <= CURRENT_DATE\n)\n\nselect\n*,\n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\nfrom clasificacion_conversion\nWHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.stg_360_analytics__metricas": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_360_analytics__metricas", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/360_analytics/stg_360_analytics__metricas.sql", "original_file_path": "models/staging/360_analytics/stg_360_analytics__metricas.sql", "unique_id": "model.VoluntaryChurnABT.stg_360_analytics__metricas", "fqn": ["VoluntaryChurnABT", "staging", "360_analytics", "stg_360_analytics__metricas"], "alias": "stg_360_analytics__metricas", "checksum": {"name": "sha256", "checksum": "467aa14b2b6e2c9bec8e11589113e28a38c0ad51f8597b69a3a4cd2c13bc8a37"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "st_hh_cd": {"name": "st_hh_cd", "description": "Donde st_hh_cd sea 'Activo'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ar_actvn_dt": {"name": "ar_actvn_dt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiene_descuento_int": {"name": "tiene_descuento_int", "description": "Si tiene descuento en int", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiene_descuento_tel": {"name": "tiene_descuento_tel", "description": "Si tiene descuento en tel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tiene_descuento_tv": {"name": "tiene_descuento_tv", "description": "Si tiene descuento en tv", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cliente_arreglo_pago": {"name": "cliente_arreglo_pago", "description": "Si tiene cliente_arreglo_pago", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctt": {"name": "ctt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amt_due": {"name": "amt_due", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unexp_amt": {"name": "unexp_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ttl": {"name": "ttl", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "antiguedad_ultimo_ctt_tel": {"name": "antiguedad_ultimo_ctt_tel", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "antiguedad_ultimo_ctt_int": {"name": "antiguedad_ultimo_ctt_int", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "antiguedad_ultimo_ctt_tv": {"name": "antiguedad_ultimo_ctt_tv", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intencion_producto_int": {"name": "intencion_producto_int", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intencion_producto_tv": {"name": "intencion_producto_tv", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intencion_producto_tel": {"name": "intencion_producto_tel", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctt_producto_tel": {"name": "ctt_producto_tel", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctt_producto_int": {"name": "ctt_producto_int", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctt_producto_tv": {"name": "ctt_producto_tv", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_30_amt": {"name": "at_30_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_60_amt": {"name": "at_60_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_90_amt": {"name": "at_90_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_120_amt": {"name": "at_120_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_150_amt": {"name": "at_150_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_180_amt": {"name": "at_180_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_210_amt": {"name": "at_210_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_240_amt": {"name": "at_240_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_270_amt": {"name": "at_270_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_300_amt": {"name": "at_300_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_330_amt": {"name": "at_330_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "at_360_amt": {"name": "at_360_amt", "description": "Proviene del tablon fijo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pd_ln_nm_tv": {"name": "pd_ln_nm_tv", "description": "Producto tv activo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pd_ln_nm_tel": {"name": "pd_ln_nm_tel", "description": "Producto tel activo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pd_ln_nm_int": {"name": "pd_ln_nm_int", "description": "Producto int activo", "meta": {}, "data_type": null, "quote": null, "tags": []}, "descuento_int": {"name": "descuento_int", "description": "Si tiene descuento en int", "meta": {}, "data_type": null, "quote": null, "tags": []}, "descuento_tel": {"name": "descuento_tel", "description": "Si tiene descuento en tel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "descuento_tv": {"name": "descuento_tv", "description": "Si tiene descuento en tv", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resultado_intencion_int": {"name": "resultado_intencion_int", "description": "Resultado de intenci\u00f3n de cancelaci\u00f3n de int", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resultado_intencion_tv": {"name": "resultado_intencion_tv", "description": "Resultado de intenci\u00f3n de cancelaci\u00f3n de tv", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resultado_intencion_tel": {"name": "resultado_intencion_tel", "description": "Resultado de intenci\u00f3n de cancelaci\u00f3n de tel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "motivo_intencion_int": {"name": "motivo_intencion_int", "description": "Motivo de intenci\u00f3n de cancelaci\u00f3n de int", "meta": {}, "data_type": null, "quote": null, "tags": []}, "motivo_intencion_tv": {"name": "motivo_intencion_tv", "description": "Motivo de intenci\u00f3n de cancelaci\u00f3n de tv", "meta": {}, "data_type": null, "quote": null, "tags": []}, "motivo_intencion_tel": {"name": "motivo_intencion_tel", "description": "Motivo de intenci\u00f3n de cancelaci\u00f3n de tel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha": {"name": "fecha", "description": "Fecha partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.3601742, "relation_name": "dev_voluntary_churn_staging.stg_360_analytics__metricas", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nwith clasificacion_conversion as (\n    select\n    hh_cd,\n    st_hh_cd,\n    cast((case when ar_actvn_dt is null or ar_actvn_dt = '' then '-1' else ar_actvn_dt end) as double) as ar_actvn_dt,\n    cast((case tiene_descuento_int when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as tiene_descuento_int, \n    cast((case tiene_descuento_tel when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as tiene_descuento_tel, \n    cast((case tiene_descuento_tv when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as tiene_descuento_tv, \n    cast((case cliente_arreglo_pago when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as cliente_arreglo_pago, \n    cast(coalesce(case ctt when '' then '-1' else ctt end, '-1') as double) as ctt,\n    cast(coalesce(case amt_due when '' then '-1' else amt_due end, '-1') as double) as amt_due,\n    cast(coalesce(case unexp_amt when '' then '-1' else unexp_amt end, '-1') as double) as unexp_amt,\n    cast(coalesce(case ttl when '' then '-1' else ttl end, '-1') as double) as ttl,\n    cast(coalesce(case antiguedad_ultimo_ctt_tel when '' then '-1' else antiguedad_ultimo_ctt_tel end, '-1') as double) as antiguedad_ultimo_ctt_tel,\n    cast(coalesce(case antiguedad_ultimo_ctt_int when '' then '-1' else antiguedad_ultimo_ctt_int end, '-1') as double) as antiguedad_ultimo_ctt_int,\n    cast(coalesce(case antiguedad_ultimo_ctt_tv when '' then '-1' else antiguedad_ultimo_ctt_tv end, '-1') as double) as antiguedad_ultimo_ctt_tv,\n    cast(coalesce(case intencion_producto_int when '' then '-1' else intencion_producto_int end, '-1') as double) as intencion_producto_int,\n    cast(coalesce(case intencion_producto_tv when '' then '-1' else intencion_producto_tv end, '-1') as double) as intencion_producto_tv,\n    cast(coalesce(case intencion_producto_tel when '' then '-1' else intencion_producto_tel end, '-1') as double) as intencion_producto_tel,\n    cast(coalesce(case ctt_producto_tel when '' then '-1' else ctt_producto_tel end, '-1') as double) as ctt_producto_tel,\n    cast(coalesce(case ctt_producto_int when '' then '-1' else ctt_producto_int end, '-1') as double) as ctt_producto_int,\n    cast(coalesce(case ctt_producto_tv when '' then '-1' else ctt_producto_tv end, '-1') as double) as ctt_producto_tv,\n    cast(coalesce(case at_30_amt when '' then '-1' else at_30_amt end, '-1') as double) as at_30_amt,\n    cast(coalesce(case at_60_amt when '' then '-1' else at_60_amt end, '-1') as double) as at_60_amt,\n    cast(coalesce(case at_90_amt when '' then '-1' else at_90_amt end, '-1') as double) as at_90_amt,\n    cast(coalesce(case at_120_amt when '' then '-1' else at_120_amt end, '-1') as double) as at_120_amt,\n    cast(coalesce(case at_150_amt when '' then '-1' else at_150_amt end, '-1') as double) as at_150_amt,\n    cast(coalesce(case at_180_amt when '' then '-1' else at_180_amt end, '-1') as double) as at_180_amt,\n    cast(coalesce(case at_210_amt when '' then '-1' else at_210_amt end, '-1') as double) as at_210_amt,\n    cast(coalesce(case at_240_amt when '' then '-1' else at_240_amt end, '-1') as double) as at_240_amt,\n    cast(coalesce(case at_270_amt when '' then '-1' else at_270_amt end, '-1') as double) as at_270_amt,\n    cast(coalesce(case at_300_amt when '' then '-1' else at_300_amt end, '-1') as double) as at_300_amt,\n    cast(coalesce(case at_330_amt when '' then '-1' else at_330_amt end, '-1') as double) as at_330_amt,\n    cast(coalesce(case at_360_amt when '' then '-1' else at_360_amt end, '-1') as double) as at_360_amt,\n    case when pd_ln_nm_tv in ('PLAY HD', 'TV PERFECTO', 'PLAN FAMILIAR', 'TV COMBO PACK') then pd_ln_nm_tel else 'resto_pd_ln_nm_tel' end as pd_ln_nm_tv,\n    case when pd_ln_nm_tel in ('ILIMITADO TIGO FIJO') then pd_ln_nm_int else 'resto_pd_ln_nm_int' end as pd_ln_nm_tel,\n    case when pd_ln_nm_int in (pd_ln_nm_tv) then pd_ln_nm_tv else 'resto_pd_ln_nm_tv' end as pd_ln_nm_int,\n    case when descuento_int is null then 'SIN DESCUENTO' else 'CON DESCUENTO' end as descuento_int,\n    case when descuento_tel is null then 'SIN DESCUENTO' else 'CON DESCUENTO' end as descuento_tel,\n    case when descuento_tv is null then 'SIN DESCUENTO' else 'CON DESCUENTO' end as descuento_tv,\n    case when resultado_intencion_int in ('Cancelacion por usuario') then resultado_intencion_int else 'resto_resultado_intencion_int' end as resultado_intencion_int,\n    case when resultado_intencion_tv in ('Cancelacion por usuario') then resultado_intencion_tv else 'resto_resultado_intencion_tv' end as resultado_intencion_tv,\n    case when resultado_intencion_tel in ('Cambio de plan') then resultado_intencion_tel else 'resto_resultado_intencion_tel' end as resultado_intencion_tel,\n    case when motivo_intencion_int in ('Cancelacion por usuario') then motivo_intencion_int else 'resto_motivo_intencion_int' end as motivo_intencion_int,\n    case when motivo_intencion_tv in ('Cancelacion por usuario', 'Cambio de plan') then motivo_intencion_tv else 'resto_motivo_intencion_tv' end as motivo_intencion_tv,\n    case when motivo_intencion_tel in ('Cambio de plan', 'Procedimientos internos') then motivo_intencion_tel else 'resto_motivo_intencion_tel' end as motivo_intencion_tel,\n    date_trunc('week', date(CONCAT(year, '-', month, '-', day))) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', date(CONCAT(year, '-', month, '-', day)))) as fecha_final_semana,    \n    date(CONCAT(year, '-', month, '-', day)) fecha\n    from prod_analytics.tablon_fijo\n    where year >= '2023'\n    and date(CONCAT(year, '-', month, '-', day)) <= date_trunc('week', CURRENT_DATE)\n    and st_hh_cd = 'ACTIVO'\n    and doc_tp_nm = 'CEDULA DE IDENTIDAD'\n)\n\nselect\n*,  \n{{ partition('fecha_inicio_semana')}}\nFROM clasificacion_conversion\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": []}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/360_analytics/stg_360_analytics__metricas.sql", "compiled": true, "compiled_code": "\n\nwith clasificacion_conversion as (\n    select\n    hh_cd,\n    st_hh_cd,\n    cast((case when ar_actvn_dt is null or ar_actvn_dt = '' then '-1' else ar_actvn_dt end) as double) as ar_actvn_dt,\n    cast((case tiene_descuento_int when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as tiene_descuento_int, \n    cast((case tiene_descuento_tel when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as tiene_descuento_tel, \n    cast((case tiene_descuento_tv when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as tiene_descuento_tv, \n    cast((case cliente_arreglo_pago when 'True' then '1'\n                                   when 'False' then '0'\n                                   else '-1' end) as integer) as cliente_arreglo_pago, \n    cast(coalesce(case ctt when '' then '-1' else ctt end, '-1') as double) as ctt,\n    cast(coalesce(case amt_due when '' then '-1' else amt_due end, '-1') as double) as amt_due,\n    cast(coalesce(case unexp_amt when '' then '-1' else unexp_amt end, '-1') as double) as unexp_amt,\n    cast(coalesce(case ttl when '' then '-1' else ttl end, '-1') as double) as ttl,\n    cast(coalesce(case antiguedad_ultimo_ctt_tel when '' then '-1' else antiguedad_ultimo_ctt_tel end, '-1') as double) as antiguedad_ultimo_ctt_tel,\n    cast(coalesce(case antiguedad_ultimo_ctt_int when '' then '-1' else antiguedad_ultimo_ctt_int end, '-1') as double) as antiguedad_ultimo_ctt_int,\n    cast(coalesce(case antiguedad_ultimo_ctt_tv when '' then '-1' else antiguedad_ultimo_ctt_tv end, '-1') as double) as antiguedad_ultimo_ctt_tv,\n    cast(coalesce(case intencion_producto_int when '' then '-1' else intencion_producto_int end, '-1') as double) as intencion_producto_int,\n    cast(coalesce(case intencion_producto_tv when '' then '-1' else intencion_producto_tv end, '-1') as double) as intencion_producto_tv,\n    cast(coalesce(case intencion_producto_tel when '' then '-1' else intencion_producto_tel end, '-1') as double) as intencion_producto_tel,\n    cast(coalesce(case ctt_producto_tel when '' then '-1' else ctt_producto_tel end, '-1') as double) as ctt_producto_tel,\n    cast(coalesce(case ctt_producto_int when '' then '-1' else ctt_producto_int end, '-1') as double) as ctt_producto_int,\n    cast(coalesce(case ctt_producto_tv when '' then '-1' else ctt_producto_tv end, '-1') as double) as ctt_producto_tv,\n    cast(coalesce(case at_30_amt when '' then '-1' else at_30_amt end, '-1') as double) as at_30_amt,\n    cast(coalesce(case at_60_amt when '' then '-1' else at_60_amt end, '-1') as double) as at_60_amt,\n    cast(coalesce(case at_90_amt when '' then '-1' else at_90_amt end, '-1') as double) as at_90_amt,\n    cast(coalesce(case at_120_amt when '' then '-1' else at_120_amt end, '-1') as double) as at_120_amt,\n    cast(coalesce(case at_150_amt when '' then '-1' else at_150_amt end, '-1') as double) as at_150_amt,\n    cast(coalesce(case at_180_amt when '' then '-1' else at_180_amt end, '-1') as double) as at_180_amt,\n    cast(coalesce(case at_210_amt when '' then '-1' else at_210_amt end, '-1') as double) as at_210_amt,\n    cast(coalesce(case at_240_amt when '' then '-1' else at_240_amt end, '-1') as double) as at_240_amt,\n    cast(coalesce(case at_270_amt when '' then '-1' else at_270_amt end, '-1') as double) as at_270_amt,\n    cast(coalesce(case at_300_amt when '' then '-1' else at_300_amt end, '-1') as double) as at_300_amt,\n    cast(coalesce(case at_330_amt when '' then '-1' else at_330_amt end, '-1') as double) as at_330_amt,\n    cast(coalesce(case at_360_amt when '' then '-1' else at_360_amt end, '-1') as double) as at_360_amt,\n    case when pd_ln_nm_tv in ('PLAY HD', 'TV PERFECTO', 'PLAN FAMILIAR', 'TV COMBO PACK') then pd_ln_nm_tel else 'resto_pd_ln_nm_tel' end as pd_ln_nm_tv,\n    case when pd_ln_nm_tel in ('ILIMITADO TIGO FIJO') then pd_ln_nm_int else 'resto_pd_ln_nm_int' end as pd_ln_nm_tel,\n    case when pd_ln_nm_int in (pd_ln_nm_tv) then pd_ln_nm_tv else 'resto_pd_ln_nm_tv' end as pd_ln_nm_int,\n    case when descuento_int is null then 'SIN DESCUENTO' else 'CON DESCUENTO' end as descuento_int,\n    case when descuento_tel is null then 'SIN DESCUENTO' else 'CON DESCUENTO' end as descuento_tel,\n    case when descuento_tv is null then 'SIN DESCUENTO' else 'CON DESCUENTO' end as descuento_tv,\n    case when resultado_intencion_int in ('Cancelacion por usuario') then resultado_intencion_int else 'resto_resultado_intencion_int' end as resultado_intencion_int,\n    case when resultado_intencion_tv in ('Cancelacion por usuario') then resultado_intencion_tv else 'resto_resultado_intencion_tv' end as resultado_intencion_tv,\n    case when resultado_intencion_tel in ('Cambio de plan') then resultado_intencion_tel else 'resto_resultado_intencion_tel' end as resultado_intencion_tel,\n    case when motivo_intencion_int in ('Cancelacion por usuario') then motivo_intencion_int else 'resto_motivo_intencion_int' end as motivo_intencion_int,\n    case when motivo_intencion_tv in ('Cancelacion por usuario', 'Cambio de plan') then motivo_intencion_tv else 'resto_motivo_intencion_tv' end as motivo_intencion_tv,\n    case when motivo_intencion_tel in ('Cambio de plan', 'Procedimientos internos') then motivo_intencion_tel else 'resto_motivo_intencion_tel' end as motivo_intencion_tel,\n    date_trunc('week', date(CONCAT(year, '-', month, '-', day))) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', date(CONCAT(year, '-', month, '-', day)))) as fecha_final_semana,    \n    date(CONCAT(year, '-', month, '-', day)) fecha\n    from prod_analytics.tablon_fijo\n    where year >= '2023'\n    and date(CONCAT(year, '-', month, '-', day)) <= date_trunc('week', CURRENT_DATE)\n    and st_hh_cd = 'ACTIVO'\n    and doc_tp_nm = 'CEDULA DE IDENTIDAD'\n)\n\nselect\n*,  \n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\nFROM clasificacion_conversion\nWHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.stg_smy_pa__performances": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__performances", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/smy_pa/stg_smy_pa__performances.sql", "original_file_path": "models/staging/smy_pa/stg_smy_pa__performances.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__performances", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__performances"], "alias": "stg_smy_pa__performances", "checksum": {"name": "sha256", "checksum": "366f7a1a22582e8492f7c45c11d00eedbeb413110ad41af757ac9bbf31e62627"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"nodes": {"name": "nodes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "descripcion": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim"}, "dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pct_ucer": {"name": "pct_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pct_npa": {"name": "pct_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snr_deg": {"name": "snr_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ucer_deg": {"name": "ucer_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "samp": {"name": "samp", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numr": {"name": "numr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cm_us": {"name": "cm_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_ut_us": {"name": "desc_ut_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_clss_npa": {"name": "desc_clss_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_clss_ucer": {"name": "desc_clss_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_clss_snr": {"name": "desc_clss_snr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.336452, "relation_name": "dev_voluntary_churn_staging.stg_smy_pa__performances", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\n     \nwith clasificacion_conversion as (\n    SELECT\n    nodes,\n    desc_clss_snr,\n    desc_clss_ucer,\n    desc_clss_npa,\n    desc_ut_us,\n    cm_us,\n    numr,\n    samp,\n    ucer_deg,\n    snr_deg,\n    pct_npa,\n    pct_ucer,\n    date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d')) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d'))) as fecha_final_semana \n    FROM {{ get_last_partition('prod_raw_dwh_smy_pa', 'cstmr_360_perfhcf_fix_dim') }}\n    where date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d') >= date('2023-01-01')\n    AND DATE(date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d')) <= date_trunc('week', CURRENT_DATE)\n)\n\nselect\n*,\n{{ partition('fecha_inicio_semana') }}\nfrom clasificacion_conversion\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [["tablas_particiones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_last_partition", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.tablas_particiones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/smy_pa/stg_smy_pa__performances.sql", "compiled": true, "compiled_code": "\n     \nwith clasificacion_conversion as (\n    SELECT\n    nodes,\n    desc_clss_snr,\n    desc_clss_ucer,\n    desc_clss_npa,\n    desc_ut_us,\n    cm_us,\n    numr,\n    samp,\n    ucer_deg,\n    snr_deg,\n    pct_npa,\n    pct_ucer,\n    date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d')) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d'))) as fecha_final_semana \n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_perfhcf_fix_dim')\n    )\n    )\n\n    where date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d') >= date('2023-01-01')\n    AND DATE(date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d')) <= date_trunc('week', CURRENT_DATE)\n)\n\nselect\n*,\n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\nfrom clasificacion_conversion\nWHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.stg_smy_pa__retenciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__retenciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/smy_pa/stg_smy_pa__retenciones.sql", "original_file_path": "models/staging/smy_pa/stg_smy_pa__retenciones.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__retenciones"], "alias": "stg_smy_pa__retenciones", "checksum": {"name": "sha256", "checksum": "a305f5f9fe6a4e7dc6ec8130dce80e40fd2a01045752cd8ef7ae236343adad2f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_ini_pcs": {"name": "dt_ini_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctrtd_fm": {"name": "ctrtd_fm", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctrtd_to": {"name": "ctrtd_to", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_pd": {"name": "id_pd", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_tp_clnt": {"name": "id_tp_clnt", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt_load": {"name": "dt_load", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "ephemeral"}, "created_at": 1681142229.348425, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM {{ get_last_partition('prod_raw_dwh_smy_pa', 'cstmr_360_rtntrgt_fix_dim') }}\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND {{ run_mode('dt_ini_pcs', var(\"modo\")) }}\n)\n\nSELECT * FROM retenciones", "language": "sql", "refs": [["tablas_particiones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_last_partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.tablas_particiones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/smy_pa/stg_smy_pa__retenciones.sql", "compiled": true, "compiled_code": "\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.stg_smy_pa__consumos": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__consumos", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/smy_pa/stg_smy_pa__consumos.sql", "original_file_path": "models/staging/smy_pa/stg_smy_pa__consumos.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__consumos", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__consumos"], "alias": "stg_smy_pa__consumos", "checksum": {"name": "sha256", "checksum": "0bd03fdfe65f5cc8a97fff6ebc283a02da86f78b71226a60e0dd1fdaa020f85a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trfc_dwld": {"name": "trfc_dwld", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trfc_upld": {"name": "trfc_upld", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.3447812, "relation_name": "dev_voluntary_churn_staging.stg_smy_pa__consumos", "raw_code": "{{ config(materialized='incremental', partitioned_by = ['year', 'month', 'day']) }}\n\nwith clasificacion_conversion as (\n    select\n    id_ac as hh_cd,\n    cast(split(trfc_dwld, ' ')[1] as double) as trfc_dwld,\n    cast(split(trfc_upld, ' ')[1] as double) as trfc_upld,\n    date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1] , '%Y%m%d')) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1] , '%Y%m%d'))) as fecha_final_semana\n    FROM {{ get_last_partition('prod_raw_dwh_smy_pa', 'cstmr_360_data_fix_fct') }}\n    where date_parse(split(cast(dt_inf as varchar), '.')[1] , '%Y%m%d') >= date('2023-01-01')\n    AND DATE(date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d')) <= date_trunc('week', CURRENT_DATE)\n    and id_ac is not null\n)\n\nselect\n*,\n{{ partition('fecha_inicio_semana') }}\nfrom clasificacion_conversion\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [["tablas_particiones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_last_partition", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.tablas_particiones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/smy_pa/stg_smy_pa__consumos.sql", "compiled": true, "compiled_code": "\n\nwith clasificacion_conversion as (\n    select\n    id_ac as hh_cd,\n    cast(split(trfc_dwld, ' ')[1] as double) as trfc_dwld,\n    cast(split(trfc_upld, ' ')[1] as double) as trfc_upld,\n    date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1] , '%Y%m%d')) as fecha_inicio_semana,\n    date_add('day', 6, date_trunc('week', date_parse(split(cast(dt_inf as varchar), '.')[1] , '%Y%m%d'))) as fecha_final_semana\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_data_fix_fct\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_data_fix_fct')\n    )\n    )\n\n    where date_parse(split(cast(dt_inf as varchar), '.')[1] , '%Y%m%d') >= date('2023-01-01')\n    AND DATE(date_parse(split(cast(dt_inf as varchar), '.')[1], '%Y%m%d')) <= date_trunc('week', CURRENT_DATE)\n    and id_ac is not null\n)\n\nselect\n*,\n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\nfrom clasificacion_conversion\nWHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_staging", "name": "stg_smy_pa__cancelaciones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "staging/smy_pa/stg_smy_pa__cancelaciones.sql", "original_file_path": "models/staging/smy_pa/stg_smy_pa__cancelaciones.sql", "unique_id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "fqn": ["VoluntaryChurnABT", "staging", "smy_pa", "stg_smy_pa__cancelaciones"], "alias": "stg_smy_pa__cancelaciones", "checksum": {"name": "sha256", "checksum": "a2d5bd80eb719b924f0b2cc9a04d034a09f5e7178e62a798e6b8a18c45d28772"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"dt_ini_pcs": {"name": "dt_ini_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt_inf": {"name": "dt_inf", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctrtd_fm": {"name": "ctrtd_fm", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ctrtd_to": {"name": "ctrtd_to", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_pd": {"name": "id_pd", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_tp_clnt": {"name": "id_tp_clnt", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dt_load": {"name": "dt_load", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_pcs": {"name": "id_pcs", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim y prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "a\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "d\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/staging/staging.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "ephemeral"}, "created_at": 1681142229.342156, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral') }}\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM {{ get_last_partition('prod_raw_dwh_smy_pa', 'cstmr_360_cncltrgt01_fix_dim') }}\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM {{ get_last_partition('prod_raw_dwh_smy_pa', 'cstmr_360_cncltrgt02_fix_dim') }}\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND {{ run_mode('dt_ini_pcs', var(\"modo\")) }}", "language": "sql", "refs": [["tablas_particiones"], ["tablas_particiones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_last_partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.tablas_particiones", "model.VoluntaryChurnABT.tablas_particiones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/smy_pa/stg_smy_pa__cancelaciones.sql", "compiled": true, "compiled_code": "\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.dbt_results": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_utilities", "name": "dbt_results", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "utilities/dbt_results.sql", "original_file_path": "models/utilities/dbt_results.sql", "unique_id": "model.VoluntaryChurnABT.dbt_results", "fqn": ["VoluntaryChurnABT", "utilities", "dbt_results"], "alias": "dbt_results", "checksum": {"name": "sha256", "checksum": "9924866b2080242c1a67ba188b1489506e0110f036aa5082c856877e8f623a54"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "append", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "utilities", "materialized": "incremental", "incremental_strategy": "append"}, "created_at": 1681142229.2042618, "relation_name": "dev_voluntary_churn_utilities.dbt_results", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'append'\n  )\n}}\n\nwith empty_table as (\n    select\n        cast('1' as varchar(200)) as result_id,\n        cast('1' as varchar(200)) as invocation_id,\n        cast('1' as varchar(200)) as unique_id,\n        cast('1' as varchar(200)) as database_name,\n        cast('1' as varchar(200)) as schema_name,\n        cast('1' as varchar(200)) as name,\n        cast('1' as varchar(200)) as resource_type,\n        cast('1' as varchar(200)) as status,\n        cast('1' as double) as execution_time,\n        cast('1' as int) as rows_affected,\n        cast(current_timestamp as timestamp) time_stamp\n)\n\nselect * from empty_table\n-- This is a filter so we will never actually insert these values\nwhere 1 = 0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/utilities/dbt_results.sql", "compiled": true, "compiled_code": "\n\nwith empty_table as (\n    select\n        cast('1' as varchar(200)) as result_id,\n        cast('1' as varchar(200)) as invocation_id,\n        cast('1' as varchar(200)) as unique_id,\n        cast('1' as varchar(200)) as database_name,\n        cast('1' as varchar(200)) as schema_name,\n        cast('1' as varchar(200)) as name,\n        cast('1' as varchar(200)) as resource_type,\n        cast('1' as varchar(200)) as status,\n        cast('1' as double) as execution_time,\n        cast('1' as int) as rows_affected,\n        cast(current_timestamp as timestamp) time_stamp\n)\n\nselect * from empty_table\n-- This is a filter so we will never actually insert these values\nwhere 1 = 0", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.tablas_particiones": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_utilities", "name": "tablas_particiones", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "utilities/tablas_particiones.sql", "original_file_path": "models/utilities/tablas_particiones.sql", "unique_id": "model.VoluntaryChurnABT.tablas_particiones", "fqn": ["VoluntaryChurnABT", "utilities", "tablas_particiones"], "alias": "tablas_particiones", "checksum": {"name": "sha256", "checksum": "eb9dc9dd2e758e8e3858baf627f366f1de16dda38037d282886b75efdcf68f8e"}, "config": {"enabled": true, "alias": null, "schema": "utilities", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"particion": {"name": "particion", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/utilities/utilities.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "utilities", "materialized": "table", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.544551, "relation_name": "dev_voluntary_churn_utilities.tablas_particiones", "raw_code": "{{ config(materialized='table', partitioned_by = ['year', 'month', 'day']) }}\n\n{% set sql_statement %}\n    SELECT \n    table_schema, \n    table_name\n    FROM   information_schema.tables\n    where table_schema in('prod_raw_dwh_smy_pa', 'prod_raw_dwh_dtl', 'prod_raw_dwh_dtl_pa', 'prod_analytics', 'prod_staging')\n    and table_name not like 'dwh%'\n    and table_name != 'cantidad_registros_oracle'\n    and table_name != 'dim_contacto'\n    and table_name != 'dim_cliente_id_unico'\n    and table_name != 'dim_producto'\n    and table_name != 'fact_cartera_detallada_movil'\n    and table_name not like '%temp_table%'\n\n\n{% endset %}\n\n{%- set tablas_raw = dbt_utils.get_query_results_as_dict(sql_statement) -%}\n\n{% for tabla in tablas_raw['table_name'] %}\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    '{{tabla}}' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"{{tablas_raw['table_schema'][loop.index0]}}\".\"{{tabla}}$partitions\"\n    {% if not loop.last %}\n          union all\n    {% endif %}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"], "nodes": []}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/utilities/tablas_particiones.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'bill_ar_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"bill_ar_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'svc_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"svc_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_rtntrgt_fix_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_inv_dtl_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_inv_dtl_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ar_trckng_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ar_trckng_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'inv_prd_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"inv_prd_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_trckng_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_trckng_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_grp_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_grp_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'dim_ubicacion' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"dim_ubicacion$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'pa_ip_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"pa_ip_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'mvmt_tp_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"mvmt_tp_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'st_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"st_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_unificada' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_unificada$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_enri_fix_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_enri_fix_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'prvn_pd_trckng_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"prvn_pd_trckng_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_pago' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_pago$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'geo_area_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"geo_area_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ip_prfl_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ip_prfl_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_perfhcf_fix_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'tablon_360_fijo' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_analytics\".\"tablon_360_fijo$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'tablon_fijo' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_analytics\".\"tablon_fijo$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'hh_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"hh_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'rgu_st_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"rgu_st_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'pd_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"pd_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_cncltrgt01_fix_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_inta_fix_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_inta_fix_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_dbt_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_dbt_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_doc_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_doc_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_factura_movil' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_factura_movil$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_detallada_fijo_producto' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo_producto$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_detallada_fijo_ultcambio' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo_ultcambio$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cmrcl_svc_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"cmrcl_svc_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ar_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ar_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_ctc_prfl_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_ctc_prfl_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ntw_cmpt_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ntw_cmpt_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'occptn_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"occptn_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'tablon_360' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_analytics\".\"tablon_360$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_ev_multioprg_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_ev_multioprg_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'monitoring' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_analytics\".\"monitoring$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_coll_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_coll_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'dim_ubicacion_temp_1' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"dim_ubicacion_temp_1$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'agng_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"agng_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ip_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ip_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'tablon_movil' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_analytics\".\"tablon_movil$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'dim_ubicacion_temp_2' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"dim_ubicacion_temp_2$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'pst_adr_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"pst_adr_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_detallada_fijo_dvc' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo_dvc$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'prvn_pd_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"prvn_pd_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'prod_susp_desc_cuentas' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_analytics\".\"prod_susp_desc_cuentas$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'bill_cycl_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"bill_cycl_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'hh_trckng_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"hh_trckng_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'dim_cliente' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"dim_cliente$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ntw_tchnlgy_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"ntw_tchnlgy_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_data_fix_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_detallada_fijo_cajas' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo_cajas$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_avldataops_fix_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_avldataops_fix_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cntry_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"cntry_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_detallada_fijo' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_doc_tp_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_doc_tp_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'gndr_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"gndr_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ar_mvmt_fct' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ar_mvmt_fct$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'src_stm_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"src_stm_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_factura_fijo' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_factura_fijo$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ar_ctc_prfl_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"ar_ctc_prfl_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_360_cncltrgt02_fix_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'fact_cartera_detallada_fijo_descuentos' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_staging\".\"fact_cartera_detallada_fijo_descuentos$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'prsn_tp_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"prsn_tp_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'control_oracle' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"control_oracle$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'inv_tp_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"inv_tp_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'geo_area_x_geo_area_brdg' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"geo_area_x_geo_area_brdg$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'doc_tp_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"doc_tp_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'cstmr_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl_pa\".\"cstmr_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'dt_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"dt_dim$partitions\"\n    \n          union all\n    \n\n    SELECT \n    max(date(concat(year,'-', month,'-', day))) as particion, \n    'ntnlty_dim' as tabla, \n    year(CURRENT_DATE) as year,\n    month(CURRENT_DATE) as month,\n    day(CURRENT_DATE) as day\n    FROM \"prod_raw_dwh_dtl\".\"ntnlty_dim$partitions\"\n    \n", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.int_facturas_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_facturas_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate/int_facturas_aggregated_to_week.sql", "original_file_path": "models/intermediate/int_facturas_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_facturas_aggregated_to_week"], "alias": "int_facturas_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "43a8d36c0140ada72d1a5915600d89db1eed89ce2f570864c1a5a518d06d8cb5"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.5519931, "relation_name": "dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nwith clasificacion_tipo as (\n    select \n    fecha_inicio_semana,\n    fecha_final_semana,\n    hh_cd, \n    case when es_factura = 1 then ttl else 0 end as ttl_factura,\n    case when es_factura = 0 then ttl else 0 end as ttl_no_factura\n    from {{ref('stg_360_staging__facturas')}}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n)\n\nselect \nhh_cd, \navg(ttl_factura) as avg_ttl_factura,\nsum(ttl_factura) as sum_ttl_factura,\nmax(ttl_factura) as max_ttl_factura,\navg(ttl_no_factura) as avg_ttl_no_factura,\nsum(ttl_no_factura) as sum_ttl_no_factura,\nmax(ttl_no_factura) as max_ttl_no_factura,\nfecha_inicio_semana, \nfecha_final_semana,\n{{ partition('clasificacion_tipo.fecha_inicio_semana')}}\nfrom clasificacion_tipo\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "language": "sql", "refs": [["stg_360_staging__facturas"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.stg_360_staging__facturas"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/int_facturas_aggregated_to_week.sql", "compiled": true, "compiled_code": "\n\nwith clasificacion_tipo as (\n    select \n    fecha_inicio_semana,\n    fecha_final_semana,\n    hh_cd, \n    case when es_factura = 1 then ttl else 0 end as ttl_factura,\n    case when es_factura = 0 then ttl else 0 end as ttl_no_factura\n    from dev_voluntary_churn_staging.stg_360_staging__facturas\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nselect \nhh_cd, \navg(ttl_factura) as avg_ttl_factura,\nsum(ttl_factura) as sum_ttl_factura,\nmax(ttl_factura) as max_ttl_factura,\navg(ttl_no_factura) as avg_ttl_no_factura,\nsum(ttl_no_factura) as sum_ttl_no_factura,\nmax(ttl_no_factura) as max_ttl_no_factura,\nfecha_inicio_semana, \nfecha_final_semana,\n\nYEAR(date_add('week', 1, clasificacion_tipo.fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, clasificacion_tipo.fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, clasificacion_tipo.fecha_inicio_semana)) as day \n\nfrom clasificacion_tipo\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.int_consumos_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_consumos_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate/int_consumos_aggregated_to_week.sql", "original_file_path": "models/intermediate/int_consumos_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_consumos_aggregated_to_week"], "alias": "int_consumos_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "0aecf9e242d1b152c277572fa907cedae540a0fbcbad4e98ed86f82cda1d6ec1"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.550192, "relation_name": "dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nwith features_data as (\n\n    select\n    hh_cd,\n    max(trfc_dwld) as max_trfc_dwld,\n    avg(trfc_dwld) as avg_trfc_dwld,\n    sum(trfc_dwld) as sum_trfc_dwld,\n    max(trfc_upld) as max_trfc_upld,\n    avg(trfc_upld) as avg_max_trfc_upld,\n    sum(trfc_upld) as sum_max_trfc_upld, \n    fecha_inicio_semana, \n    fecha_final_semana\n    from {{ ref('stg_smy_pa__consumos') }}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n    group by fecha_inicio_semana, fecha_final_semana, hh_cd\n\n)\n\nselect \n*,\n{{ partition('fecha_inicio_semana')}}\nfrom features_data", "language": "sql", "refs": [["stg_smy_pa__consumos"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/int_consumos_aggregated_to_week.sql", "compiled": true, "compiled_code": "\n\nwith features_data as (\n\n    select\n    hh_cd,\n    max(trfc_dwld) as max_trfc_dwld,\n    avg(trfc_dwld) as avg_trfc_dwld,\n    sum(trfc_dwld) as sum_trfc_dwld,\n    max(trfc_upld) as max_trfc_upld,\n    avg(trfc_upld) as avg_max_trfc_upld,\n    sum(trfc_upld) as sum_max_trfc_upld, \n    fecha_inicio_semana, \n    fecha_final_semana\n    from dev_voluntary_churn_staging.stg_smy_pa__consumos\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n    group by fecha_inicio_semana, fecha_final_semana, hh_cd\n\n)\n\nselect \n*,\n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\nfrom features_data", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.int_metricas_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_metricas_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate/int_metricas_aggregated_to_week.sql", "original_file_path": "models/intermediate/int_metricas_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_metricas_aggregated_to_week"], "alias": "int_metricas_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "9fb66045d0d0f3268fd03120606d1e163c087f53b03e2a776ae4800047b5a41a"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.5492601, "relation_name": "dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nwith tablon as(\n\n    select \n    * \n    from {{ref('stg_360_analytics__metricas')}}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n\n),\n\nclasificacion_categoricas as (\n    select \n    hh_cd,\n    st_hh_cd,\n    fecha_inicio_semana, \n    fecha_final_semana,\n    descuento_int,\n    descuento_tel,\n    descuento_tv,\n    resultado_intencion_int,\n    resultado_intencion_tv,\n    resultado_intencion_tel,\n    motivo_intencion_int,\n    motivo_intencion_tv,\n    motivo_intencion_tel,\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha desc) as rn\n    from tablon\n),\n\nultimos as (\n    select * \n    from clasificacion_categoricas\n    where rn = 1\n)\n\nselect \nts_tablon.hh_cd,\n{{ get_max_value([  'ctt', \n                    'amt_due', \n                    'unexp_amt',\n                    'at_30_amt',\n                    'at_60_amt',\n                    'at_90_amt',\n                    'at_120_amt',\n                    'at_150_amt',\n                    'at_180_amt',\n                    'at_210_amt',\n                    'at_240_amt',\n                    'at_270_amt',\n                    'at_300_amt',\n                    'at_330_amt',\n                    'at_360_amt',\n                    'ttl', \n                    'ctt_producto_tel',\n                    'ctt_producto_int', \n                    'ctt_producto_tv',\n                    'tiene_descuento_int',\n                    'tiene_descuento_tel',\n                    'tiene_descuento_tv',\n                    'cliente_arreglo_pago',\n                    'intencion_producto_int',\n                    'intencion_producto_tv',\n                    'intencion_producto_tel',\n                    'antiguedad_ultimo_ctt_tel',\n                    'antiguedad_ultimo_ctt_int',\n                    'antiguedad_ultimo_ctt_tv', \n                    'ar_actvn_dt' ]) }}\n{{ get_avg_value([  'ctt', \n                    'amt_due',\n                    'unexp_amt',\n                    'ttl',\n                    'ctt_producto_tel', \n                    'ctt_producto_int', \n                    'ctt_producto_tv']) }}\nmax(ultimos.descuento_int) as max_descuento_int,\nmax(ultimos.descuento_tel) as max_descuento_tel,\nmax(ultimos.descuento_tv) as max_descuento_tv,\nmax(ultimos.resultado_intencion_int) as max_resultado_intencion_int,\nmax(ultimos.resultado_intencion_tv) as max_resultado_intencion_tv,\nmax(ultimos.resultado_intencion_tel) as max_resultado_intencion_tel,\nmax(ultimos.motivo_intencion_int) as max_motivo_intencion_int,\nmax(ultimos.motivo_intencion_tv) as max_motivo_intencion_tv,\nmax(ultimos.motivo_intencion_tel) as max_motivo_intencion_tel,\nmax(ultimos.st_hh_cd) as st_hh_cd,\nts_tablon.fecha_inicio_semana, \nts_tablon.fecha_final_semana,\n{{ partition('ts_tablon.fecha_inicio_semana')}}\nfrom tablon as ts_tablon\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana, ts_tablon.fecha_final_semana", "language": "sql", "refs": [["stg_360_analytics__metricas"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.get_avg_value", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.stg_360_analytics__metricas"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/int_metricas_aggregated_to_week.sql", "compiled": true, "compiled_code": "\n\nwith tablon as(\n\n    select \n    * \n    from dev_voluntary_churn_staging.stg_360_analytics__metricas\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n\n),\n\nclasificacion_categoricas as (\n    select \n    hh_cd,\n    st_hh_cd,\n    fecha_inicio_semana, \n    fecha_final_semana,\n    descuento_int,\n    descuento_tel,\n    descuento_tv,\n    resultado_intencion_int,\n    resultado_intencion_tv,\n    resultado_intencion_tel,\n    motivo_intencion_int,\n    motivo_intencion_tv,\n    motivo_intencion_tel,\n    row_number() over(PARTITION by hh_cd, fecha_inicio_semana, fecha_final_semana order by fecha desc) as rn\n    from tablon\n),\n\nultimos as (\n    select * \n    from clasificacion_categoricas\n    where rn = 1\n)\n\nselect \nts_tablon.hh_cd,\n\n\n    \n    max(case when ctt = -1 then 0 else ctt end) as max_ctt, \n    \n    max(case when amt_due = -1 then 0 else amt_due end) as max_amt_due, \n    \n    max(case when unexp_amt = -1 then 0 else unexp_amt end) as max_unexp_amt, \n    \n    max(case when at_30_amt = -1 then 0 else at_30_amt end) as max_at_30_amt, \n    \n    max(case when at_60_amt = -1 then 0 else at_60_amt end) as max_at_60_amt, \n    \n    max(case when at_90_amt = -1 then 0 else at_90_amt end) as max_at_90_amt, \n    \n    max(case when at_120_amt = -1 then 0 else at_120_amt end) as max_at_120_amt, \n    \n    max(case when at_150_amt = -1 then 0 else at_150_amt end) as max_at_150_amt, \n    \n    max(case when at_180_amt = -1 then 0 else at_180_amt end) as max_at_180_amt, \n    \n    max(case when at_210_amt = -1 then 0 else at_210_amt end) as max_at_210_amt, \n    \n    max(case when at_240_amt = -1 then 0 else at_240_amt end) as max_at_240_amt, \n    \n    max(case when at_270_amt = -1 then 0 else at_270_amt end) as max_at_270_amt, \n    \n    max(case when at_300_amt = -1 then 0 else at_300_amt end) as max_at_300_amt, \n    \n    max(case when at_330_amt = -1 then 0 else at_330_amt end) as max_at_330_amt, \n    \n    max(case when at_360_amt = -1 then 0 else at_360_amt end) as max_at_360_amt, \n    \n    max(case when ttl = -1 then 0 else ttl end) as max_ttl, \n    \n    max(case when ctt_producto_tel = -1 then 0 else ctt_producto_tel end) as max_ctt_producto_tel, \n    \n    max(case when ctt_producto_int = -1 then 0 else ctt_producto_int end) as max_ctt_producto_int, \n    \n    max(case when ctt_producto_tv = -1 then 0 else ctt_producto_tv end) as max_ctt_producto_tv, \n    \n    max(case when tiene_descuento_int = -1 then 0 else tiene_descuento_int end) as max_tiene_descuento_int, \n    \n    max(case when tiene_descuento_tel = -1 then 0 else tiene_descuento_tel end) as max_tiene_descuento_tel, \n    \n    max(case when tiene_descuento_tv = -1 then 0 else tiene_descuento_tv end) as max_tiene_descuento_tv, \n    \n    max(case when cliente_arreglo_pago = -1 then 0 else cliente_arreglo_pago end) as max_cliente_arreglo_pago, \n    \n    max(case when intencion_producto_int = -1 then 0 else intencion_producto_int end) as max_intencion_producto_int, \n    \n    max(case when intencion_producto_tv = -1 then 0 else intencion_producto_tv end) as max_intencion_producto_tv, \n    \n    max(case when intencion_producto_tel = -1 then 0 else intencion_producto_tel end) as max_intencion_producto_tel, \n    \n    max(case when antiguedad_ultimo_ctt_tel = -1 then 0 else antiguedad_ultimo_ctt_tel end) as max_antiguedad_ultimo_ctt_tel, \n    \n    max(case when antiguedad_ultimo_ctt_int = -1 then 0 else antiguedad_ultimo_ctt_int end) as max_antiguedad_ultimo_ctt_int, \n    \n    max(case when antiguedad_ultimo_ctt_tv = -1 then 0 else antiguedad_ultimo_ctt_tv end) as max_antiguedad_ultimo_ctt_tv, \n    \n    max(case when ar_actvn_dt = -1 then 0 else ar_actvn_dt end) as max_ar_actvn_dt, \n    \n\n\n\n\n    \n    avg(case when ctt = -1 then 0 else ctt end) as avg_ctt, \n    \n    avg(case when amt_due = -1 then 0 else amt_due end) as avg_amt_due, \n    \n    avg(case when unexp_amt = -1 then 0 else unexp_amt end) as avg_unexp_amt, \n    \n    avg(case when ttl = -1 then 0 else ttl end) as avg_ttl, \n    \n    avg(case when ctt_producto_tel = -1 then 0 else ctt_producto_tel end) as avg_ctt_producto_tel, \n    \n    avg(case when ctt_producto_int = -1 then 0 else ctt_producto_int end) as avg_ctt_producto_int, \n    \n    avg(case when ctt_producto_tv = -1 then 0 else ctt_producto_tv end) as avg_ctt_producto_tv, \n    \n\n\nmax(ultimos.descuento_int) as max_descuento_int,\nmax(ultimos.descuento_tel) as max_descuento_tel,\nmax(ultimos.descuento_tv) as max_descuento_tv,\nmax(ultimos.resultado_intencion_int) as max_resultado_intencion_int,\nmax(ultimos.resultado_intencion_tv) as max_resultado_intencion_tv,\nmax(ultimos.resultado_intencion_tel) as max_resultado_intencion_tel,\nmax(ultimos.motivo_intencion_int) as max_motivo_intencion_int,\nmax(ultimos.motivo_intencion_tv) as max_motivo_intencion_tv,\nmax(ultimos.motivo_intencion_tel) as max_motivo_intencion_tel,\nmax(ultimos.st_hh_cd) as st_hh_cd,\nts_tablon.fecha_inicio_semana, \nts_tablon.fecha_final_semana,\n\nYEAR(date_add('week', 1, ts_tablon.fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, ts_tablon.fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, ts_tablon.fecha_inicio_semana)) as day \n\nfrom tablon as ts_tablon\nleft join ultimos on ts_tablon.hh_cd = ultimos.hh_cd and ts_tablon.fecha_inicio_semana = ultimos.fecha_inicio_semana \ngroup by ts_tablon.hh_cd, ts_tablon.fecha_inicio_semana, ts_tablon.fecha_final_semana", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_features_engineering_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate/int_features_engineering_aggregated_to_week.sql", "original_file_path": "models/intermediate/int_features_engineering_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_features_engineering_aggregated_to_week"], "alias": "int_features_engineering_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "423269b903c41692da2194030c528fc5976438d7e0c93fbbca6a42cc24596c9f"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.553022, "relation_name": "dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nWITH features_tablon_fijo AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            max_unexp_amt,\n            max_amt_due\n    FROM {{ ref('int_metricas_aggregated_to_week') }}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n\n),\n\nfeatures_nodos AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            snr_deg,\n            cm_us\n    FROM {{ ref('int_nodos_aggregated_to_week') }}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n),\n\nfeatures_fact_factura AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            max_ttl_factura\n    FROM {{ ref('int_facturas_aggregated_to_week') }}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n),\n\nfeatures_data_fix_fct AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            max_trfc_dwld\n    FROM {{ ref('int_consumos_aggregated_to_week') }}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n)\n\nSELECT\nftf.hh_cd,\nftf.fecha_inicio_semana,\nftf.fecha_final_semana,\nmax_trfc_dwld / snr_deg AS trfc_dwld_snr_deg, \nmax_trfc_dwld / cm_us AS trfc_dwld_cm_us, \nmax_unexp_amt / (max_amt_due + max_unexp_amt) AS unexp_amt_rel,\nmax_unexp_amt / (max_ttl_factura) AS unexp_amt_ttl,\n{{ partition('ftf.fecha_inicio_semana')}}\nFROM features_tablon_fijo AS ftf\nLEFT JOIN features_nodos ON CAST(features_nodos.hh_cd AS varchar) = ftf.hh_cd AND features_nodos.fecha_inicio_semana = ftf.fecha_inicio_semana \nLEFT JOIN features_fact_factura ON CAST(features_fact_factura.hh_cd AS varchar) = ftf.hh_cd AND features_fact_factura.fecha_inicio_semana = ftf.fecha_inicio_semana \nLEFT JOIN features_data_fix_fct ON CAST(features_data_fix_fct.hh_cd AS varchar) = ftf.hh_cd AND features_data_fix_fct.fecha_inicio_semana = ftf.fecha_inicio_semana", "language": "sql", "refs": [["int_metricas_aggregated_to_week"], ["int_nodos_aggregated_to_week"], ["int_facturas_aggregated_to_week"], ["int_consumos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/int_features_engineering_aggregated_to_week.sql", "compiled": true, "compiled_code": "\n\nWITH features_tablon_fijo AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            max_unexp_amt,\n            max_amt_due\n    FROM dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n\n),\n\nfeatures_nodos AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            snr_deg,\n            cm_us\n    FROM dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),\n\nfeatures_fact_factura AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            max_ttl_factura\n    FROM dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),\n\nfeatures_data_fix_fct AS (\n    SELECT  hh_cd,\n            fecha_inicio_semana,\n            fecha_final_semana,\n            max_trfc_dwld\n    FROM dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT\nftf.hh_cd,\nftf.fecha_inicio_semana,\nftf.fecha_final_semana,\nmax_trfc_dwld / snr_deg AS trfc_dwld_snr_deg, \nmax_trfc_dwld / cm_us AS trfc_dwld_cm_us, \nmax_unexp_amt / (max_amt_due + max_unexp_amt) AS unexp_amt_rel,\nmax_unexp_amt / (max_ttl_factura) AS unexp_amt_ttl,\n\nYEAR(date_add('week', 1, ftf.fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, ftf.fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, ftf.fecha_inicio_semana)) as day \n\nFROM features_tablon_fijo AS ftf\nLEFT JOIN features_nodos ON CAST(features_nodos.hh_cd AS varchar) = ftf.hh_cd AND features_nodos.fecha_inicio_semana = ftf.fecha_inicio_semana \nLEFT JOIN features_fact_factura ON CAST(features_fact_factura.hh_cd AS varchar) = ftf.hh_cd AND features_fact_factura.fecha_inicio_semana = ftf.fecha_inicio_semana \nLEFT JOIN features_data_fix_fct ON CAST(features_data_fix_fct.hh_cd AS varchar) = ftf.hh_cd AND features_data_fix_fct.fecha_inicio_semana = ftf.fecha_inicio_semana", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.int_nodos_aggregated_to_week": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_intermediate", "name": "int_nodos_aggregated_to_week", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "intermediate/int_nodos_aggregated_to_week.sql", "original_file_path": "models/intermediate/int_nodos_aggregated_to_week.sql", "unique_id": "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "fqn": ["VoluntaryChurnABT", "intermediate", "int_nodos_aggregated_to_week"], "alias": "int_nodos_aggregated_to_week", "checksum": {"name": "sha256", "checksum": "8b864ea34604ed9e4952118b9bc829a2c22609ba6063c309e7df507510572906"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/intermediate/intermediate.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.551096, "relation_name": "dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nwith hh_cd_nodos as (\n\n    select\n    hh_cd,\n    nodo, \n    es_gold,\n    fecha_inicio_semana, \n    fecha_final_semana\n    from {{ref('stg_dtl_pa__nodos')}}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n), \n\nfeatures_nodos as (\n    select\n    nodes as nodo,\n    desc_clss_snr,\n    desc_clss_ucer,\n    desc_clss_npa,\n    desc_ut_us,\n    cm_us,\n    numr,\n    samp,\n    ucer_deg,\n    snr_deg,\n    pct_npa,\n    pct_ucer,\n    fecha_inicio_semana, \n    fecha_final_semana\n    from {{ ref('stg_smy_pa__performances') }}\n    WHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\n)\n\nselect\nhn.hh_cd,\nfn.*,\nhn.es_gold,\n{{ partition('hn.fecha_inicio_semana')}}\nfrom features_nodos as fn\nleft join hh_cd_nodos as hn on fn.nodo = hn.nodo and fn.fecha_inicio_semana = hn.fecha_inicio_semana\nwhere hh_cd is not null", "language": "sql", "refs": [["stg_dtl_pa__nodos"], ["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.run_mode", "macro.VoluntaryChurnABT.partition"], "nodes": ["model.VoluntaryChurnABT.stg_dtl_pa__nodos", "model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/int_nodos_aggregated_to_week.sql", "compiled": true, "compiled_code": "\n\nwith hh_cd_nodos as (\n\n    select\n    hh_cd,\n    nodo, \n    es_gold,\n    fecha_inicio_semana, \n    fecha_final_semana\n    from dev_voluntary_churn_staging.stg_dtl_pa__nodos\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n), \n\nfeatures_nodos as (\n    select\n    nodes as nodo,\n    desc_clss_snr,\n    desc_clss_ucer,\n    desc_clss_npa,\n    desc_ut_us,\n    cm_us,\n    numr,\n    samp,\n    ucer_deg,\n    snr_deg,\n    pct_npa,\n    pct_ucer,\n    fecha_inicio_semana, \n    fecha_final_semana\n    from dev_voluntary_churn_staging.stg_smy_pa__performances\n    WHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nselect\nhn.hh_cd,\nfn.*,\nhn.es_gold,\n\nYEAR(date_add('week', 1, hn.fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, hn.fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, hn.fecha_inicio_semana)) as day \n\nfrom features_nodos as fn\nleft join hh_cd_nodos as hn on fn.nodo = hn.nodo and fn.fecha_inicio_semana = hn.fecha_inicio_semana\nwhere hh_cd is not null", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.estadisticos_mensual": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "estadisticos_mensual", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics/estadisticos_mensual.sql", "original_file_path": "models/analytics/estadisticos_mensual.sql", "unique_id": "model.VoluntaryChurnABT.estadisticos_mensual", "fqn": ["VoluntaryChurnABT", "analytics", "estadisticos_mensual"], "alias": "estadisticos_mensual", "checksum": {"name": "sha256", "checksum": "300523f4aa1d196be0c9fc40a39b870bd289754716e539e2267505d96f232b41"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de cuenta.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_max_ttl": {"name": "avg_max_ttl", "description": "Promedio mensual de max_ttl semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_max_amt_due": {"name": "avg_max_amt_due", "description": "Promedio mensual de max_amt_due semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_max_unexp_amt": {"name": "avg_max_unexp_amt", "description": "Promedio mensual de max_unexp_amt semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_trfc_dwld_snr_deg": {"name": "avg_trfc_dwld_snr_deg", "description": "Promedio mensual de trfc_dwld_snr_deg semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_trfc_dwld_cm_us": {"name": "avg_trfc_dwld_cm_us", "description": "Promedio mensual de trfc_dwld_cm_us semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_unexp_amt_rel": {"name": "avg_unexp_amt_rel", "description": "Promedio mensual de unexp_amt_rel semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_unexp_amt_ttl": {"name": "avg_unexp_amt_ttl", "description": "Promedio mensual de unexp_amt_ttl semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_max_trfc_dwld": {"name": "avg_max_trfc_dwld", "description": "Promedio mensual de max_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_avg_trfc_dwld": {"name": "avg_avg_trfc_dwld", "description": "Promedio mensual de avg_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_sum_trfc_dwld": {"name": "avg_sum_trfc_dwld", "description": "Promedio mensual de sum_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_max_trfc_upld": {"name": "avg_max_trfc_upld", "description": "Promedio mensual de max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_avg_max_trfc_upld": {"name": "avg_avg_max_trfc_upld", "description": "Promedio mensual de avg_max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_sum_max_trfc_upld": {"name": "avg_sum_max_trfc_upld", "description": "Promedio mensual de sum_max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_max_ttl": {"name": "max_max_ttl", "description": "M\u00e1ximo mensual de max_ttl semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_max_amt_due": {"name": "max_max_amt_due", "description": "M\u00e1ximo mensual de max_amt_due semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_max_unexp_amt": {"name": "max_max_unexp_amt", "description": "M\u00e1ximo mensual de max_unexp_amt semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_trfc_dwld_snr_deg": {"name": "max_trfc_dwld_snr_deg", "description": "M\u00e1ximo mensual de trfc_dwld_snr_deg semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_trfc_dwld_cm_us": {"name": "max_trfc_dwld_cm_us", "description": "M\u00e1ximo mensual de trfc_dwld_cm_us semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_unexp_amt_rel": {"name": "max_unexp_amt_rel", "description": "M\u00e1ximo mensual de unexp_amt_rel semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_unexp_amt_ttl": {"name": "max_unexp_amt_ttl", "description": "M\u00e1ximo mensual de unexp_amt_ttl semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_max_trfc_dwld": {"name": "max_max_trfc_dwld", "description": "M\u00e1ximo mensual de max_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_avg_trfc_dwld": {"name": "max_avg_trfc_dwld", "description": "M\u00e1ximo mensual de avg_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_sum_trfc_dwld": {"name": "max_sum_trfc_dwld", "description": "M\u00e1ximo mensual de sum_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_max_trfc_upld": {"name": "max_max_trfc_upld", "description": "M\u00e1ximo mensual de max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_avg_max_trfc_upld": {"name": "max_avg_max_trfc_upld", "description": "M\u00e1ximo mensual de avg_max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_sum_max_trfc_upld": {"name": "max_sum_max_trfc_upld", "description": "M\u00e1ximo mensual de sum_max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_max_ttl": {"name": "sum_max_ttl", "description": "Suma mensual de max_ttl semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_max_amt_due": {"name": "sum_max_amt_due", "description": "Suma mensual de max_amt_due semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_max_unexp_amt": {"name": "sum_max_unexp_amt", "description": "Suma mensual de max_unexp_amt semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_trfc_dwld_snr_deg": {"name": "sum_trfc_dwld_snr_deg", "description": "Suma mensual de trfc_dwld_snr_deg semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_trfc_dwld_cm_us": {"name": "sum_trfc_dwld_cm_us", "description": "Suma mensual de trfc_dwld_cm_us semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_unexp_amt_rel": {"name": "sum_unexp_amt_rel", "description": "Suma mensual de unexp_amt_rel semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_unexp_amt_ttl": {"name": "sum_unexp_amt_ttl", "description": "Suma mensual de unexp_amt_ttl semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_max_trfc_dwld": {"name": "sum_max_trfc_dwld", "description": "Suma mensual de max_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_avg_trfc_dwld": {"name": "sum_avg_trfc_dwld", "description": "Suma mensual de avg_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_sum_trfc_dwld": {"name": "sum_sum_trfc_dwld", "description": "Suma mensual de sum_trfc_dwld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_max_trfc_upld": {"name": "sum_max_trfc_upld", "description": "Suma mensual de max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_avg_max_trfc_upld": {"name": "sum_avg_max_trfc_upld", "description": "Suma mensual de avg_max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_sum_max_trfc_upld": {"name": "sum_sum_max_trfc_upld", "description": "Suma mensual de sum_max_trfc_upld semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rango_tiempo": {"name": "rango_tiempo", "description": "Mes comprendido.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o de partici\u00f3n.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes de partici\u00f3n.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda de partici\u00f3n.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/analytics/analytics.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.6156642, "relation_name": "dev_voluntary_churn_analytics.estadisticos_mensual", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nWITH ultimas_semanas AS (\n    SELECT *\n    FROM {{ ref('estadisticos_semanal') }}\n    WHERE fecha_inicio_semana BETWEEN DATE_ADD('WEEK', -4, DATE_TRUNC('WEEK', DATE('{{ var(\"today\") }}'))) AND  DATE_ADD('WEEK', -1, DATE_TRUNC('WEEK', DATE('{{ var(\"today\") }}')))  \n)\n\nSELECT  hh_cd,\n        {{ get_avg_value([ 'max_ttl', 'max_amt_due', 'max_unexp_amt', 'trfc_dwld_snr_deg', 'trfc_dwld_cm_us', 'unexp_amt_rel', 'unexp_amt_ttl', 'max_trfc_dwld', 'avg_trfc_dwld', 'sum_trfc_dwld', 'max_trfc_upld', 'avg_max_trfc_upld', 'sum_max_trfc_upld' ]) }}\n        {{ get_max_value([ 'max_ttl', 'max_amt_due', 'max_unexp_amt', 'trfc_dwld_snr_deg', 'trfc_dwld_cm_us', 'unexp_amt_rel', 'unexp_amt_ttl', 'max_trfc_dwld', 'avg_trfc_dwld', 'sum_trfc_dwld', 'max_trfc_upld', 'avg_max_trfc_upld', 'sum_max_trfc_upld' ]) }}\n        {{ get_sum_value([ 'max_ttl', 'max_amt_due', 'max_unexp_amt', 'trfc_dwld_snr_deg', 'trfc_dwld_cm_us', 'unexp_amt_rel', 'unexp_amt_ttl', 'max_trfc_dwld', 'avg_trfc_dwld', 'sum_trfc_dwld', 'max_trfc_upld', 'avg_max_trfc_upld', 'sum_max_trfc_upld' ]) }}\n        CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\n        YEAR(DATE_TRUNC('WEEK', DATE('{{ var(\"today\") }}'))) AS year,\n        MONTH(DATE_TRUNC('WEEK', DATE('{{ var(\"today\") }}'))) AS month,\n        DAY(DATE_TRUNC('WEEK', DATE('{{ var(\"today\") }}'))) AS day\nFROM ultimas_semanas\nGROUP BY hh_cd", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.get_avg_value", "macro.VoluntaryChurnABT.get_max_value", "macro.VoluntaryChurnABT.get_sum_value"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/estadisticos_mensual.sql", "compiled": true, "compiled_code": "\n\nWITH ultimas_semanas AS (\n    SELECT *\n    FROM dev_voluntary_churn_analytics.estadisticos_semanal\n    WHERE fecha_inicio_semana BETWEEN DATE_ADD('WEEK', -4, DATE_TRUNC('WEEK', DATE('2023-04-10'))) AND  DATE_ADD('WEEK', -1, DATE_TRUNC('WEEK', DATE('2023-04-10')))  \n)\n\nSELECT  hh_cd,\n        \n\n    \n    avg(case when max_ttl = -1 then 0 else max_ttl end) as avg_max_ttl, \n    \n    avg(case when max_amt_due = -1 then 0 else max_amt_due end) as avg_max_amt_due, \n    \n    avg(case when max_unexp_amt = -1 then 0 else max_unexp_amt end) as avg_max_unexp_amt, \n    \n    avg(case when trfc_dwld_snr_deg = -1 then 0 else trfc_dwld_snr_deg end) as avg_trfc_dwld_snr_deg, \n    \n    avg(case when trfc_dwld_cm_us = -1 then 0 else trfc_dwld_cm_us end) as avg_trfc_dwld_cm_us, \n    \n    avg(case when unexp_amt_rel = -1 then 0 else unexp_amt_rel end) as avg_unexp_amt_rel, \n    \n    avg(case when unexp_amt_ttl = -1 then 0 else unexp_amt_ttl end) as avg_unexp_amt_ttl, \n    \n    avg(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as avg_max_trfc_dwld, \n    \n    avg(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as avg_avg_trfc_dwld, \n    \n    avg(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as avg_sum_trfc_dwld, \n    \n    avg(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as avg_max_trfc_upld, \n    \n    avg(case when avg_max_trfc_upld = -1 then 0 else avg_max_trfc_upld end) as avg_avg_max_trfc_upld, \n    \n    avg(case when sum_max_trfc_upld = -1 then 0 else sum_max_trfc_upld end) as avg_sum_max_trfc_upld, \n    \n\n\n        \n\n    \n    max(case when max_ttl = -1 then 0 else max_ttl end) as max_max_ttl, \n    \n    max(case when max_amt_due = -1 then 0 else max_amt_due end) as max_max_amt_due, \n    \n    max(case when max_unexp_amt = -1 then 0 else max_unexp_amt end) as max_max_unexp_amt, \n    \n    max(case when trfc_dwld_snr_deg = -1 then 0 else trfc_dwld_snr_deg end) as max_trfc_dwld_snr_deg, \n    \n    max(case when trfc_dwld_cm_us = -1 then 0 else trfc_dwld_cm_us end) as max_trfc_dwld_cm_us, \n    \n    max(case when unexp_amt_rel = -1 then 0 else unexp_amt_rel end) as max_unexp_amt_rel, \n    \n    max(case when unexp_amt_ttl = -1 then 0 else unexp_amt_ttl end) as max_unexp_amt_ttl, \n    \n    max(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as max_max_trfc_dwld, \n    \n    max(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as max_avg_trfc_dwld, \n    \n    max(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as max_sum_trfc_dwld, \n    \n    max(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as max_max_trfc_upld, \n    \n    max(case when avg_max_trfc_upld = -1 then 0 else avg_max_trfc_upld end) as max_avg_max_trfc_upld, \n    \n    max(case when sum_max_trfc_upld = -1 then 0 else sum_max_trfc_upld end) as max_sum_max_trfc_upld, \n    \n\n\n        \n\n    \n    sum(case when max_ttl = -1 then 0 else max_ttl end) as sum_max_ttl, \n    \n    sum(case when max_amt_due = -1 then 0 else max_amt_due end) as sum_max_amt_due, \n    \n    sum(case when max_unexp_amt = -1 then 0 else max_unexp_amt end) as sum_max_unexp_amt, \n    \n    sum(case when trfc_dwld_snr_deg = -1 then 0 else trfc_dwld_snr_deg end) as sum_trfc_dwld_snr_deg, \n    \n    sum(case when trfc_dwld_cm_us = -1 then 0 else trfc_dwld_cm_us end) as sum_trfc_dwld_cm_us, \n    \n    sum(case when unexp_amt_rel = -1 then 0 else unexp_amt_rel end) as sum_unexp_amt_rel, \n    \n    sum(case when unexp_amt_ttl = -1 then 0 else unexp_amt_ttl end) as sum_unexp_amt_ttl, \n    \n    sum(case when max_trfc_dwld = -1 then 0 else max_trfc_dwld end) as sum_max_trfc_dwld, \n    \n    sum(case when avg_trfc_dwld = -1 then 0 else avg_trfc_dwld end) as sum_avg_trfc_dwld, \n    \n    sum(case when sum_trfc_dwld = -1 then 0 else sum_trfc_dwld end) as sum_sum_trfc_dwld, \n    \n    sum(case when max_trfc_upld = -1 then 0 else max_trfc_upld end) as sum_max_trfc_upld, \n    \n    sum(case when avg_max_trfc_upld = -1 then 0 else avg_max_trfc_upld end) as sum_avg_max_trfc_upld, \n    \n    sum(case when sum_max_trfc_upld = -1 then 0 else sum_max_trfc_upld end) as sum_sum_max_trfc_upld, \n    \n\n\n        CONCAT(CAST(MIN(fecha_inicio_semana) AS VARCHAR), ' - ' , CAST(MAX(fecha_final_semana) AS VARCHAR)) AS rango_tiempo,\n        YEAR(DATE_TRUNC('WEEK', DATE('2023-04-10'))) AS year,\n        MONTH(DATE_TRUNC('WEEK', DATE('2023-04-10'))) AS month,\n        DAY(DATE_TRUNC('WEEK', DATE('2023-04-10'))) AS day\nFROM ultimas_semanas\nGROUP BY hh_cd", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.estadisticos_semanal": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "estadisticos_semanal", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics/estadisticos_semanal.sql", "original_file_path": "models/analytics/estadisticos_semanal.sql", "unique_id": "model.VoluntaryChurnABT.estadisticos_semanal", "fqn": ["VoluntaryChurnABT", "analytics", "estadisticos_semanal"], "alias": "estadisticos_semanal", "checksum": {"name": "sha256", "checksum": "a990db48e64284cb7d09b830017f1c4e1f0c4f0331cd2ec122fe69a5891e6526"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "Codigo de identificaci\u00f3n de la cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nodo": {"name": "nodo", "description": "Nodo al que pertenece la cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_clss_snr": {"name": "desc_clss_snr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_clss_ucer": {"name": "desc_clss_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_clss_npa": {"name": "desc_clss_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "desc_ut_us": {"name": "desc_ut_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cm_us": {"name": "cm_us", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numr": {"name": "numr", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "samp": {"name": "samp", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ucer_deg": {"name": "ucer_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "snr_deg": {"name": "snr_deg", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pct_npa": {"name": "pct_npa", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pct_ucer": {"name": "pct_ucer", "description": "Proviene de prod_raw_dwh_smy_pa.cstmr_360_perfhcf_fix_dim", "meta": {}, "data_type": null, "quote": null, "tags": []}, "es_gold": {"name": "es_gold", "description": "Booleano si nodo es gold", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_trfc_dwld": {"name": "max_trfc_dwld", "description": "M\u00e1ximo de trfc_dwld por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_trfc_dwld": {"name": "avg_trfc_dwld", "description": "Promedio de  trfc_dwld por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_trfc_dwld": {"name": "sum_trfc_dwld", "description": "Suma de trfc_dwld por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_trfc_upld": {"name": "max_trfc_upld", "description": "M\u00e1ximo de trfc_upld por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_max_trfc_upld": {"name": "avg_max_trfc_upld", "description": "Promedio de  trfc_upld por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_max_trfc_upld": {"name": "sum_max_trfc_upld", "description": "Suma de trfc_upld por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ttl_factura": {"name": "avg_ttl_factura", "description": "Promedio de ttl_factura por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_ttl_factura": {"name": "sum_ttl_factura", "description": "Suma ttl_factura por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ttl_factura": {"name": "max_ttl_factura", "description": "M\u00e1ximo de ttl_factura por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ttl_no_factura": {"name": "avg_ttl_no_factura", "description": "Promedio de ttl_no_factura por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sum_ttl_no_factura": {"name": "sum_ttl_no_factura", "description": "Suma ttl_no_factura por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ttl_no_factura": {"name": "max_ttl_no_factura", "description": "M\u00e1ximo de ttl_no_factura por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trfc_dwld_snr_deg": {"name": "trfc_dwld_snr_deg", "description": "Divisi\u00f3n max_trfc_dwld sobre snr_deg", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trfc_dwld_cm_us": {"name": "trfc_dwld_cm_us", "description": "Divisi\u00f3n max_trfc_dwld sobre cm_us", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unexp_amt_rel": {"name": "unexp_amt_rel", "description": "Divisi\u00f3n max_unexp_amt sobre (max_amt_due + max_unexp_amt)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unexp_amt_ttl": {"name": "unexp_amt_ttl", "description": "Divisi\u00f3n max_unexp_amt sobre max_ttl_factura", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ctt": {"name": "max_ctt", "description": "M\u00e1ximo de ctt", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_amt_due": {"name": "max_amt_due", "description": "M\u00e1ximo de amt_due", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_unexp_amt": {"name": "max_unexp_amt", "description": "M\u00e1ximo de unexp_amt", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_30_amt": {"name": "max_at_30_amt", "description": "M\u00e1ximo de at_30_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_60_amt": {"name": "max_at_60_amt", "description": "M\u00e1ximo de at_60_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_90_amt": {"name": "max_at_90_amt", "description": "M\u00e1ximo de at_90_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_120_amt": {"name": "max_at_120_amt", "description": "M\u00e1ximo de at_120_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_150_amt": {"name": "max_at_150_amt", "description": "M\u00e1ximo de at_150_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_180_amt": {"name": "max_at_180_amt", "description": "M\u00e1ximo de at_180_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_210_amt": {"name": "max_at_210_amt", "description": "M\u00e1ximo de at_210_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_240_amt": {"name": "max_at_240_amt", "description": "M\u00e1ximo de at_240_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_270_amt": {"name": "max_at_270_amt", "description": "M\u00e1ximo de at_270_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_300_amt": {"name": "max_at_300_amt", "description": "M\u00e1ximo de at_300_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_330_amt": {"name": "max_at_330_amt", "description": "M\u00e1ximo de at_330_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_at_360_amt": {"name": "max_at_360_amt", "description": "M\u00e1ximo de at_360_amt de ultima semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ttl": {"name": "max_ttl", "description": "Factura total maxima por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ctt_producto_tel": {"name": "max_ctt_producto_tel", "description": "M\u00e1ximo ctt del producto tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ctt_producto_int": {"name": "max_ctt_producto_int", "description": "M\u00e1ximo ctt del producto int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ctt_producto_tv": {"name": "max_ctt_producto_tv", "description": "M\u00e1ximo ctt del producto tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_tiene_descuento_int": {"name": "max_tiene_descuento_int", "description": "Tiene descuento en int", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_tiene_descuento_tel": {"name": "max_tiene_descuento_tel", "description": "Tiene descuento en tel", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_tiene_descuento_tv": {"name": "max_tiene_descuento_tv", "description": "Tiene descuento en tv", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_cliente_arreglo_pago": {"name": "max_cliente_arreglo_pago", "description": "M\u00e1ximo arreglo pago por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_intencion_producto_int": {"name": "max_intencion_producto_int", "description": "M\u00e1xima intencion_producto_int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_intencion_producto_tv": {"name": "max_intencion_producto_tv", "description": "M\u00e1xima intencion_producto_tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_intencion_producto_tel": {"name": "max_intencion_producto_tel", "description": "M\u00e1xima intencion_producto_tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_antiguedad_ultimo_ctt_tel": {"name": "max_antiguedad_ultimo_ctt_tel", "description": "M\u00e1xima antiguedad_ultimo_ctt_tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_antiguedad_ultimo_ctt_int": {"name": "max_antiguedad_ultimo_ctt_int", "description": "M\u00e1xima antiguedad_ultimo_ctt_int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_antiguedad_ultimo_ctt_tv": {"name": "max_antiguedad_ultimo_ctt_tv", "description": "M\u00e1xima antiguedad_ultimo_ctt_tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_ar_actvn_dt": {"name": "max_ar_actvn_dt", "description": "M\u00e1ximo ar_actvn_dt por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ctt": {"name": "avg_ctt", "description": "Promedio de ctt por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_amt_due": {"name": "avg_amt_due", "description": "Promedio amt_due por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_unexp_amt": {"name": "avg_unexp_amt", "description": "Promedio unexp_amt por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ttl": {"name": "avg_ttl", "description": "Promedio ttl por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ctt_producto_tel": {"name": "avg_ctt_producto_tel", "description": "Promedio ctt_producto_tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ctt_producto_int": {"name": "avg_ctt_producto_int", "description": "Promedio ctt_producto_int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_ctt_producto_tv": {"name": "avg_ctt_producto_tv", "description": "Promedio ctt_producto_tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_descuento_int": {"name": "max_descuento_int", "description": "Tiene descuento_int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_descuento_tel": {"name": "max_descuento_tel", "description": "Tiene descuento_tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_descuento_tv": {"name": "max_descuento_tv", "description": "Tiene descuento_tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_resultado_intencion_int": {"name": "max_resultado_intencion_int", "description": "Resultado de intencion_int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_resultado_intencion_tv": {"name": "max_resultado_intencion_tv", "description": "Resultado de intencion_tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_resultado_intencion_tel": {"name": "max_resultado_intencion_tel", "description": "Resultado de intencion_tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_motivo_intencion_tel": {"name": "max_motivo_intencion_tel", "description": "Motivo de intencion_tel por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_motivo_intencion_int": {"name": "max_motivo_intencion_int", "description": "Motivo de intencion_int por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_motivo_intencion_tv": {"name": "max_motivo_intencion_tv", "description": "Motivo de intencion_tv por semana", "meta": {}, "data_type": null, "quote": null, "tags": []}, "st_hh_cd": {"name": "st_hh_cd", "description": "Estado de cuenta", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda partici\u00f3n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/analytics/analytics.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.6037781, "relation_name": "dev_voluntary_churn_analytics.estadisticos_semanal", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\n-- depends_on: {{ ref('int_consumos_aggregated_to_week') }}\n-- depends_on: {{ ref('int_facturas_aggregated_to_week') }}\n-- depends_on: {{ ref('int_nodos_aggregated_to_week') }}\n-- depends_on: {{ ref('int_metricas_aggregated_to_week') }}\n-- depends_on: {{ ref('int_features_engineering_aggregated_to_week') }}\n-- depends_on: {{ ref('int_features_engineering_aggregated_to_week') }}\n\n{% set sql_statement_columnas %}\n    SELECT \n    table_name, \n    column_name\n    FROM   information_schema.columns\n    WHERE  table_schema = '{{ target.name + \"_voluntary_churn_intermediate\"}}'\n    and table_name like 'int_%'\n    and table_name not like '%temp%'\n    and column_name NOT IN ('hh_cd', 'fecha_inicio_semana', 'fecha_final_semana', 'year', 'month', 'day')\n\n{% endset %}\n\n{%- set tablas_columnas = dbt_utils.get_query_results_as_dict(sql_statement_columnas) -%}\n\nSELECT\n{{ref('int_metricas_aggregated_to_week')}}.hh_cd,\n{{ref('int_metricas_aggregated_to_week')}}.fecha_inicio_semana,\n{{ref('int_metricas_aggregated_to_week')}}.fecha_final_semana,\n{% for columna in tablas_columnas['column_name'] %}\n    {{tablas_columnas['table_name'][loop.index0]}}.{{columna}},\n{% endfor %}\n-- year(date_add('day', 1, {{ref('int_metricas_aggregated_to_week')}}.fecha_final_semana)) as year,\n-- month(date_add('day', 1, {{ref('int_metricas_aggregated_to_week')}}.fecha_final_semana)) as month,\n-- day(date_add('day', 1, {{ref('int_metricas_aggregated_to_week')}}.fecha_final_semana)) as day\n{{ partition(\"int_metricas_aggregated_to_week.fecha_inicio_semana\")}}\nFROM {{ref('int_metricas_aggregated_to_week')}}\n{% for tabla in set(tablas_columnas['table_name']) %}\n    {% if tabla != 'int_metricas_aggregated_to_week' %}\n        left join  {{ref(tabla)}} ON cast({{tabla}}.hh_cd as varchar) = {{ref('int_metricas_aggregated_to_week')}}.hh_cd and {{tabla}}.fecha_inicio_semana = {{ref('int_metricas_aggregated_to_week')}}.fecha_inicio_semana\n    {% endif %} \n{% endfor %}\nWHERE {{ run_mode('int_metricas_aggregated_to_week.fecha_inicio_semana', var(\"modo\")) }}", "language": "sql", "refs": [["int_consumos_aggregated_to_week"], ["int_facturas_aggregated_to_week"], ["int_nodos_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_features_engineering_aggregated_to_week"], ["int_features_engineering_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_metricas_aggregated_to_week"], ["int_metricas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict", "macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/estadisticos_semanal.sql", "compiled": true, "compiled_code": "\n\n-- depends_on: dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week\n-- depends_on: dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week\n-- depends_on: dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week\n-- depends_on: dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week\n-- depends_on: dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week\n-- depends_on: dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week\n\nSELECT\ndev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.hh_cd,\ndev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_inicio_semana,\ndev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_final_semana,\n\n    int_nodos_aggregated_to_week.nodo,\n\n    int_nodos_aggregated_to_week.desc_clss_snr,\n\n    int_nodos_aggregated_to_week.desc_clss_ucer,\n\n    int_nodos_aggregated_to_week.desc_clss_npa,\n\n    int_nodos_aggregated_to_week.desc_ut_us,\n\n    int_nodos_aggregated_to_week.cm_us,\n\n    int_nodos_aggregated_to_week.numr,\n\n    int_nodos_aggregated_to_week.samp,\n\n    int_nodos_aggregated_to_week.ucer_deg,\n\n    int_nodos_aggregated_to_week.snr_deg,\n\n    int_nodos_aggregated_to_week.pct_npa,\n\n    int_nodos_aggregated_to_week.pct_ucer,\n\n    int_nodos_aggregated_to_week.es_gold,\n\n    int_consumos_aggregated_to_week.max_trfc_dwld,\n\n    int_consumos_aggregated_to_week.avg_trfc_dwld,\n\n    int_consumos_aggregated_to_week.sum_trfc_dwld,\n\n    int_consumos_aggregated_to_week.max_trfc_upld,\n\n    int_consumos_aggregated_to_week.avg_max_trfc_upld,\n\n    int_consumos_aggregated_to_week.sum_max_trfc_upld,\n\n    int_facturas_aggregated_to_week.avg_ttl_factura,\n\n    int_facturas_aggregated_to_week.sum_ttl_factura,\n\n    int_facturas_aggregated_to_week.max_ttl_factura,\n\n    int_facturas_aggregated_to_week.avg_ttl_no_factura,\n\n    int_facturas_aggregated_to_week.sum_ttl_no_factura,\n\n    int_facturas_aggregated_to_week.max_ttl_no_factura,\n\n    int_features_engineering_aggregated_to_week.trfc_dwld_snr_deg,\n\n    int_features_engineering_aggregated_to_week.trfc_dwld_cm_us,\n\n    int_features_engineering_aggregated_to_week.unexp_amt_rel,\n\n    int_features_engineering_aggregated_to_week.unexp_amt_ttl,\n\n    int_metricas_aggregated_to_week.max_ctt,\n\n    int_metricas_aggregated_to_week.max_amt_due,\n\n    int_metricas_aggregated_to_week.max_unexp_amt,\n\n    int_metricas_aggregated_to_week.max_at_30_amt,\n\n    int_metricas_aggregated_to_week.max_at_60_amt,\n\n    int_metricas_aggregated_to_week.max_at_90_amt,\n\n    int_metricas_aggregated_to_week.max_at_120_amt,\n\n    int_metricas_aggregated_to_week.max_at_150_amt,\n\n    int_metricas_aggregated_to_week.max_at_180_amt,\n\n    int_metricas_aggregated_to_week.max_at_210_amt,\n\n    int_metricas_aggregated_to_week.max_at_240_amt,\n\n    int_metricas_aggregated_to_week.max_at_270_amt,\n\n    int_metricas_aggregated_to_week.max_at_300_amt,\n\n    int_metricas_aggregated_to_week.max_at_330_amt,\n\n    int_metricas_aggregated_to_week.max_at_360_amt,\n\n    int_metricas_aggregated_to_week.max_ttl,\n\n    int_metricas_aggregated_to_week.max_ctt_producto_tel,\n\n    int_metricas_aggregated_to_week.max_ctt_producto_int,\n\n    int_metricas_aggregated_to_week.max_ctt_producto_tv,\n\n    int_metricas_aggregated_to_week.max_tiene_descuento_int,\n\n    int_metricas_aggregated_to_week.max_tiene_descuento_tel,\n\n    int_metricas_aggregated_to_week.max_tiene_descuento_tv,\n\n    int_metricas_aggregated_to_week.max_cliente_arreglo_pago,\n\n    int_metricas_aggregated_to_week.max_intencion_producto_int,\n\n    int_metricas_aggregated_to_week.max_intencion_producto_tv,\n\n    int_metricas_aggregated_to_week.max_intencion_producto_tel,\n\n    int_metricas_aggregated_to_week.max_antiguedad_ultimo_ctt_tel,\n\n    int_metricas_aggregated_to_week.max_antiguedad_ultimo_ctt_int,\n\n    int_metricas_aggregated_to_week.max_antiguedad_ultimo_ctt_tv,\n\n    int_metricas_aggregated_to_week.max_ar_actvn_dt,\n\n    int_metricas_aggregated_to_week.avg_ctt,\n\n    int_metricas_aggregated_to_week.avg_amt_due,\n\n    int_metricas_aggregated_to_week.avg_unexp_amt,\n\n    int_metricas_aggregated_to_week.avg_ttl,\n\n    int_metricas_aggregated_to_week.avg_ctt_producto_tel,\n\n    int_metricas_aggregated_to_week.avg_ctt_producto_int,\n\n    int_metricas_aggregated_to_week.avg_ctt_producto_tv,\n\n    int_metricas_aggregated_to_week.max_descuento_int,\n\n    int_metricas_aggregated_to_week.max_descuento_tel,\n\n    int_metricas_aggregated_to_week.max_descuento_tv,\n\n    int_metricas_aggregated_to_week.max_resultado_intencion_int,\n\n    int_metricas_aggregated_to_week.max_resultado_intencion_tv,\n\n    int_metricas_aggregated_to_week.max_resultado_intencion_tel,\n\n    int_metricas_aggregated_to_week.max_motivo_intencion_int,\n\n    int_metricas_aggregated_to_week.max_motivo_intencion_tv,\n\n    int_metricas_aggregated_to_week.max_motivo_intencion_tel,\n\n    int_metricas_aggregated_to_week.st_hh_cd,\n\n-- year(date_add('day', 1, dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_final_semana)) as year,\n-- month(date_add('day', 1, dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_final_semana)) as month,\n-- day(date_add('day', 1, dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_final_semana)) as day\n\nYEAR(date_add('week', 1, int_metricas_aggregated_to_week.fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, int_metricas_aggregated_to_week.fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, int_metricas_aggregated_to_week.fecha_inicio_semana)) as day \n\nFROM dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week\n\n    \n        left join  dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week ON cast(int_nodos_aggregated_to_week.hh_cd as varchar) = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.hh_cd and int_nodos_aggregated_to_week.fecha_inicio_semana = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_inicio_semana\n     \n\n    \n        left join  dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week ON cast(int_features_engineering_aggregated_to_week.hh_cd as varchar) = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.hh_cd and int_features_engineering_aggregated_to_week.fecha_inicio_semana = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_inicio_semana\n     \n\n    \n        left join  dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week ON cast(int_consumos_aggregated_to_week.hh_cd as varchar) = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.hh_cd and int_consumos_aggregated_to_week.fecha_inicio_semana = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_inicio_semana\n     \n\n    \n        left join  dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week ON cast(int_facturas_aggregated_to_week.hh_cd as varchar) = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.hh_cd and int_facturas_aggregated_to_week.fecha_inicio_semana = dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week.fecha_inicio_semana\n     \n\n     \n\nWHERE int_metricas_aggregated_to_week.fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))", "extra_ctes_injected": true, "extra_ctes": []}, "model.VoluntaryChurnABT.target_semanal": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn_analytics", "name": "target_semanal", "resource_type": "model", "package_name": "VoluntaryChurnABT", "path": "analytics/target_semanal.sql", "original_file_path": "models/analytics/target_semanal.sql", "unique_id": "model.VoluntaryChurnABT.target_semanal", "fqn": ["VoluntaryChurnABT", "analytics", "target_semanal"], "alias": "target_semanal", "checksum": {"name": "sha256", "checksum": "ddc995fe90bf5649108dacb027f1ccd711fbda252791a9acc36fa674e250625f"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "partitioned_by": ["year", "month", "day"], "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"hh_cd": {"name": "hh_cd", "description": "C\u00f3digo de identificaci\u00f3n de cuenta.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_inicio_semana": {"name": "fecha_inicio_semana", "description": "Inicio de semana.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fecha_final_semana": {"name": "fecha_final_semana", "description": "Final de semana.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "Target semanal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "A\u00f1o de partici\u00f3n.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "Mes de partici\u00f3n.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day": {"name": "day", "description": "D\u00eda de partici\u00f3n.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://models/analytics/analytics.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "analytics", "materialized": "incremental", "partitioned_by": ["year", "month", "day"]}, "created_at": 1681142229.617841, "relation_name": "dev_voluntary_churn_analytics.target_semanal", "raw_code": "{{ config(materialized='incremental', partitioned_by=['year','month','day']) }}\n\nSELECT \nhh_cd, \nfecha_inicio_semana, \nfecha_final_semana,\nCASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END AS target,\n{{ partition('fecha_inicio_semana')}}\n-- year(date_add('day', 1, fecha_final_semana)) as year,\n-- month(date_add('day', 1, fecha_final_semana)) as month,\n-- day(date_add('day', 1, fecha_final_semana)) as day\nFROM {{ref('stg__intenciones')}}\nWHERE {{ run_mode('fecha_inicio_semana', var(\"modo\")) }}\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "language": "sql", "refs": [["stg__intenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.partition", "macro.VoluntaryChurnABT.run_mode"], "nodes": ["model.VoluntaryChurnABT.stg__intenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/target_semanal.sql", "compiled": true, "compiled_code": "\n\nSELECT \nhh_cd, \nfecha_inicio_semana, \nfecha_final_semana,\nCASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END AS target,\n\nYEAR(date_add('week', 1, fecha_inicio_semana)) as year,\nMONTH(date_add('week', 1, fecha_inicio_semana)) as month,\nDAY(date_add('week', 1, fecha_inicio_semana)) as day \n\n-- year(date_add('day', 1, fecha_final_semana)) as year,\n-- month(date_add('day', 1, fecha_final_semana)) as month,\n-- day(date_add('day', 1, fecha_final_semana)) as day\nFROM dev_voluntary_churn_staging.stg__intenciones\nWHERE fecha_inicio_semana BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\ngroup by fecha_inicio_semana, fecha_final_semana, hh_cd", "extra_ctes_injected": true, "extra_ctes": []}, "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0": {"database": "AwsDataCatalog", "schema": "dev_voluntary_churn", "name": "VoluntaryChurnABT-on-run-end-0", "resource_type": "operation", "package_name": "VoluntaryChurnABT", "path": "hooks/VoluntaryChurnABT-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0", "fqn": ["VoluntaryChurnABT", "hooks", "VoluntaryChurnABT-on-run-end-0"], "alias": "VoluntaryChurnABT-on-run-end-0", "checksum": {"name": "sha256", "checksum": "f5c80540c0631c751767ae51ac71e40ddc5c698082a155d3a8c0f27202bfad3b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.2874072, "relation_name": null, "raw_code": "{{ log_dbt_results(results) }}", "language": "sql", "refs": [["dbt_results"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.log_dbt_results"], "nodes": ["model.VoluntaryChurnABT.dbt_results"]}, "compiled_path": null, "compiled": true, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "index": 0}, "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab": {"test_metadata": {"name": "fecha_dentro_particion_performances", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf"], "alias": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8"}, "created_at": 1681142229.4010282, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8\") }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/fecha_dentro_particion_perform_7a3a661462aa6961f6b24fcea7ded6f8.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,cast(date_parse(cast(cast(dt_inf as int) as varchar),'%Y%m%d') as date) as dt_inf_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\ndt_inf_date as dt_inf,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.nodes,\nultima_particion.dt_inf\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.nodes = anteult_particion.nodes\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where dt_inf < ult_particion and dt_inf > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "pct_ucer", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_pct_ucer", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_pct_ucer.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_pct_ucer"], "alias": "test_cant_null_performances_stg_smy_pa__performances_pct_ucer", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.4108028, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_pct_ucer.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\npct_ucer,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and pct_ucer is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and pct_ucer is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pct_ucer", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "pct_npa", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_pct_npa", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_pct_npa.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_pct_npa"], "alias": "test_cant_null_performances_stg_smy_pa__performances_pct_npa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.414814, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_pct_npa.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\npct_npa,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and pct_npa is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and pct_npa is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pct_npa", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "snr_deg", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_snr_deg.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_snr_deg"], "alias": "test_cant_null_performances_stg_smy_pa__performances_snr_deg", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.417602, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_snr_deg.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\nsnr_deg,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and snr_deg is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and snr_deg is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "snr_deg", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "ucer_deg", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_ucer_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_ucer_deg.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_ucer_deg"], "alias": "test_cant_null_performances_stg_smy_pa__performances_ucer_deg", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.420209, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_ucer_deg.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\nucer_deg,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ucer_deg is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ucer_deg is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ucer_deg", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "samp", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_samp", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_samp.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_samp"], "alias": "test_cant_null_performances_stg_smy_pa__performances_samp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.422967, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_samp.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\nsamp,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and samp is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and samp is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "samp", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "numr", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_numr", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_numr.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_numr"], "alias": "test_cant_null_performances_stg_smy_pa__performances_numr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.4257972, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_numr.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\nnumr,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and numr is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and numr is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "numr", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "cm_us", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_cm_us.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_cm_us"], "alias": "test_cant_null_performances_stg_smy_pa__performances_cm_us", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.428442, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_cm_us.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\ncm_us,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and cm_us is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and cm_us is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cm_us", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_ut_us", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us"], "alias": "test_cant_null_performances_stg_smy_pa__performances_desc_ut_us", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.431196, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\ndesc_ut_us,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and desc_ut_us is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and desc_ut_us is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "desc_ut_us", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_clss_npa", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa"], "alias": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857"}, "created_at": 1681142229.433913, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857\") }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_st_89a039ba8558fb6c731dbacbf915a857.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\ndesc_clss_npa,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and desc_clss_npa is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and desc_clss_npa is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "desc_clss_npa", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_clss_ucer", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer"], "alias": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808"}, "created_at": 1681142229.436852, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808\") }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_st_f58cac730626a8e8b6ef2e14f9fed808.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\ndesc_clss_ucer,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and desc_clss_ucer is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and desc_clss_ucer is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "desc_clss_ucer", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a": {"test_metadata": {"name": "test_cant_null_performances", "kwargs": {"column_name": "desc_clss_snr", "model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr"], "alias": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657"}, "created_at": 1681142229.4396129, "relation_name": null, "raw_code": "{{ test_test_cant_null_performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657\") }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_performances_st_7e82dc7f0369b9a2bf06456d98172657.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\ndesc_clss_snr,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and desc_clss_snr is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and desc_clss_snr is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "desc_clss_snr", "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__performances", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__performances')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_"], "alias": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0"}, "created_at": 1681142229.4425018, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__performances(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0\") }}", "language": "sql", "refs": [["stg_smy_pa__performances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__performances", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__performances"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/cant_particiones_stg_smy_pa__p_63b09887b3624dee7989bd6f050118c0.sql", "compiled": true, "compiled_code": "\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_smy_pa__performances"}, "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8": {"test_metadata": {"name": "fecha_dentro_particion_cancelaciones01", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398"}, "created_at": 1681142229.4460502, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/fecha_dentro_particion_cancela_9747f0ca1ab3cafd054f5f3399e22398.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *,cast(dt_ini_pcs as date) as dt_ini_pcs_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_ini_pcs_date as dt_ini_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.hh_cd,\nultima_particion.dt_ini_pcs\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.hh_cd = anteult_particion.hh_cd\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where dt_ini_pcs < ult_particion and dt_ini_pcs > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b": {"test_metadata": {"name": "fecha_dentro_particion_cancelaciones02", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84"}, "created_at": 1681142229.450253, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/fecha_dentro_particion_cancela_f79fedf7be720aa2aefb9bb0df136e84.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *,cast(dt_ini_pcs as date) as dt_ini_pcs_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_ini_pcs_date as dt_ini_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.hh_cd,\nultima_particion.dt_ini_pcs\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.hh_cd = anteult_particion.hh_cd\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where dt_ini_pcs < ult_particion and dt_ini_pcs > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf"], "alias": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.45431, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_inf,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_inf is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_inf is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e"}, "created_at": 1681142229.458556, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_17c03f0a69ae05dc1096d93070659a7e.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_ini_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_ini_pcs is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_ini_pcs is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "ctrtd_fm", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm"], "alias": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4"}, "created_at": 1681142229.461441, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_3a656224e1ae72389018d07f95846be4.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nctrtd_fm,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ctrtd_fm is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ctrtd_fm is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "ctrtd_fm", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "ctrtd_to", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to"], "alias": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41"}, "created_at": 1681142229.464384, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_712dd3db40523737bebb71be8400ef41.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nctrtd_to,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ctrtd_to is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ctrtd_to is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "ctrtd_to", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "id_pd", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd"], "alias": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.467123, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_pd,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_pd is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_pd is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "id_pd", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "id_tp_clnt", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt"], "alias": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4"}, "created_at": 1681142229.4698281, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_983e2dc9377111260bac86e9678f9bf4.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_tp_clnt,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_tp_clnt is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_tp_clnt is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "id_tp_clnt", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2": {"test_metadata": {"name": "test_cant_null_cancelaciones01", "kwargs": {"column_name": "dt_load", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load"], "alias": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510"}, "created_at": 1681142229.4727502, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones01_86bec876a4a59e08964b9d0d023e7510.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_load,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_load is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_load is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "dt_load", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "id_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs"], "alias": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.4754932, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_pcs is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_pcs is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "id_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs"], "alias": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37"}, "created_at": 1681142229.4792588, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones02_e332a3b2451463514669289d422c8c37.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_ini_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_ini_pcs is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_ini_pcs is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "ctrtd_fm", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm"], "alias": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec"}, "created_at": 1681142229.482156, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones02_472830fcca9ac79b3bed26004b6eb1ec.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nctrtd_fm,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ctrtd_fm is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ctrtd_fm is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "ctrtd_fm", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "ctrtd_to", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to"], "alias": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21"}, "created_at": 1681142229.484894, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones02_bbf21530e58b584ee3508af568f49e21.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nctrtd_to,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ctrtd_to is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ctrtd_to is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "ctrtd_to", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "id_pd", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd"], "alias": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.487811, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_pd,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_pd is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_pd is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "id_pd", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f": {"test_metadata": {"name": "test_cant_null_cancelaciones02", "kwargs": {"column_name": "id_tp_clnt", "model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt"], "alias": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81"}, "created_at": 1681142229.49052, "relation_name": null, "raw_code": "{{ test_test_cant_null_cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_cancelaciones02_99ac220882e4d076ead7e6d2ee247e81.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_tp_clnt,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_tp_clnt is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_tp_clnt is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": "id_tp_clnt", "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__cancelaciones01", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_"], "alias": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d"}, "created_at": 1681142229.4932458, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__cancelaciones01(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones01", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/cant_particiones_stg_smy_pa__c_9270368b7c269157f9fe65325cbb8f0d.sql", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": null, "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__cancelaciones02", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__cancelaciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_"], "alias": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b"}, "created_at": 1681142229.496759, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__cancelaciones02(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b\") }}", "language": "sql", "refs": [["stg_smy_pa__cancelaciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones02", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/cant_particiones_stg_smy_pa__c_f54189496f48a293898ae9a0ed18516b.sql", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n),seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "sql": " __dbt__cte__stg_smy_pa__cancelaciones as (\n\n\nWITH cancelaciones_01 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt01_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt01_fix_dim')\n    )\n    )\n\n),\n\ncancelaciones_02 AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_cncltrgt02_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_cncltrgt02_fix_dim')\n    )\n    )\n\n), \n\ncancelaciones_totales AS (\n    SELECT * FROM cancelaciones_01\n    UNION ALL\n    SELECT * FROM cancelaciones_02\n)\n\nSELECT\n*\nFROM cancelaciones_totales\nWHERE ctrtd_fm  <> ctrtd_to \nAND id_pd IN (1806,1727,1736)\nAND id_tp_clnt = 1073\nAND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load) \nAND year(dt_ini_pcs) >= 2023\nAND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\nAND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)"}], "column_name": null, "file_key_name": "models.stg_smy_pa__cancelaciones"}, "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498": {"test_metadata": {"name": "fecha_dentro_particion_consumos", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf"], "alias": "fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.5002592, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__consumos"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,cast(date_parse(cast(cast(dt_inf as int) as varchar),'%Y%m%d') as date) as dt_inf_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nagrego_num as (select id_ac,\ndt_inf_date as dt_inf,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.id_ac,\nultima_particion.dt_inf\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.id_ac = anteult_particion.id_ac\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where dt_inf < ult_particion and dt_inf > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19": {"test_metadata": {"name": "test_cant_null_consumos", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf"], "alias": "test_cant_null_consumos_stg_smy_pa__consumos_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.504263, "relation_name": null, "raw_code": "{{ test_test_cant_null_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__consumos"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nagrego_num as (select id_ac,\ndt_inf,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_inf is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_inf is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3": {"test_metadata": {"name": "test_cant_null_consumos", "kwargs": {"column_name": "trfc_dwld", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld"], "alias": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.5084832, "relation_name": null, "raw_code": "{{ test_test_cant_null_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__consumos"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nagrego_num as (select id_ac,\ntrfc_dwld,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and trfc_dwld is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and trfc_dwld is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "trfc_dwld", "file_key_name": "models.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4": {"test_metadata": {"name": "test_cant_null_consumos", "kwargs": {"column_name": "trfc_upld", "model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld"], "alias": "test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.511033, "relation_name": null, "raw_code": "{{ test_test_cant_null_consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__consumos"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nagrego_num as (select id_ac,\ntrfc_upld,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and trfc_upld is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and trfc_upld is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "trfc_upld", "file_key_name": "models.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__consumos", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__consumos')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_"], "alias": "cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.51369, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__consumos(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__consumos"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__consumos", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.sql", "compiled": true, "compiled_code": "\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.stg_smy_pa__consumos"}, "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9": {"test_metadata": {"name": "fecha_dentro_particion_retenciones", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9", "fqn": ["VoluntaryChurnABT", "staging", "fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs"], "alias": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3"}, "created_at": 1681142229.517007, "relation_name": null, "raw_code": "{{ test_fecha_dentro_particion_retenciones(**_dbt_generic_test_kwargs) }}{{ config(alias=\"fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3\") }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_dentro_particion_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/fecha_dentro_particion_retenci_70074966fba65beb74cf4618db7158c3.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *,cast(dt_ini_pcs as date) as dt_ini_pcs_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_ini_pcs_date as dt_ini_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.hh_cd,\nultima_particion.dt_ini_pcs\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.hh_cd = anteult_particion.hh_cd\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where dt_ini_pcs < ult_particion and dt_ini_pcs > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "dt_inf", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.521066, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_inf,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_inf is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_inf is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "dt_inf", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "dt_ini_pcs", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.524823, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_ini_pcs,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_ini_pcs is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_ini_pcs is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "dt_ini_pcs", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "ctrtd_fm", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.527551, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nctrtd_fm,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ctrtd_fm is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ctrtd_fm is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "ctrtd_fm", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "ctrtd_to", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.5303118, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nctrtd_to,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and ctrtd_to is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and ctrtd_to is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "ctrtd_to", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "id_pd", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.532882, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_pd,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_pd is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_pd is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "id_pd", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "id_tp_clnt", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.535584, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\nid_tp_clnt,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and id_tp_clnt is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and id_tp_clnt is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "id_tp_clnt", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e": {"test_metadata": {"name": "test_cant_null_retenciones", "kwargs": {"column_name": "dt_load", "model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e", "fqn": ["VoluntaryChurnABT", "staging", "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load"], "alias": "test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.5382998, "relation_name": null, "raw_code": "{{ test_test_cant_null_retenciones(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\ndt_load,\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and dt_load is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and dt_load is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": "dt_load", "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa": {"test_metadata": {"name": "cant_particiones_stg_smy_pa__retenciones", "kwargs": {"model": "{{ get_where_subquery(ref('stg_smy_pa__retenciones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa", "fqn": ["VoluntaryChurnABT", "staging", "cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_"], "alias": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa"}, "created_at": 1681142229.540848, "relation_name": null, "raw_code": "{{ test_cant_particiones_stg_smy_pa__retenciones(**_dbt_generic_test_kwargs) }}{{ config(alias=\"cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa\") }}", "language": "sql", "refs": [["stg_smy_pa__retenciones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__retenciones", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/staging/staging.yml/cant_particiones_stg_smy_pa__r_b64301ca312ac4d6272db92cb71e19fa.sql", "compiled": true, "compiled_code": "\n\nWITH  __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n),seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "sql": " __dbt__cte__stg_smy_pa__retenciones as (\n\n\nWITH retenciones AS (\n    SELECT dt_ini_pcs, hh_cd, ctrtd_fm, ctrtd_to, id_pd, id_tp_clnt, dt_load\n    FROM \n    \n    (SELECT \n    *\n    FROM prod_raw_dwh_smy_pa.cstmr_360_rtntrgt_fix_dim\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = (\n    SELECT particion FROM dev_voluntary_churn_utilities.tablas_particiones\n    WHERE tabla = lower('cstmr_360_rtntrgt_fix_dim')\n    )\n    )\n\n    WHERE desc_mtv <> 'No Aplica'\n    AND id_tp_clnt = 1073\n    AND id_pd in (1806, 1727, 1736)\n    AND date_add('day', 1, DATE(dt_ini_pcs)) = DATE(dt_load)\n    AND year(dt_ini_pcs) >= 2023\n    AND DATE(dt_ini_pcs) <= date_trunc('week', CURRENT_DATE)\n    AND dt_ini_pcs BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n)\n\nSELECT * FROM retenciones\n)"}], "column_name": null, "file_key_name": "models.stg_smy_pa__retenciones"}, "test.VoluntaryChurnABT.fecha_particion_tablas_particiones_particion.a25bc4d8e4": {"test_metadata": {"name": "fecha_particion", "kwargs": {"column_name": "particion", "model": "{{ get_where_subquery(ref('tablas_particiones')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "fecha_particion_tablas_particiones_particion", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "fecha_particion_tablas_particiones_particion.sql", "original_file_path": "models/utilities/utilities.yml", "unique_id": "test.VoluntaryChurnABT.fecha_particion_tablas_particiones_particion.a25bc4d8e4", "fqn": ["VoluntaryChurnABT", "utilities", "fecha_particion_tablas_particiones_particion"], "alias": "fecha_particion_tablas_particiones_particion", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.5451462, "relation_name": null, "raw_code": "{{ test_fecha_particion(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["tablas_particiones"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_fecha_particion", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.tablas_particiones"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/utilities/utilities.yml/fecha_particion_tablas_particiones_particion.sql", "compiled": true, "compiled_code": "\n\n\n\nSELECT *\nFROM dev_voluntary_churn_utilities.tablas_particiones\nwhere year = year(date_trunc('week',CURRENT_DATE))\n\tand month = month(date_trunc('week',CURRENT_DATE))\n\tand day = DAY(date_trunc('week',CURRENT_DATE))\n\tand particion != date_trunc('week',CURRENT_DATE)\n\tand tabla in (\n\t\t'cstmr_360_cncltrgt01_fix_dim',\n\t\t'cstmr_360_cncltrgt02_fix_dim',\n\t\t'cstmr_360_rtntrgt_fix_dim',\n\t\t'cstmr_360_data_fix_fct',\n\t\t'cstmr_360_perfhcf_fix_dim'\n    )\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "particion", "file_key_name": "models.tablas_particiones"}, "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_hh_cd.1be266aef7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_metricas_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_metricas_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_metricas_aggregated_to_week_hh_cd.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_hh_cd.1be266aef7", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_metricas_aggregated_to_week_hh_cd"], "alias": "not_null_int_metricas_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.553611, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_metricas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_metricas_aggregated_to_week_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.int_metricas_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.c77e3b3d7e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_metricas_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_metricas_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.c77e3b3d7e", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_metricas_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_metricas_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.554807, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_metricas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fecha_inicio_semana\nfrom dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week\nwhere fecha_inicio_semana is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fecha_inicio_semana", "file_key_name": "models.int_metricas_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana.b844623204": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_metricas_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_463f0f4193d1c53aa5fd686b6ae351e3.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana.b844623204", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_463f0f4193d1c53aa5fd686b6ae351e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_463f0f4193d1c53aa5fd686b6ae351e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_463f0f4193d1c53aa5fd686b6ae351e3"}, "created_at": 1681142229.556006, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_463f0f4193d1c53aa5fd686b6ae351e3\") }}", "language": "sql", "refs": [["int_metricas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery", "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"], "nodes": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/dbt_expectations_expect_compou_463f0f4193d1c53aa5fd686b6ae351e3.sql", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        hh_cd,fecha_inicio_semana\n    from dev_voluntary_churn_intermediate.int_metricas_aggregated_to_week\n    where\n        1=1\n        and \n    not (\n        hh_cd is null and \n        fecha_inicio_semana is null\n        \n    )\n\n\n    \n    group by\n        hh_cd,fecha_inicio_semana\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_metricas_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_consumos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_consumos_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_consumos_aggregated_to_week_hh_cd.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_consumos_aggregated_to_week_hh_cd"], "alias": "not_null_int_consumos_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.559456, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_consumos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_consumos_aggregated_to_week_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.int_consumos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_consumos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_consumos_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.5606241, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_consumos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fecha_inicio_semana\nfrom dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week\nwhere fecha_inicio_semana is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fecha_inicio_semana", "file_key_name": "models.int_consumos_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_consumos_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883"}, "created_at": 1681142229.562463, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883\") }}", "language": "sql", "refs": [["int_consumos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery", "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"], "nodes": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/dbt_expectations_expect_compou_fb0a07945cfacbedefd35b441f2d7883.sql", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        hh_cd,fecha_inicio_semana\n    from dev_voluntary_churn_intermediate.int_consumos_aggregated_to_week\n    where\n        1=1\n        and \n    not (\n        hh_cd is null and \n        fecha_inicio_semana is null\n        \n    )\n\n\n    \n    group by\n        hh_cd,fecha_inicio_semana\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_consumos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_nodos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_nodos_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_nodos_aggregated_to_week_hh_cd.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_nodos_aggregated_to_week_hh_cd"], "alias": "not_null_int_nodos_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.56574, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_nodos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_nodos_aggregated_to_week_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.int_nodos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_nodos_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_nodos_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.567093, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_nodos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fecha_inicio_semana\nfrom dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week\nwhere fecha_inicio_semana is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fecha_inicio_semana", "file_key_name": "models.int_nodos_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_nodos_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96"}, "created_at": 1681142229.568269, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96\") }}", "language": "sql", "refs": [["int_nodos_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery", "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"], "nodes": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/dbt_expectations_expect_compou_4c336e315545c73ff93e09b7602fcf96.sql", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        hh_cd,fecha_inicio_semana\n    from dev_voluntary_churn_intermediate.int_nodos_aggregated_to_week\n    where\n        1=1\n        and \n    not (\n        hh_cd is null and \n        fecha_inicio_semana is null\n        \n    )\n\n\n    \n    group by\n        hh_cd,fecha_inicio_semana\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_nodos_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_facturas_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_facturas_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_facturas_aggregated_to_week_hh_cd.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_facturas_aggregated_to_week_hh_cd"], "alias": "not_null_int_facturas_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.571685, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_facturas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_facturas_aggregated_to_week_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.int_facturas_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_facturas_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_facturas_aggregated_to_week_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.5728462, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_facturas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fecha_inicio_semana\nfrom dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week\nwhere fecha_inicio_semana is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fecha_inicio_semana", "file_key_name": "models.int_facturas_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_facturas_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61"}, "created_at": 1681142229.5740201, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61\") }}", "language": "sql", "refs": [["int_facturas_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery", "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"], "nodes": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/dbt_expectations_expect_compou_5caef9b2bc2d3ee4662a7ef3de4f1e61.sql", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        hh_cd,fecha_inicio_semana\n    from dev_voluntary_churn_intermediate.int_facturas_aggregated_to_week\n    where\n        1=1\n        and \n    not (\n        hh_cd is null and \n        fecha_inicio_semana is null\n        \n    )\n\n\n    \n    group by\n        hh_cd,fecha_inicio_semana\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_facturas_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('int_features_engineering_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_features_engineering_aggregated_to_week_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_features_engineering_aggregated_to_week_hh_cd.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_features_engineering_aggregated_to_week_hh_cd"], "alias": "not_null_int_features_engineering_aggregated_to_week_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.577467, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_features_engineering_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_features_engineering_aggregated_to_week_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.int_features_engineering_aggregated_to_week"}, "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('int_features_engineering_aggregated_to_week')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310", "fqn": ["VoluntaryChurnABT", "intermediate", "not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana"], "alias": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf"}, "created_at": 1681142229.5786319, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf\") }}", "language": "sql", "refs": [["int_features_engineering_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/not_null_int_features_engineer_41a8fc1c1a5036644cad44ee9da856cf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fecha_inicio_semana\nfrom dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week\nwhere fecha_inicio_semana is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fecha_inicio_semana", "file_key_name": "models.int_features_engineering_aggregated_to_week"}, "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17": {"test_metadata": {"name": "expect_compound_columns_to_be_unique", "kwargs": {"column_list": ["hh_cd", "fecha_inicio_semana"], "model": "{{ get_where_subquery(ref('int_features_engineering_aggregated_to_week')) }}"}, "namespace": "dbt_expectations"}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44.sql", "original_file_path": "models/intermediate/intermediate.yml", "unique_id": "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17", "fqn": ["VoluntaryChurnABT", "intermediate", "dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana"], "alias": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44"}, "created_at": 1681142229.580012, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_compound_columns_to_be_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44\") }}", "language": "sql", "refs": [["int_features_engineering_aggregated_to_week"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro.dbt.get_where_subquery", "macro.dbt_expectations.test_expect_compound_columns_to_be_unique"], "nodes": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/intermediate/intermediate.yml/dbt_expectations_expect_compou_40d56743ee65723d2c2c2cd93374fc44.sql", "compiled": true, "compiled_code": "\n\n\n\nwith validation_errors as (\n\n    select\n        hh_cd,fecha_inicio_semana\n    from dev_voluntary_churn_intermediate.int_features_engineering_aggregated_to_week\n    where\n        1=1\n        and \n    not (\n        hh_cd is null and \n        fecha_inicio_semana is null\n        \n    )\n\n\n    \n    group by\n        hh_cd,fecha_inicio_semana\n    having count(*) > 1\n\n)\nselect * from validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.int_features_engineering_aggregated_to_week"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "cm_us", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_cm_us.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_cm_us"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_cm_us", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.6184509, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_cm_us.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(cm_us) as cm_us_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,cm_us_abs as cm_us,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when cm_us = 0 then cm_us + 0.1 end as cm_us1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.cm_us1 < (anteult_particion.cm_us1 - (anteult_particion.cm_us1 * 10 / 100)) \nor ult_particion.cm_us1 > (anteult_particion.cm_us1 + (anteult_particion.cm_us1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "cm_us", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "numr", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_numr", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_numr.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_numr"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_numr", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.62286, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_numr.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(numr) as numr_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,numr_abs as numr,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when numr = 0 then numr + 0.1 end as numr1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.numr1 < (anteult_particion.numr1 - (anteult_particion.numr1 * 10 / 100)) \nor ult_particion.numr1 > (anteult_particion.numr1 + (anteult_particion.numr1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "numr", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "samp", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_samp", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_samp.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_samp"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_samp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.625431, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_samp.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(samp) as samp_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,samp_abs as samp,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when samp = 0 then samp + 0.1 end as samp1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.samp1 < (anteult_particion.samp1 - (anteult_particion.samp1 * 10 / 100)) \nor ult_particion.samp1 > (anteult_particion.samp1 + (anteult_particion.samp1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "samp", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "ucer_deg", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg"], "alias": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_afdff199570646b211a59328edad4426"}, "created_at": 1681142229.628138, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_afdff199570646b211a59328edad4426\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_afdff199570646b211a59328edad4426.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(ucer_deg) as ucer_deg_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,ucer_deg_abs as ucer_deg,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when ucer_deg = 0 then ucer_deg + 0.1 end as ucer_deg1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.ucer_deg1 < (anteult_particion.ucer_deg1 - (anteult_particion.ucer_deg1 * 10 / 100)) \nor ult_particion.ucer_deg1 > (anteult_particion.ucer_deg1 + (anteult_particion.ucer_deg1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "ucer_deg", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_snr_deg", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.6310458, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(snr_deg) as snr_deg_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,snr_deg_abs as snr_deg,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when snr_deg = 0 then snr_deg + 0.1 end as snr_deg1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.snr_deg1 < (anteult_particion.snr_deg1 - (anteult_particion.snr_deg1 * 10 / 100)) \nor ult_particion.snr_deg1 > (anteult_particion.snr_deg1 + (anteult_particion.snr_deg1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "snr_deg", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "pct_npa", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_pct_npa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.6335921, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(pct_npa) as pct_npa_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,pct_npa_abs as pct_npa,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when pct_npa = 0 then pct_npa + 0.1 end as pct_npa1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.pct_npa1 < (anteult_particion.pct_npa1 - (anteult_particion.pct_npa1 * 10 / 100)) \nor ult_particion.pct_npa1 > (anteult_particion.pct_npa1 + (anteult_particion.pct_npa1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pct_npa", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "pct_ucer", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer"], "alias": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4"}, "created_at": 1681142229.63632, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_46d7451af1e0f9f1266706f4142b0fd4.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(pct_ucer) as pct_ucer_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,pct_ucer_abs as pct_ucer,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when pct_ucer = 0 then pct_ucer + 0.1 end as pct_ucer1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.pct_ucer1 < (anteult_particion.pct_ucer1 - (anteult_particion.pct_ucer1 * 10 / 100)) \nor ult_particion.pct_ucer1 > (anteult_particion.pct_ucer1 + (anteult_particion.pct_ucer1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "pct_ucer", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "es_gold", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_es_gold", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_es_gold.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_es_gold"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_es_gold", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.639221, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_es_gold.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(es_gold) as es_gold_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,es_gold_abs as es_gold,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when es_gold = 0 then es_gold + 0.1 end as es_gold1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.es_gold1 < (anteult_particion.es_gold1 - (anteult_particion.es_gold1 * 10 / 100)) \nor ult_particion.es_gold1 > (anteult_particion.es_gold1 + (anteult_particion.es_gold1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "es_gold", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld"], "alias": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad"}, "created_at": 1681142229.641768, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_8da99700a0d1c0028acbd3651984efad.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_trfc_dwld) as max_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_trfc_dwld_abs as max_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_trfc_dwld = 0 then max_trfc_dwld + 0.1 end as max_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_trfc_dwld1 < (anteult_particion.max_trfc_dwld1 - (anteult_particion.max_trfc_dwld1 * 10 / 100)) \nor ult_particion.max_trfc_dwld1 > (anteult_particion.max_trfc_dwld1 + (anteult_particion.max_trfc_dwld1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_trfc_dwld", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld"], "alias": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812"}, "created_at": 1681142229.644675, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_f9b2c3b4faf63da4ec53b487aa46c812.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_trfc_dwld) as avg_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_trfc_dwld_abs as avg_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_trfc_dwld = 0 then avg_trfc_dwld + 0.1 end as avg_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_trfc_dwld1 < (anteult_particion.avg_trfc_dwld1 - (anteult_particion.avg_trfc_dwld1 * 10 / 100)) \nor ult_particion.avg_trfc_dwld1 > (anteult_particion.avg_trfc_dwld1 + (anteult_particion.avg_trfc_dwld1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_trfc_dwld", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld"], "alias": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43"}, "created_at": 1681142229.647574, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_2a776273680bd1519805ff6ab0c4cd43.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(sum_trfc_dwld) as sum_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,sum_trfc_dwld_abs as sum_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_trfc_dwld = 0 then sum_trfc_dwld + 0.1 end as sum_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_trfc_dwld1 < (anteult_particion.sum_trfc_dwld1 - (anteult_particion.sum_trfc_dwld1 * 10 / 100)) \nor ult_particion.sum_trfc_dwld1 > (anteult_particion.sum_trfc_dwld1 + (anteult_particion.sum_trfc_dwld1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_trfc_dwld", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld"], "alias": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456"}, "created_at": 1681142229.650312, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_4255e7e509eb4aa549597d264430e456.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_trfc_upld) as max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_trfc_upld_abs as max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_trfc_upld = 0 then max_trfc_upld + 0.1 end as max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_trfc_upld1 < (anteult_particion.max_trfc_upld1 - (anteult_particion.max_trfc_upld1 * 10 / 100)) \nor ult_particion.max_trfc_upld1 > (anteult_particion.max_trfc_upld1 + (anteult_particion.max_trfc_upld1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_trfc_upld", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld"], "alias": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_764a861434f05b02000731df85a1a901"}, "created_at": 1681142229.6532018, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_764a861434f05b02000731df85a1a901\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_764a861434f05b02000731df85a1a901.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_max_trfc_upld) as avg_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_max_trfc_upld_abs as avg_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_max_trfc_upld = 0 then avg_max_trfc_upld + 0.1 end as avg_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_max_trfc_upld1 < (anteult_particion.avg_max_trfc_upld1 - (anteult_particion.avg_max_trfc_upld1 * 10 / 100)) \nor ult_particion.avg_max_trfc_upld1 > (anteult_particion.avg_max_trfc_upld1 + (anteult_particion.avg_max_trfc_upld1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_max_trfc_upld", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld"], "alias": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867"}, "created_at": 1681142229.656096, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_5fd6332d0369a03036fc167e7cf6e867.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(sum_max_trfc_upld) as sum_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,sum_max_trfc_upld_abs as sum_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_max_trfc_upld = 0 then sum_max_trfc_upld + 0.1 end as sum_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_max_trfc_upld1 < (anteult_particion.sum_max_trfc_upld1 - (anteult_particion.sum_max_trfc_upld1 * 10 / 100)) \nor ult_particion.sum_max_trfc_upld1 > (anteult_particion.sum_max_trfc_upld1 + (anteult_particion.sum_max_trfc_upld1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_max_trfc_upld", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83"}, "created_at": 1681142229.658827, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_68f30c7863a33494e4ea11f6f6679c83.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(trfc_dwld_snr_deg) as trfc_dwld_snr_deg_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,trfc_dwld_snr_deg_abs as trfc_dwld_snr_deg,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when trfc_dwld_snr_deg = 0 then trfc_dwld_snr_deg + 0.1 end as trfc_dwld_snr_deg1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.trfc_dwld_snr_deg1 < (anteult_particion.trfc_dwld_snr_deg1 - (anteult_particion.trfc_dwld_snr_deg1 * 10 / 100)) \nor ult_particion.trfc_dwld_snr_deg1 > (anteult_particion.trfc_dwld_snr_deg1 + (anteult_particion.trfc_dwld_snr_deg1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364"}, "created_at": 1681142229.661729, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_7105e554712c0283db78ef8a3ca18364.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(trfc_dwld_cm_us) as trfc_dwld_cm_us_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,trfc_dwld_cm_us_abs as trfc_dwld_cm_us,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when trfc_dwld_cm_us = 0 then trfc_dwld_cm_us + 0.1 end as trfc_dwld_cm_us1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.trfc_dwld_cm_us1 < (anteult_particion.trfc_dwld_cm_us1 - (anteult_particion.trfc_dwld_cm_us1 * 10 / 100)) \nor ult_particion.trfc_dwld_cm_us1 > (anteult_particion.trfc_dwld_cm_us1 + (anteult_particion.trfc_dwld_cm_us1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "trfc_dwld_cm_us", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel"], "alias": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670"}, "created_at": 1681142229.6650581, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_ddd6f8ac0cee6bdb1f467c4b22ef5670.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(unexp_amt_rel) as unexp_amt_rel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,unexp_amt_rel_abs as unexp_amt_rel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when unexp_amt_rel = 0 then unexp_amt_rel + 0.1 end as unexp_amt_rel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.unexp_amt_rel1 < (anteult_particion.unexp_amt_rel1 - (anteult_particion.unexp_amt_rel1 * 10 / 100)) \nor ult_particion.unexp_amt_rel1 > (anteult_particion.unexp_amt_rel1 + (anteult_particion.unexp_amt_rel1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "unexp_amt_rel", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl"], "alias": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413"}, "created_at": 1681142229.6677911, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_fc7275a992a942b1f88b68018c1b8413.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(unexp_amt_ttl) as unexp_amt_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,unexp_amt_ttl_abs as unexp_amt_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when unexp_amt_ttl = 0 then unexp_amt_ttl + 0.1 end as unexp_amt_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.unexp_amt_ttl1 < (anteult_particion.unexp_amt_ttl1 - (anteult_particion.unexp_amt_ttl1 * 10 / 100)) \nor ult_particion.unexp_amt_ttl1 > (anteult_particion.unexp_amt_ttl1 + (anteult_particion.unexp_amt_ttl1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "unexp_amt_ttl", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.670672, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_ctt) as max_ctt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_ctt_abs as max_ctt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_ctt = 0 then max_ctt + 0.1 end as max_ctt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_ctt1 < (anteult_particion.max_ctt1 - (anteult_particion.max_ctt1 * 10 / 100)) \nor ult_particion.max_ctt1 > (anteult_particion.max_ctt1 + (anteult_particion.max_ctt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_ctt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due"], "alias": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f"}, "created_at": 1681142229.6733649, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_fc8493b2682e66123e75471c1f878b5f.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_amt_due) as max_amt_due_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_amt_due_abs as max_amt_due,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_amt_due = 0 then max_amt_due + 0.1 end as max_amt_due1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_amt_due1 < (anteult_particion.max_amt_due1 - (anteult_particion.max_amt_due1 * 10 / 100)) \nor ult_particion.max_amt_due1 > (anteult_particion.max_amt_due1 + (anteult_particion.max_amt_due1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_amt_due", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt"], "alias": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de"}, "created_at": 1681142229.6760871, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_f10affc87ff766948b43911291c6c5de.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_unexp_amt) as max_unexp_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_unexp_amt_abs as max_unexp_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_unexp_amt = 0 then max_unexp_amt + 0.1 end as max_unexp_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_unexp_amt1 < (anteult_particion.max_unexp_amt1 - (anteult_particion.max_unexp_amt1 * 10 / 100)) \nor ult_particion.max_unexp_amt1 > (anteult_particion.max_unexp_amt1 + (anteult_particion.max_unexp_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_unexp_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_30_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt"], "alias": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0"}, "created_at": 1681142229.678983, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_e2221f4ce35c0877cdcc1a64f3d0c7d0.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_30_amt) as max_at_30_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_30_amt_abs as max_at_30_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_30_amt = 0 then max_at_30_amt + 0.1 end as max_at_30_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_30_amt1 < (anteult_particion.max_at_30_amt1 - (anteult_particion.max_at_30_amt1 * 10 / 100)) \nor ult_particion.max_at_30_amt1 > (anteult_particion.max_at_30_amt1 + (anteult_particion.max_at_30_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_30_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_60_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt"], "alias": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d"}, "created_at": 1681142229.68187, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_aa41dc09d522f2aa28fd0db839dcc46d.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_60_amt) as max_at_60_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_60_amt_abs as max_at_60_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_60_amt = 0 then max_at_60_amt + 0.1 end as max_at_60_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_60_amt1 < (anteult_particion.max_at_60_amt1 - (anteult_particion.max_at_60_amt1 * 10 / 100)) \nor ult_particion.max_at_60_amt1 > (anteult_particion.max_at_60_amt1 + (anteult_particion.max_at_60_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_60_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_90_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt"], "alias": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100"}, "created_at": 1681142229.684605, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_f5638584cb773bd280979e8a0cbbd100.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_90_amt) as max_at_90_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_90_amt_abs as max_at_90_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_90_amt = 0 then max_at_90_amt + 0.1 end as max_at_90_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_90_amt1 < (anteult_particion.max_at_90_amt1 - (anteult_particion.max_at_90_amt1 * 10 / 100)) \nor ult_particion.max_at_90_amt1 > (anteult_particion.max_at_90_amt1 + (anteult_particion.max_at_90_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_90_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_120_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt"], "alias": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8"}, "created_at": 1681142229.687518, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_355d812b3403d69e546556369158fdd8.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_120_amt) as max_at_120_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_120_amt_abs as max_at_120_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_120_amt = 0 then max_at_120_amt + 0.1 end as max_at_120_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_120_amt1 < (anteult_particion.max_at_120_amt1 - (anteult_particion.max_at_120_amt1 * 10 / 100)) \nor ult_particion.max_at_120_amt1 > (anteult_particion.max_at_120_amt1 + (anteult_particion.max_at_120_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_120_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_150_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt"], "alias": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90"}, "created_at": 1681142229.6904058, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_5eb89424878ff5414edd17ab6d501a90.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_150_amt) as max_at_150_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_150_amt_abs as max_at_150_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_150_amt = 0 then max_at_150_amt + 0.1 end as max_at_150_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_150_amt1 < (anteult_particion.max_at_150_amt1 - (anteult_particion.max_at_150_amt1 * 10 / 100)) \nor ult_particion.max_at_150_amt1 > (anteult_particion.max_at_150_amt1 + (anteult_particion.max_at_150_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_150_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_180_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt"], "alias": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86"}, "created_at": 1681142229.6933289, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_67d670682537d9d9ee5eb90d09534b86.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_180_amt) as max_at_180_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_180_amt_abs as max_at_180_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_180_amt = 0 then max_at_180_amt + 0.1 end as max_at_180_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_180_amt1 < (anteult_particion.max_at_180_amt1 - (anteult_particion.max_at_180_amt1 * 10 / 100)) \nor ult_particion.max_at_180_amt1 > (anteult_particion.max_at_180_amt1 + (anteult_particion.max_at_180_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_180_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_210_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt"], "alias": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad"}, "created_at": 1681142229.6960719, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_5384a9f6857b0078725cbadfb47767ad.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_210_amt) as max_at_210_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_210_amt_abs as max_at_210_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_210_amt = 0 then max_at_210_amt + 0.1 end as max_at_210_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_210_amt1 < (anteult_particion.max_at_210_amt1 - (anteult_particion.max_at_210_amt1 * 10 / 100)) \nor ult_particion.max_at_210_amt1 > (anteult_particion.max_at_210_amt1 + (anteult_particion.max_at_210_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_210_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_240_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt"], "alias": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080"}, "created_at": 1681142229.698988, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_35e001050f2ab626ed8b897dfd347080.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_240_amt) as max_at_240_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_240_amt_abs as max_at_240_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_240_amt = 0 then max_at_240_amt + 0.1 end as max_at_240_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_240_amt1 < (anteult_particion.max_at_240_amt1 - (anteult_particion.max_at_240_amt1 * 10 / 100)) \nor ult_particion.max_at_240_amt1 > (anteult_particion.max_at_240_amt1 + (anteult_particion.max_at_240_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_240_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_270_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt"], "alias": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de"}, "created_at": 1681142229.70189, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_f961db8e668f121d7019566bee7d03de.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_270_amt) as max_at_270_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_270_amt_abs as max_at_270_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_270_amt = 0 then max_at_270_amt + 0.1 end as max_at_270_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_270_amt1 < (anteult_particion.max_at_270_amt1 - (anteult_particion.max_at_270_amt1 * 10 / 100)) \nor ult_particion.max_at_270_amt1 > (anteult_particion.max_at_270_amt1 + (anteult_particion.max_at_270_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_270_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_300_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt"], "alias": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7"}, "created_at": 1681142229.704609, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_177e248401d9b2e6fe3169e60ddccdc7.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_300_amt) as max_at_300_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_300_amt_abs as max_at_300_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_300_amt = 0 then max_at_300_amt + 0.1 end as max_at_300_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_300_amt1 < (anteult_particion.max_at_300_amt1 - (anteult_particion.max_at_300_amt1 * 10 / 100)) \nor ult_particion.max_at_300_amt1 > (anteult_particion.max_at_300_amt1 + (anteult_particion.max_at_300_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_300_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_330_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt"], "alias": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1"}, "created_at": 1681142229.70751, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_17e457e5530db6081d2cf26abbc4b2a1.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_330_amt) as max_at_330_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_330_amt_abs as max_at_330_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_330_amt = 0 then max_at_330_amt + 0.1 end as max_at_330_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_330_amt1 < (anteult_particion.max_at_330_amt1 - (anteult_particion.max_at_330_amt1 * 10 / 100)) \nor ult_particion.max_at_330_amt1 > (anteult_particion.max_at_330_amt1 + (anteult_particion.max_at_330_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_330_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_at_360_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt"], "alias": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806"}, "created_at": 1681142229.710412, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_8d1350d43f05fca228de51f22bed0806.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_at_360_amt) as max_at_360_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_at_360_amt_abs as max_at_360_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_at_360_amt = 0 then max_at_360_amt + 0.1 end as max_at_360_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_at_360_amt1 < (anteult_particion.max_at_360_amt1 - (anteult_particion.max_at_360_amt1 * 10 / 100)) \nor ult_particion.max_at_360_amt1 > (anteult_particion.max_at_360_amt1 + (anteult_particion.max_at_360_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_at_360_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt_producto_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel"], "alias": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2"}, "created_at": 1681142229.713142, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_3cbf4664c6f72a3b5591572d2006e3c2.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_ctt_producto_tel) as max_ctt_producto_tel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_ctt_producto_tel_abs as max_ctt_producto_tel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_ctt_producto_tel = 0 then max_ctt_producto_tel + 0.1 end as max_ctt_producto_tel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_ctt_producto_tel1 < (anteult_particion.max_ctt_producto_tel1 - (anteult_particion.max_ctt_producto_tel1 * 10 / 100)) \nor ult_particion.max_ctt_producto_tel1 > (anteult_particion.max_ctt_producto_tel1 + (anteult_particion.max_ctt_producto_tel1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_ctt_producto_tel", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt_producto_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int"], "alias": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_24013786f70551108f95443f409b0c22"}, "created_at": 1681142229.716408, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_24013786f70551108f95443f409b0c22\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_24013786f70551108f95443f409b0c22.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_ctt_producto_int) as max_ctt_producto_int_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_ctt_producto_int_abs as max_ctt_producto_int,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_ctt_producto_int = 0 then max_ctt_producto_int + 0.1 end as max_ctt_producto_int1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_ctt_producto_int1 < (anteult_particion.max_ctt_producto_int1 - (anteult_particion.max_ctt_producto_int1 * 10 / 100)) \nor ult_particion.max_ctt_producto_int1 > (anteult_particion.max_ctt_producto_int1 + (anteult_particion.max_ctt_producto_int1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_ctt_producto_int", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ctt_producto_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv"], "alias": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46"}, "created_at": 1681142229.719284, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_7b6c5d4b3dded99523b41feb0f641f46.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_ctt_producto_tv) as max_ctt_producto_tv_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_ctt_producto_tv_abs as max_ctt_producto_tv,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_ctt_producto_tv = 0 then max_ctt_producto_tv + 0.1 end as max_ctt_producto_tv1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_ctt_producto_tv1 < (anteult_particion.max_ctt_producto_tv1 - (anteult_particion.max_ctt_producto_tv1 * 10 / 100)) \nor ult_particion.max_ctt_producto_tv1 > (anteult_particion.max_ctt_producto_tv1 + (anteult_particion.max_ctt_producto_tv1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_ctt_producto_tv", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_tiene_descuento_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int"], "alias": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3"}, "created_at": 1681142229.722014, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_cc14011f576437f31dba2d235708e2b3.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_tiene_descuento_int) as max_tiene_descuento_int_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_tiene_descuento_int_abs as max_tiene_descuento_int,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_tiene_descuento_int = 0 then max_tiene_descuento_int + 0.1 end as max_tiene_descuento_int1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_tiene_descuento_int1 < (anteult_particion.max_tiene_descuento_int1 - (anteult_particion.max_tiene_descuento_int1 * 10 / 100)) \nor ult_particion.max_tiene_descuento_int1 > (anteult_particion.max_tiene_descuento_int1 + (anteult_particion.max_tiene_descuento_int1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_tiene_descuento_int", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_tiene_descuento_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel"], "alias": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d"}, "created_at": 1681142229.7249238, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_585b839ed598b6e0cb8c5598e97dba1d.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_tiene_descuento_tel) as max_tiene_descuento_tel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_tiene_descuento_tel_abs as max_tiene_descuento_tel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_tiene_descuento_tel = 0 then max_tiene_descuento_tel + 0.1 end as max_tiene_descuento_tel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_tiene_descuento_tel1 < (anteult_particion.max_tiene_descuento_tel1 - (anteult_particion.max_tiene_descuento_tel1 * 10 / 100)) \nor ult_particion.max_tiene_descuento_tel1 > (anteult_particion.max_tiene_descuento_tel1 + (anteult_particion.max_tiene_descuento_tel1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_tiene_descuento_tel", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_tiene_descuento_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv"], "alias": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_ac232c129858936600154503058e4a59"}, "created_at": 1681142229.7278059, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_ac232c129858936600154503058e4a59\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_ac232c129858936600154503058e4a59.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_tiene_descuento_tv) as max_tiene_descuento_tv_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_tiene_descuento_tv_abs as max_tiene_descuento_tv,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_tiene_descuento_tv = 0 then max_tiene_descuento_tv + 0.1 end as max_tiene_descuento_tv1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_tiene_descuento_tv1 < (anteult_particion.max_tiene_descuento_tv1 - (anteult_particion.max_tiene_descuento_tv1 * 10 / 100)) \nor ult_particion.max_tiene_descuento_tv1 > (anteult_particion.max_tiene_descuento_tv1 + (anteult_particion.max_tiene_descuento_tv1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_tiene_descuento_tv", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_cliente_arreglo_pago", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago"], "alias": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9"}, "created_at": 1681142229.730531, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_b131b286c80bfd29af96db5186f3a0a9.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_cliente_arreglo_pago) as max_cliente_arreglo_pago_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_cliente_arreglo_pago_abs as max_cliente_arreglo_pago,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_cliente_arreglo_pago = 0 then max_cliente_arreglo_pago + 0.1 end as max_cliente_arreglo_pago1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_cliente_arreglo_pago1 < (anteult_particion.max_cliente_arreglo_pago1 - (anteult_particion.max_cliente_arreglo_pago1 * 10 / 100)) \nor ult_particion.max_cliente_arreglo_pago1 > (anteult_particion.max_cliente_arreglo_pago1 + (anteult_particion.max_cliente_arreglo_pago1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_cliente_arreglo_pago", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_intencion_producto_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int"], "alias": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da"}, "created_at": 1681142229.733654, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_15a2a5780cfef3ababf7a51619e054da.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_intencion_producto_int) as max_intencion_producto_int_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_intencion_producto_int_abs as max_intencion_producto_int,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_intencion_producto_int = 0 then max_intencion_producto_int + 0.1 end as max_intencion_producto_int1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_intencion_producto_int1 < (anteult_particion.max_intencion_producto_int1 - (anteult_particion.max_intencion_producto_int1 * 10 / 100)) \nor ult_particion.max_intencion_producto_int1 > (anteult_particion.max_intencion_producto_int1 + (anteult_particion.max_intencion_producto_int1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_intencion_producto_int", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_intencion_producto_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv"], "alias": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8"}, "created_at": 1681142229.7366662, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_962855f68e4153321556ae2cc0c7d6b8.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_intencion_producto_tv) as max_intencion_producto_tv_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_intencion_producto_tv_abs as max_intencion_producto_tv,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_intencion_producto_tv = 0 then max_intencion_producto_tv + 0.1 end as max_intencion_producto_tv1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_intencion_producto_tv1 < (anteult_particion.max_intencion_producto_tv1 - (anteult_particion.max_intencion_producto_tv1 * 10 / 100)) \nor ult_particion.max_intencion_producto_tv1 > (anteult_particion.max_intencion_producto_tv1 + (anteult_particion.max_intencion_producto_tv1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_intencion_producto_tv", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_intencion_producto_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel"], "alias": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122"}, "created_at": 1681142229.739598, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_b7450a4342ff9b2f2d8134aedd7af122.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_intencion_producto_tel) as max_intencion_producto_tel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_intencion_producto_tel_abs as max_intencion_producto_tel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_intencion_producto_tel = 0 then max_intencion_producto_tel + 0.1 end as max_intencion_producto_tel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_intencion_producto_tel1 < (anteult_particion.max_intencion_producto_tel1 - (anteult_particion.max_intencion_producto_tel1 * 10 / 100)) \nor ult_particion.max_intencion_producto_tel1 > (anteult_particion.max_intencion_producto_tel1 + (anteult_particion.max_intencion_producto_tel1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_intencion_producto_tel", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_antiguedad_ultimo_ctt_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel"], "alias": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed"}, "created_at": 1681142229.7425432, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_d5696c7d3c92c36f636561317c26fbed.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_antiguedad_ultimo_ctt_tel) as max_antiguedad_ultimo_ctt_tel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_antiguedad_ultimo_ctt_tel_abs as max_antiguedad_ultimo_ctt_tel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_antiguedad_ultimo_ctt_tel = 0 then max_antiguedad_ultimo_ctt_tel + 0.1 end as max_antiguedad_ultimo_ctt_tel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_antiguedad_ultimo_ctt_tel1 < (anteult_particion.max_antiguedad_ultimo_ctt_tel1 - (anteult_particion.max_antiguedad_ultimo_ctt_tel1 * 10 / 100)) \nor ult_particion.max_antiguedad_ultimo_ctt_tel1 > (anteult_particion.max_antiguedad_ultimo_ctt_tel1 + (anteult_particion.max_antiguedad_ultimo_ctt_tel1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_antiguedad_ultimo_ctt_tel", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_antiguedad_ultimo_ctt_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int"], "alias": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859"}, "created_at": 1681142229.745545, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_bc489cc9d47cd159a612a1ebd2ea2859.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_antiguedad_ultimo_ctt_int) as max_antiguedad_ultimo_ctt_int_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_antiguedad_ultimo_ctt_int_abs as max_antiguedad_ultimo_ctt_int,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_antiguedad_ultimo_ctt_int = 0 then max_antiguedad_ultimo_ctt_int + 0.1 end as max_antiguedad_ultimo_ctt_int1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_antiguedad_ultimo_ctt_int1 < (anteult_particion.max_antiguedad_ultimo_ctt_int1 - (anteult_particion.max_antiguedad_ultimo_ctt_int1 * 10 / 100)) \nor ult_particion.max_antiguedad_ultimo_ctt_int1 > (anteult_particion.max_antiguedad_ultimo_ctt_int1 + (anteult_particion.max_antiguedad_ultimo_ctt_int1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_antiguedad_ultimo_ctt_int", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_antiguedad_ultimo_ctt_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv"], "alias": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd"}, "created_at": 1681142229.748517, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_c85fe9e0c65bcd82cf2084be15fb5edd.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_antiguedad_ultimo_ctt_tv) as max_antiguedad_ultimo_ctt_tv_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_antiguedad_ultimo_ctt_tv_abs as max_antiguedad_ultimo_ctt_tv,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_antiguedad_ultimo_ctt_tv = 0 then max_antiguedad_ultimo_ctt_tv + 0.1 end as max_antiguedad_ultimo_ctt_tv1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_antiguedad_ultimo_ctt_tv1 < (anteult_particion.max_antiguedad_ultimo_ctt_tv1 - (anteult_particion.max_antiguedad_ultimo_ctt_tv1 * 10 / 100)) \nor ult_particion.max_antiguedad_ultimo_ctt_tv1 > (anteult_particion.max_antiguedad_ultimo_ctt_tv1 + (anteult_particion.max_antiguedad_ultimo_ctt_tv1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_antiguedad_ultimo_ctt_tv", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "max_ar_actvn_dt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt"], "alias": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110"}, "created_at": 1681142229.751295, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_633d51b6ef6522a7e7447c3269423110.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(max_ar_actvn_dt) as max_ar_actvn_dt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,max_ar_actvn_dt_abs as max_ar_actvn_dt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_ar_actvn_dt = 0 then max_ar_actvn_dt + 0.1 end as max_ar_actvn_dt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_ar_actvn_dt1 < (anteult_particion.max_ar_actvn_dt1 - (anteult_particion.max_ar_actvn_dt1 * 10 / 100)) \nor ult_particion.max_ar_actvn_dt1 > (anteult_particion.max_ar_actvn_dt1 + (anteult_particion.max_ar_actvn_dt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_ar_actvn_dt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt"], "alias": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1681142229.7542138, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_ctt) as avg_ctt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_ctt_abs as avg_ctt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_ctt = 0 then avg_ctt + 0.1 end as avg_ctt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_ctt1 < (anteult_particion.avg_ctt1 - (anteult_particion.avg_ctt1 * 10 / 100)) \nor ult_particion.avg_ctt1 > (anteult_particion.avg_ctt1 + (anteult_particion.avg_ctt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_ctt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due"], "alias": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69"}, "created_at": 1681142229.7569852, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_3f6b72fe60de98cc7e2ffbe5965e6c69.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_amt_due) as avg_amt_due_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_amt_due_abs as avg_amt_due,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_amt_due = 0 then avg_amt_due + 0.1 end as avg_amt_due1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_amt_due1 < (anteult_particion.avg_amt_due1 - (anteult_particion.avg_amt_due1 * 10 / 100)) \nor ult_particion.avg_amt_due1 > (anteult_particion.avg_amt_due1 + (anteult_particion.avg_amt_due1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_amt_due", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt"], "alias": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c"}, "created_at": 1681142229.7597299, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_4e8c819618a5f795ae875b5b0183232c.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_unexp_amt) as avg_unexp_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_unexp_amt_abs as avg_unexp_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_unexp_amt = 0 then avg_unexp_amt + 0.1 end as avg_unexp_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_unexp_amt1 < (anteult_particion.avg_unexp_amt1 - (anteult_particion.avg_unexp_amt1 * 10 / 100)) \nor ult_particion.avg_unexp_amt1 > (anteult_particion.avg_unexp_amt1 + (anteult_particion.avg_unexp_amt1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_unexp_amt", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt_producto_tel", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel"], "alias": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38"}, "created_at": 1681142229.762646, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_bb9159ee072695e22e859f0b8c7bcf38.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_ctt_producto_tel) as avg_ctt_producto_tel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_ctt_producto_tel_abs as avg_ctt_producto_tel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_ctt_producto_tel = 0 then avg_ctt_producto_tel + 0.1 end as avg_ctt_producto_tel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_ctt_producto_tel1 < (anteult_particion.avg_ctt_producto_tel1 - (anteult_particion.avg_ctt_producto_tel1 * 10 / 100)) \nor ult_particion.avg_ctt_producto_tel1 > (anteult_particion.avg_ctt_producto_tel1 + (anteult_particion.avg_ctt_producto_tel1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_ctt_producto_tel", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt_producto_int", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int"], "alias": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291"}, "created_at": 1681142229.766075, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_fd2e97222ad7ceea783d2734def54291.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_ctt_producto_int) as avg_ctt_producto_int_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_ctt_producto_int_abs as avg_ctt_producto_int,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_ctt_producto_int = 0 then avg_ctt_producto_int + 0.1 end as avg_ctt_producto_int1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_ctt_producto_int1 < (anteult_particion.avg_ctt_producto_int1 - (anteult_particion.avg_ctt_producto_int1 * 10 / 100)) \nor ult_particion.avg_ctt_producto_int1 > (anteult_particion.avg_ctt_producto_int1 + (anteult_particion.avg_ctt_producto_int1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_ctt_producto_int", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9": {"test_metadata": {"name": "column_median_estadisticos_semanal", "kwargs": {"column_name": "avg_ctt_producto_tv", "model": "{{ get_where_subquery(ref('estadisticos_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv"], "alias": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361"}, "created_at": 1681142229.7688162, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_semanal(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361\") }}", "language": "sql", "refs": [["estadisticos_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_sem_63868e96603ae726d06cd3056e12b361.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *,abs(avg_ctt_producto_tv) as avg_ctt_producto_tv_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,avg_ctt_producto_tv_abs as avg_ctt_producto_tv,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_ctt_producto_tv = 0 then avg_ctt_producto_tv + 0.1 end as avg_ctt_producto_tv1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_ctt_producto_tv1 < (anteult_particion.avg_ctt_producto_tv1 - (anteult_particion.avg_ctt_producto_tv1 * 10 / 100)) \nor ult_particion.avg_ctt_producto_tv1 > (anteult_particion.avg_ctt_producto_tv1 + (anteult_particion.avg_ctt_producto_tv1 * 10 / 100)))\n\nselect * from joins\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_ctt_producto_tv", "file_key_name": "models.estadisticos_semanal"}, "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_estadisticos_mensual_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_estadisticos_mensual_hh_cd.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_estadisticos_mensual_hh_cd"], "alias": "not_null_estadisticos_mensual_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.771725, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/not_null_estadisticos_mensual_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_analytics.estadisticos_mensual\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl"], "alias": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77"}, "created_at": 1681142229.772884, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_6fc4983475d523d1b20cce615ffe6e77.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_max_ttl) as avg_max_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_max_ttl_abs as avg_max_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_max_ttl = 0 then avg_max_ttl + 0.1 end as avg_max_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_max_ttl1 < (anteult_particion.avg_max_ttl1 - (anteult_particion.avg_max_ttl1 * 10/ 100)) \nor ult_particion.avg_max_ttl1 > (anteult_particion.avg_max_ttl1 + (anteult_particion.avg_max_ttl1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_max_ttl", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due"], "alias": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2"}, "created_at": 1681142229.777442, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_19494b19860f965cf13df105bdfce2c2.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_max_amt_due) as avg_max_amt_due_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_max_amt_due_abs as avg_max_amt_due,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_max_amt_due = 0 then avg_max_amt_due + 0.1 end as avg_max_amt_due1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_max_amt_due1 < (anteult_particion.avg_max_amt_due1 - (anteult_particion.avg_max_amt_due1 * 10/ 100)) \nor ult_particion.avg_max_amt_due1 > (anteult_particion.avg_max_amt_due1 + (anteult_particion.avg_max_amt_due1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_max_amt_due", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt"], "alias": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6"}, "created_at": 1681142229.780355, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_a6871b8f9314932a30fc8536ad1abbc6.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_max_unexp_amt) as avg_max_unexp_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_max_unexp_amt_abs as avg_max_unexp_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_max_unexp_amt = 0 then avg_max_unexp_amt + 0.1 end as avg_max_unexp_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_max_unexp_amt1 < (anteult_particion.avg_max_unexp_amt1 - (anteult_particion.avg_max_unexp_amt1 * 10/ 100)) \nor ult_particion.avg_max_unexp_amt1 > (anteult_particion.avg_max_unexp_amt1 + (anteult_particion.avg_max_unexp_amt1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_max_unexp_amt", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a"}, "created_at": 1681142229.78311, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_4039b7ad7851a16c86c342b34760638a.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_trfc_dwld_snr_deg) as avg_trfc_dwld_snr_deg_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_trfc_dwld_snr_deg_abs as avg_trfc_dwld_snr_deg,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_trfc_dwld_snr_deg = 0 then avg_trfc_dwld_snr_deg + 0.1 end as avg_trfc_dwld_snr_deg1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_trfc_dwld_snr_deg1 < (anteult_particion.avg_trfc_dwld_snr_deg1 - (anteult_particion.avg_trfc_dwld_snr_deg1 * 10/ 100)) \nor ult_particion.avg_trfc_dwld_snr_deg1 > (anteult_particion.avg_trfc_dwld_snr_deg1 + (anteult_particion.avg_trfc_dwld_snr_deg1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a"}, "created_at": 1681142229.7860239, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_6cd2a513c8aaab679d80f7f94801f31a.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_trfc_dwld_cm_us) as avg_trfc_dwld_cm_us_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_trfc_dwld_cm_us_abs as avg_trfc_dwld_cm_us,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_trfc_dwld_cm_us = 0 then avg_trfc_dwld_cm_us + 0.1 end as avg_trfc_dwld_cm_us1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_trfc_dwld_cm_us1 < (anteult_particion.avg_trfc_dwld_cm_us1 - (anteult_particion.avg_trfc_dwld_cm_us1 * 10/ 100)) \nor ult_particion.avg_trfc_dwld_cm_us1 > (anteult_particion.avg_trfc_dwld_cm_us1 + (anteult_particion.avg_trfc_dwld_cm_us1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_trfc_dwld_cm_us", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel"], "alias": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b"}, "created_at": 1681142229.788903, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_6e1f6dd08ca5e08420e1f97b3b1a347b.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_unexp_amt_rel) as avg_unexp_amt_rel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_unexp_amt_rel_abs as avg_unexp_amt_rel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_unexp_amt_rel = 0 then avg_unexp_amt_rel + 0.1 end as avg_unexp_amt_rel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_unexp_amt_rel1 < (anteult_particion.avg_unexp_amt_rel1 - (anteult_particion.avg_unexp_amt_rel1 * 10/ 100)) \nor ult_particion.avg_unexp_amt_rel1 > (anteult_particion.avg_unexp_amt_rel1 + (anteult_particion.avg_unexp_amt_rel1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_unexp_amt_rel", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl"], "alias": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973"}, "created_at": 1681142229.7916439, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_607ff8366413e25c0d9b6e94ca60e973.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_unexp_amt_ttl) as avg_unexp_amt_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_unexp_amt_ttl_abs as avg_unexp_amt_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_unexp_amt_ttl = 0 then avg_unexp_amt_ttl + 0.1 end as avg_unexp_amt_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_unexp_amt_ttl1 < (anteult_particion.avg_unexp_amt_ttl1 - (anteult_particion.avg_unexp_amt_ttl1 * 10/ 100)) \nor ult_particion.avg_unexp_amt_ttl1 > (anteult_particion.avg_unexp_amt_ttl1 + (anteult_particion.avg_unexp_amt_ttl1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_unexp_amt_ttl", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld"], "alias": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da"}, "created_at": 1681142229.7945752, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_e3b889844e37625ac7bb809319c7a0da.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_max_trfc_dwld) as avg_max_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_max_trfc_dwld_abs as avg_max_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_max_trfc_dwld = 0 then avg_max_trfc_dwld + 0.1 end as avg_max_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_max_trfc_dwld1 < (anteult_particion.avg_max_trfc_dwld1 - (anteult_particion.avg_max_trfc_dwld1 * 10/ 100)) \nor ult_particion.avg_max_trfc_dwld1 > (anteult_particion.avg_max_trfc_dwld1 + (anteult_particion.avg_max_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_max_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld"], "alias": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd"}, "created_at": 1681142229.797469, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_35bfe62b1cf578094dc2447e4839c4fd.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_avg_trfc_dwld) as avg_avg_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_avg_trfc_dwld_abs as avg_avg_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_avg_trfc_dwld = 0 then avg_avg_trfc_dwld + 0.1 end as avg_avg_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_avg_trfc_dwld1 < (anteult_particion.avg_avg_trfc_dwld1 - (anteult_particion.avg_avg_trfc_dwld1 * 10/ 100)) \nor ult_particion.avg_avg_trfc_dwld1 > (anteult_particion.avg_avg_trfc_dwld1 + (anteult_particion.avg_avg_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_avg_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld"], "alias": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc"}, "created_at": 1681142229.800218, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_d6364f235dffa7955ad09081917a8abc.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_sum_trfc_dwld) as avg_sum_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_sum_trfc_dwld_abs as avg_sum_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_sum_trfc_dwld = 0 then avg_sum_trfc_dwld + 0.1 end as avg_sum_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_sum_trfc_dwld1 < (anteult_particion.avg_sum_trfc_dwld1 - (anteult_particion.avg_sum_trfc_dwld1 * 10/ 100)) \nor ult_particion.avg_sum_trfc_dwld1 > (anteult_particion.avg_sum_trfc_dwld1 + (anteult_particion.avg_sum_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_sum_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835"}, "created_at": 1681142229.803126, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_5a4e1a7af244d134aa635229685f4835.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_max_trfc_upld) as avg_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_max_trfc_upld_abs as avg_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_max_trfc_upld = 0 then avg_max_trfc_upld + 0.1 end as avg_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_max_trfc_upld1 < (anteult_particion.avg_max_trfc_upld1 - (anteult_particion.avg_max_trfc_upld1 * 10/ 100)) \nor ult_particion.avg_max_trfc_upld1 > (anteult_particion.avg_max_trfc_upld1 + (anteult_particion.avg_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7"}, "created_at": 1681142229.80602, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_b984424e224c75bb0946e9dde7e08ef7.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_avg_max_trfc_upld) as avg_avg_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_avg_max_trfc_upld_abs as avg_avg_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_avg_max_trfc_upld = 0 then avg_avg_max_trfc_upld + 0.1 end as avg_avg_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_avg_max_trfc_upld1 < (anteult_particion.avg_avg_max_trfc_upld1 - (anteult_particion.avg_avg_max_trfc_upld1 * 10/ 100)) \nor ult_particion.avg_avg_max_trfc_upld1 > (anteult_particion.avg_avg_max_trfc_upld1 + (anteult_particion.avg_avg_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "avg_sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2"}, "created_at": 1681142229.808955, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_d2e3354a6fd3a9ba961b9797847a76c2.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(avg_sum_max_trfc_upld) as avg_sum_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,avg_sum_max_trfc_upld_abs as avg_sum_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when avg_sum_max_trfc_upld = 0 then avg_sum_max_trfc_upld + 0.1 end as avg_sum_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.avg_sum_max_trfc_upld1 < (anteult_particion.avg_sum_max_trfc_upld1 - (anteult_particion.avg_sum_max_trfc_upld1 * 10/ 100)) \nor ult_particion.avg_sum_max_trfc_upld1 > (anteult_particion.avg_sum_max_trfc_upld1 + (anteult_particion.avg_sum_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "avg_sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl"], "alias": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683"}, "created_at": 1681142229.8116732, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_f236dcbc21987cb154d113ebf97a0683.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_max_ttl) as max_max_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_max_ttl_abs as max_max_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_max_ttl = 0 then max_max_ttl + 0.1 end as max_max_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_max_ttl1 < (anteult_particion.max_max_ttl1 - (anteult_particion.max_max_ttl1 * 10/ 100)) \nor ult_particion.max_max_ttl1 > (anteult_particion.max_max_ttl1 + (anteult_particion.max_max_ttl1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_max_ttl", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due"], "alias": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3"}, "created_at": 1681142229.8145611, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_5e783e7912e03d404467f9c233c6b6c3.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_max_amt_due) as max_max_amt_due_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_max_amt_due_abs as max_max_amt_due,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_max_amt_due = 0 then max_max_amt_due + 0.1 end as max_max_amt_due1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_max_amt_due1 < (anteult_particion.max_max_amt_due1 - (anteult_particion.max_max_amt_due1 * 10/ 100)) \nor ult_particion.max_max_amt_due1 > (anteult_particion.max_max_amt_due1 + (anteult_particion.max_max_amt_due1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_max_amt_due", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt"], "alias": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880"}, "created_at": 1681142229.8178828, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_c8dff43cef1faf3a3a1d72c1fe837880.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_max_unexp_amt) as max_max_unexp_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_max_unexp_amt_abs as max_max_unexp_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_max_unexp_amt = 0 then max_max_unexp_amt + 0.1 end as max_max_unexp_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_max_unexp_amt1 < (anteult_particion.max_max_unexp_amt1 - (anteult_particion.max_max_unexp_amt1 * 10/ 100)) \nor ult_particion.max_max_unexp_amt1 > (anteult_particion.max_max_unexp_amt1 + (anteult_particion.max_max_unexp_amt1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_max_unexp_amt", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20"}, "created_at": 1681142229.8206131, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_a71943789f72a7720b82f5ea73d35d20.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_trfc_dwld_snr_deg) as max_trfc_dwld_snr_deg_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_trfc_dwld_snr_deg_abs as max_trfc_dwld_snr_deg,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_trfc_dwld_snr_deg = 0 then max_trfc_dwld_snr_deg + 0.1 end as max_trfc_dwld_snr_deg1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_trfc_dwld_snr_deg1 < (anteult_particion.max_trfc_dwld_snr_deg1 - (anteult_particion.max_trfc_dwld_snr_deg1 * 10/ 100)) \nor ult_particion.max_trfc_dwld_snr_deg1 > (anteult_particion.max_trfc_dwld_snr_deg1 + (anteult_particion.max_trfc_dwld_snr_deg1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a"}, "created_at": 1681142229.823483, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_28eacc515c92058d34388d60da4fbf6a.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_trfc_dwld_cm_us) as max_trfc_dwld_cm_us_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_trfc_dwld_cm_us_abs as max_trfc_dwld_cm_us,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_trfc_dwld_cm_us = 0 then max_trfc_dwld_cm_us + 0.1 end as max_trfc_dwld_cm_us1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_trfc_dwld_cm_us1 < (anteult_particion.max_trfc_dwld_cm_us1 - (anteult_particion.max_trfc_dwld_cm_us1 * 10/ 100)) \nor ult_particion.max_trfc_dwld_cm_us1 > (anteult_particion.max_trfc_dwld_cm_us1 + (anteult_particion.max_trfc_dwld_cm_us1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_trfc_dwld_cm_us", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel"], "alias": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db"}, "created_at": 1681142229.82638, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_0d968d6ed217a2bd98b99671debfb3db.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_unexp_amt_rel) as max_unexp_amt_rel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_unexp_amt_rel_abs as max_unexp_amt_rel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_unexp_amt_rel = 0 then max_unexp_amt_rel + 0.1 end as max_unexp_amt_rel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_unexp_amt_rel1 < (anteult_particion.max_unexp_amt_rel1 - (anteult_particion.max_unexp_amt_rel1 * 10/ 100)) \nor ult_particion.max_unexp_amt_rel1 > (anteult_particion.max_unexp_amt_rel1 + (anteult_particion.max_unexp_amt_rel1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_unexp_amt_rel", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl"], "alias": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61"}, "created_at": 1681142229.8291159, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_a14fab1936ec5bc942af8411b461ea61.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_unexp_amt_ttl) as max_unexp_amt_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_unexp_amt_ttl_abs as max_unexp_amt_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_unexp_amt_ttl = 0 then max_unexp_amt_ttl + 0.1 end as max_unexp_amt_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_unexp_amt_ttl1 < (anteult_particion.max_unexp_amt_ttl1 - (anteult_particion.max_unexp_amt_ttl1 * 10/ 100)) \nor ult_particion.max_unexp_amt_ttl1 > (anteult_particion.max_unexp_amt_ttl1 + (anteult_particion.max_unexp_amt_ttl1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_unexp_amt_ttl", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld"], "alias": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39"}, "created_at": 1681142229.8320131, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_b914aea565266cc034258eb42cd61e39.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_max_trfc_dwld) as max_max_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_max_trfc_dwld_abs as max_max_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_max_trfc_dwld = 0 then max_max_trfc_dwld + 0.1 end as max_max_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_max_trfc_dwld1 < (anteult_particion.max_max_trfc_dwld1 - (anteult_particion.max_max_trfc_dwld1 * 10/ 100)) \nor ult_particion.max_max_trfc_dwld1 > (anteult_particion.max_max_trfc_dwld1 + (anteult_particion.max_max_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_max_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld"], "alias": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea"}, "created_at": 1681142229.834917, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_1bb4236775774e446ce4f5dfd30265ea.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_avg_trfc_dwld) as max_avg_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_avg_trfc_dwld_abs as max_avg_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_avg_trfc_dwld = 0 then max_avg_trfc_dwld + 0.1 end as max_avg_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_avg_trfc_dwld1 < (anteult_particion.max_avg_trfc_dwld1 - (anteult_particion.max_avg_trfc_dwld1 * 10/ 100)) \nor ult_particion.max_avg_trfc_dwld1 > (anteult_particion.max_avg_trfc_dwld1 + (anteult_particion.max_avg_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_avg_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld"], "alias": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6"}, "created_at": 1681142229.837638, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_02dd4db746901a75334f4aab388055d6.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_sum_trfc_dwld) as max_sum_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_sum_trfc_dwld_abs as max_sum_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_sum_trfc_dwld = 0 then max_sum_trfc_dwld + 0.1 end as max_sum_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_sum_trfc_dwld1 < (anteult_particion.max_sum_trfc_dwld1 - (anteult_particion.max_sum_trfc_dwld1 * 10/ 100)) \nor ult_particion.max_sum_trfc_dwld1 > (anteult_particion.max_sum_trfc_dwld1 + (anteult_particion.max_sum_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_sum_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld"], "alias": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b"}, "created_at": 1681142229.840532, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_77321693c516456d47a9d67879a3f98b.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_max_trfc_upld) as max_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_max_trfc_upld_abs as max_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_max_trfc_upld = 0 then max_max_trfc_upld + 0.1 end as max_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_max_trfc_upld1 < (anteult_particion.max_max_trfc_upld1 - (anteult_particion.max_max_trfc_upld1 * 10/ 100)) \nor ult_particion.max_max_trfc_upld1 > (anteult_particion.max_max_trfc_upld1 + (anteult_particion.max_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381"}, "created_at": 1681142229.843412, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_fad030c0af17d9d1ead6983636141381.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_avg_max_trfc_upld) as max_avg_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_avg_max_trfc_upld_abs as max_avg_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_avg_max_trfc_upld = 0 then max_avg_max_trfc_upld + 0.1 end as max_avg_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_avg_max_trfc_upld1 < (anteult_particion.max_avg_max_trfc_upld1 - (anteult_particion.max_avg_max_trfc_upld1 * 10/ 100)) \nor ult_particion.max_avg_max_trfc_upld1 > (anteult_particion.max_avg_max_trfc_upld1 + (anteult_particion.max_avg_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "max_sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d"}, "created_at": 1681142229.846148, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_1243e53c53d48fe29b67f91de265c73d.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(max_sum_max_trfc_upld) as max_sum_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,max_sum_max_trfc_upld_abs as max_sum_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when max_sum_max_trfc_upld = 0 then max_sum_max_trfc_upld + 0.1 end as max_sum_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.max_sum_max_trfc_upld1 < (anteult_particion.max_sum_max_trfc_upld1 - (anteult_particion.max_sum_max_trfc_upld1 * 10/ 100)) \nor ult_particion.max_sum_max_trfc_upld1 > (anteult_particion.max_sum_max_trfc_upld1 + (anteult_particion.max_sum_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "max_sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl"], "alias": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e"}, "created_at": 1681142229.84906, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_5987aea7afeb118492db397aa5cde28e.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_max_ttl) as sum_max_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_max_ttl_abs as sum_max_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_max_ttl = 0 then sum_max_ttl + 0.1 end as sum_max_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_max_ttl1 < (anteult_particion.sum_max_ttl1 - (anteult_particion.sum_max_ttl1 * 10/ 100)) \nor ult_particion.sum_max_ttl1 > (anteult_particion.sum_max_ttl1 + (anteult_particion.sum_max_ttl1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_max_ttl", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_amt_due", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_40138753380bee5842a37714575c0191.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due"], "alias": "column_median_estadisticos_men_40138753380bee5842a37714575c0191", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_40138753380bee5842a37714575c0191", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_40138753380bee5842a37714575c0191"}, "created_at": 1681142229.8519602, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_40138753380bee5842a37714575c0191\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_40138753380bee5842a37714575c0191.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_max_amt_due) as sum_max_amt_due_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_max_amt_due_abs as sum_max_amt_due,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_max_amt_due = 0 then sum_max_amt_due + 0.1 end as sum_max_amt_due1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_max_amt_due1 < (anteult_particion.sum_max_amt_due1 - (anteult_particion.sum_max_amt_due1 * 10/ 100)) \nor ult_particion.sum_max_amt_due1 > (anteult_particion.sum_max_amt_due1 + (anteult_particion.sum_max_amt_due1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_max_amt_due", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_unexp_amt", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt"], "alias": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca"}, "created_at": 1681142229.854678, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_03c414c1d4cb0248492442cb5b7f04ca.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_max_unexp_amt) as sum_max_unexp_amt_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_max_unexp_amt_abs as sum_max_unexp_amt,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_max_unexp_amt = 0 then sum_max_unexp_amt + 0.1 end as sum_max_unexp_amt1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_max_unexp_amt1 < (anteult_particion.sum_max_unexp_amt1 - (anteult_particion.sum_max_unexp_amt1 * 10/ 100)) \nor ult_particion.sum_max_unexp_amt1 > (anteult_particion.sum_max_unexp_amt1 + (anteult_particion.sum_max_unexp_amt1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_max_unexp_amt", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_trfc_dwld_snr_deg", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg"], "alias": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3"}, "created_at": 1681142229.857549, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_6014eabb8844d760c2e91f50e67e6ff3.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_trfc_dwld_snr_deg) as sum_trfc_dwld_snr_deg_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_trfc_dwld_snr_deg_abs as sum_trfc_dwld_snr_deg,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_trfc_dwld_snr_deg = 0 then sum_trfc_dwld_snr_deg + 0.1 end as sum_trfc_dwld_snr_deg1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_trfc_dwld_snr_deg1 < (anteult_particion.sum_trfc_dwld_snr_deg1 - (anteult_particion.sum_trfc_dwld_snr_deg1 * 10/ 100)) \nor ult_particion.sum_trfc_dwld_snr_deg1 > (anteult_particion.sum_trfc_dwld_snr_deg1 + (anteult_particion.sum_trfc_dwld_snr_deg1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_trfc_dwld_snr_deg", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_trfc_dwld_cm_us", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us"], "alias": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0"}, "created_at": 1681142229.860477, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_cae255ca0ca0c3e71752fc76a69fe1a0.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_trfc_dwld_cm_us) as sum_trfc_dwld_cm_us_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_trfc_dwld_cm_us_abs as sum_trfc_dwld_cm_us,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_trfc_dwld_cm_us = 0 then sum_trfc_dwld_cm_us + 0.1 end as sum_trfc_dwld_cm_us1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_trfc_dwld_cm_us1 < (anteult_particion.sum_trfc_dwld_cm_us1 - (anteult_particion.sum_trfc_dwld_cm_us1 * 10/ 100)) \nor ult_particion.sum_trfc_dwld_cm_us1 > (anteult_particion.sum_trfc_dwld_cm_us1 + (anteult_particion.sum_trfc_dwld_cm_us1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_trfc_dwld_cm_us", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_unexp_amt_rel", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel"], "alias": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2"}, "created_at": 1681142229.863219, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_b3048e9ef2f01be6c57783d7054f68b2.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_unexp_amt_rel) as sum_unexp_amt_rel_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_unexp_amt_rel_abs as sum_unexp_amt_rel,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_unexp_amt_rel = 0 then sum_unexp_amt_rel + 0.1 end as sum_unexp_amt_rel1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_unexp_amt_rel1 < (anteult_particion.sum_unexp_amt_rel1 - (anteult_particion.sum_unexp_amt_rel1 * 10/ 100)) \nor ult_particion.sum_unexp_amt_rel1 > (anteult_particion.sum_unexp_amt_rel1 + (anteult_particion.sum_unexp_amt_rel1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_unexp_amt_rel", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_unexp_amt_ttl", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl"], "alias": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f"}, "created_at": 1681142229.866105, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_27405b7d1f85c4a0b36d83323e731f8f.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_unexp_amt_ttl) as sum_unexp_amt_ttl_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_unexp_amt_ttl_abs as sum_unexp_amt_ttl,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_unexp_amt_ttl = 0 then sum_unexp_amt_ttl + 0.1 end as sum_unexp_amt_ttl1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_unexp_amt_ttl1 < (anteult_particion.sum_unexp_amt_ttl1 - (anteult_particion.sum_unexp_amt_ttl1 * 10/ 100)) \nor ult_particion.sum_unexp_amt_ttl1 > (anteult_particion.sum_unexp_amt_ttl1 + (anteult_particion.sum_unexp_amt_ttl1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_unexp_amt_ttl", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld"], "alias": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0"}, "created_at": 1681142229.86942, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_a8198b4a5c5eff2353ee2ef73ad610a0.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_max_trfc_dwld) as sum_max_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_max_trfc_dwld_abs as sum_max_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_max_trfc_dwld = 0 then sum_max_trfc_dwld + 0.1 end as sum_max_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_max_trfc_dwld1 < (anteult_particion.sum_max_trfc_dwld1 - (anteult_particion.sum_max_trfc_dwld1 * 10/ 100)) \nor ult_particion.sum_max_trfc_dwld1 > (anteult_particion.sum_max_trfc_dwld1 + (anteult_particion.sum_max_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_max_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_avg_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld"], "alias": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd"}, "created_at": 1681142229.872159, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_18c897e95de8d5dad4913f148d7e64cd.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_avg_trfc_dwld) as sum_avg_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_avg_trfc_dwld_abs as sum_avg_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_avg_trfc_dwld = 0 then sum_avg_trfc_dwld + 0.1 end as sum_avg_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_avg_trfc_dwld1 < (anteult_particion.sum_avg_trfc_dwld1 - (anteult_particion.sum_avg_trfc_dwld1 * 10/ 100)) \nor ult_particion.sum_avg_trfc_dwld1 > (anteult_particion.sum_avg_trfc_dwld1 + (anteult_particion.sum_avg_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_avg_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_sum_trfc_dwld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld"], "alias": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_5784d898e630be564c402598a2d6d528"}, "created_at": 1681142229.8750222, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_5784d898e630be564c402598a2d6d528\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_5784d898e630be564c402598a2d6d528.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_sum_trfc_dwld) as sum_sum_trfc_dwld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_sum_trfc_dwld_abs as sum_sum_trfc_dwld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_sum_trfc_dwld = 0 then sum_sum_trfc_dwld + 0.1 end as sum_sum_trfc_dwld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_sum_trfc_dwld1 < (anteult_particion.sum_sum_trfc_dwld1 - (anteult_particion.sum_sum_trfc_dwld1 * 10/ 100)) \nor ult_particion.sum_sum_trfc_dwld1 > (anteult_particion.sum_sum_trfc_dwld1 + (anteult_particion.sum_sum_trfc_dwld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_sum_trfc_dwld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba"}, "created_at": 1681142229.877877, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_f03e44b0584ce112cb344ae0ff7b5cba.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_max_trfc_upld) as sum_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_max_trfc_upld_abs as sum_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_max_trfc_upld = 0 then sum_max_trfc_upld + 0.1 end as sum_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_max_trfc_upld1 < (anteult_particion.sum_max_trfc_upld1 - (anteult_particion.sum_max_trfc_upld1 * 10/ 100)) \nor ult_particion.sum_max_trfc_upld1 > (anteult_particion.sum_max_trfc_upld1 + (anteult_particion.sum_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_avg_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld"], "alias": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_324e5371bc71db6536bae33754280113"}, "created_at": 1681142229.880606, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_324e5371bc71db6536bae33754280113\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_324e5371bc71db6536bae33754280113.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_avg_max_trfc_upld) as sum_avg_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_avg_max_trfc_upld_abs as sum_avg_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_avg_max_trfc_upld = 0 then sum_avg_max_trfc_upld + 0.1 end as sum_avg_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_avg_max_trfc_upld1 < (anteult_particion.sum_avg_max_trfc_upld1 - (anteult_particion.sum_avg_max_trfc_upld1 * 10/ 100)) \nor ult_particion.sum_avg_max_trfc_upld1 > (anteult_particion.sum_avg_max_trfc_upld1 + (anteult_particion.sum_avg_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_avg_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a": {"test_metadata": {"name": "column_median_estadisticos_mensual", "kwargs": {"column_name": "sum_sum_max_trfc_upld", "model": "{{ get_where_subquery(ref('estadisticos_mensual')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a", "fqn": ["VoluntaryChurnABT", "analytics", "column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld"], "alias": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4"}, "created_at": 1681142229.883512, "relation_name": null, "raw_code": "{{ test_column_median_estadisticos_mensual(**_dbt_generic_test_kwargs) }}{{ config(alias=\"column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4\") }}", "language": "sql", "refs": [["estadisticos_mensual"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.estadisticos_mensual"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/column_median_estadisticos_men_06ee52e372f13c8f9a977180e7ae01f4.sql", "compiled": true, "compiled_code": "\n\n\n\nWITH casteo as (select *, abs(sum_sum_max_trfc_upld) as sum_sum_max_trfc_upld_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,sum_sum_max_trfc_upld_abs as sum_sum_max_trfc_upld,year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when sum_sum_max_trfc_upld = 0 then sum_sum_max_trfc_upld + 0.1 end as sum_sum_max_trfc_upld1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.sum_sum_max_trfc_upld1 < (anteult_particion.sum_sum_max_trfc_upld1 - (anteult_particion.sum_sum_max_trfc_upld1 * 10/ 100)) \nor ult_particion.sum_sum_max_trfc_upld1 > (anteult_particion.sum_sum_max_trfc_upld1 + (anteult_particion.sum_sum_max_trfc_upld1 * 10 / 100))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "sum_sum_max_trfc_upld", "file_key_name": "models.estadisticos_mensual"}, "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "hh_cd", "model": "{{ get_where_subquery(ref('target_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_target_semanal_hh_cd", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_target_semanal_hh_cd.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_target_semanal_hh_cd"], "alias": "not_null_target_semanal_hh_cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.886376, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["target_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.target_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/not_null_target_semanal_hh_cd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hh_cd\nfrom dev_voluntary_churn_analytics.target_semanal\nwhere hh_cd is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "hh_cd", "file_key_name": "models.target_semanal"}, "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "fecha_inicio_semana", "model": "{{ get_where_subquery(ref('target_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_target_semanal_fecha_inicio_semana", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_target_semanal_fecha_inicio_semana.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_target_semanal_fecha_inicio_semana"], "alias": "not_null_target_semanal_fecha_inicio_semana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.887533, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["target_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.target_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/not_null_target_semanal_fecha_inicio_semana.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect fecha_inicio_semana\nfrom dev_voluntary_churn_analytics.target_semanal\nwhere fecha_inicio_semana is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "fecha_inicio_semana", "file_key_name": "models.target_semanal"}, "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "target", "model": "{{ get_where_subquery(ref('target_semanal')) }}"}, "namespace": null}, "database": "AwsDataCatalog", "schema": "dev_voluntary_churn_dbt_test__audit", "name": "not_null_target_semanal_target", "resource_type": "test", "package_name": "VoluntaryChurnABT", "path": "not_null_target_semanal_target.sql", "original_file_path": "models/analytics/analytics.yml", "unique_id": "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9", "fqn": ["VoluntaryChurnABT", "analytics", "not_null_target_semanal_target"], "alias": "not_null_target_semanal_target", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1681142229.888701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["target_semanal"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.VoluntaryChurnABT.target_semanal"]}, "compiled_path": "target/compiled/VoluntaryChurnABT/models/analytics/analytics.yml/not_null_target_semanal_target.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect target\nfrom dev_voluntary_churn_analytics.target_semanal\nwhere target is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "target", "file_key_name": "models.target_semanal"}}, "sources": {}, "macros": {"macro.VoluntaryChurnABT.log_dbt_results": {"name": "log_dbt_results", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/log_dbt_results.sql", "original_file_path": "macros/log_dbt_results.sql", "unique_id": "macro.VoluntaryChurnABT.log_dbt_results", "macro_sql": "{% macro log_dbt_results(results) %}\n    -- depends_on: {{ ref('dbt_results') }}\n    {%- if execute -%}\n        {%- set parsed_results = parse_dbt_results(results) -%}\n        {%- if parsed_results | length  > 0 -%}\n            {% set insert_dbt_results_query -%}\n                insert into {{ ref('dbt_results') }}\n                    (\n                        result_id,\n                        invocation_id,\n                        unique_id,\n                        database_name,\n                        schema_name,\n                        name,\n                        resource_type,\n                        status,\n                        execution_time,\n                        rows_affected,\n                        time_stamp\n                ) values\n                    {%- for parsed_result_dict in parsed_results -%}\n                        (\n                            '{{ parsed_result_dict.get('result_id') }}',\n                            '{{ parsed_result_dict.get('invocation_id') }}',\n                            '{{ parsed_result_dict.get('unique_id') }}',\n                            '{{ parsed_result_dict.get('database_name') }}',\n                            '{{ parsed_result_dict.get('schema_name') }}',\n                            '{{ parsed_result_dict.get('name') }}',\n                            '{{ parsed_result_dict.get('resource_type') }}',\n                            '{{ parsed_result_dict.get('status') }}',\n                            {{ parsed_result_dict.get('execution_time') }},\n                            {{ parsed_result_dict.get('rows_affected') }},\n                            cast(current_timestamp as timestamp)\n                        ) {{- \",\" if not loop.last else \"\" -}}\n                    {%- endfor -%}\n            {%- endset -%}\n            {%- do run_query(insert_dbt_results_query) -%}\n        {%- endif -%}\n    {%- endif -%}\n    -- This macro is called from an on-run-end hook and therefore must return a query txt to run. Returning an empty string will do the trick\n    {{ return ('') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.VoluntaryChurnABT.parse_dbt_results", "macro.dbt.run_query"]}, "description": "Logea los resultados de las queries de dbt en una tabla de athena", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "results", "type": null, "description": "Resultados a logear"}], "created_at": 1681142229.327414, "supported_languages": null}, "macro.VoluntaryChurnABT.line_bsn_classification": {"name": "line_bsn_classification", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/line_bsn_classification.sql", "original_file_path": "macros/line_bsn_classification.sql", "unique_id": "macro.VoluntaryChurnABT.line_bsn_classification", "macro_sql": "{% macro line_bsn_classification(column_name) %}\n    CASE \n    WHEN regexp_like({{ column_name }}, 'Televisi\u00f3n|Cable TV') then 'TV'\n    WHEN regexp_like({{ column_name }}, 'Internet|Ethernet') then  'INT'\n    WHEN regexp_like({{ column_name }}, 'Cablephone|Telecarrier plans - telephony|Telecarrier plans - simple products') then  'TEL'\n    else 'TBD'\n    END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "clasifica los servicios en TV, INT y Tel.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "column_name", "type": null, "description": "Columna a la que se le aplicar\u00e1 el macro."}], "created_at": 1681142229.3268611, "supported_languages": null}, "macro.VoluntaryChurnABT.date_to_week": {"name": "date_to_week", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/date_to_week.sql", "original_file_path": "macros/date_to_week.sql", "unique_id": "macro.VoluntaryChurnABT.date_to_week", "macro_sql": "{% macro date_to_week(date_to_classify, columns_names, db_name, table_name) %}\n\n    {% set sql_statement %}\n        SELECT\n            CAST(date_column AS DATE) inicio_semana,\n            date_add('day', 6, CAST(date_column AS DATE)) fin_semana,\n            row_number() over(order by date_column) AS semana\n        FROM (\n          VALUES (SEQUENCE(FROM_ISO8601_DATE('2023-01-02'),   \n                           FROM_ISO8601_DATE('{{ var(\"today\") }}'), INTERVAL '7' DAY) ) ) AS t1(date_array)\n        CROSS JOIN UNNEST(date_array) AS t2(date_column) ;\n    {% endset %}\n\n    {%- set fechas = dbt_utils.get_query_results_as_dict(sql_statement) -%}\n\n    with week_classification as (\n\n        select \n        {% for column in columns_names %}\n            {{ column }}, \n        {% endfor %}\n        CASE \n        {% for fecha in fechas['inicio_semana'] %}\n            when \n                date_diff('day', DATE('{{fecha}}'), DATE({{date_to_classify}})) >= 0 \n                and   \n                date_diff('day', DATE('{{fechas['fin_semana'][loop.index - 1]}}'), DATE({{date_to_classify}})) <= 0 \n                then concat('{{loop.index}}',' - ', '{{fecha}}',' - ', '{{fechas['fin_semana'][loop.index - 1]}}')\n        {% endfor %}\n    END semana\n    from {{db_name}}.{{table_name}}\n    where date({{date_to_classify}}) >= date('2023-01-02')\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "Permite pasar una fecha a un n\u00famero de semana.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "date_to_classify", "type": null, "description": "Fecha a clasificar"}, {"name": "columns_names", "type": null, "description": "Lista de columnas donde se aplicara el macro"}, {"name": "db_name", "type": null, "description": "Nombre de la base de datos donde se encuentra la fecha"}, {"name": "table_name", "type": null, "description": "Nombre de la tabla donde se encuentra la fecha"}], "created_at": 1681142229.321899, "supported_languages": null}, "macro.VoluntaryChurnABT.run_mode": {"name": "run_mode", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/run_mode.sql", "original_file_path": "macros/run_mode.sql", "unique_id": "macro.VoluntaryChurnABT.run_mode", "macro_sql": "{% macro run_mode(date_column, modo) %}\n\n    {%- if modo[0] == 'default' -%}\n        {{date_column}} BETWEEN date_add('day',-7,(date_trunc('week', CURRENT_DATE))) AND date_add('day',-1,date_trunc('week', CURRENT_DATE))\n\n    {%- elif modo[0] == \"rango\" -%}\n        DATE({{date_column}}) < date_trunc('week', CURRENT_DATE)\n        AND DATE({{date_column}}) BETWEEN date_trunc('week',DATE('{{modo[1]}}')) AND date_add('day',6,date_trunc('week',DATE('{{modo[2]}}')))\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Eligen entre dos modos de procesamiento. 'default' procesa o reprocesa \u00faltima partici\u00f3n y 'rango' procesa o reprocesa un rango de fechas.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "date_column", "type": null, "description": "Columna a la que se le aplicar\u00e1 el macro."}, {"name": "modo", "type": null, "description": "Recibe 'default' o 'rango'"}], "created_at": 1681142229.3292952, "supported_languages": null}, "macro.VoluntaryChurnABT.parse_dbt_results": {"name": "parse_dbt_results", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/parse_dbt_results.sql", "original_file_path": "macros/parse_dbt_results.sql", "unique_id": "macro.VoluntaryChurnABT.parse_dbt_results", "macro_sql": "{% macro parse_dbt_results(results) %}\n    -- Create a list of parsed results\n    {%- set parsed_results = [] %}\n    -- Flatten results and add to list\n    {% for run_result in results %}\n        -- Convert the run result object to a simple dictionary\n        {% set run_result_dict = run_result.to_dict() %}\n        -- Get the underlying dbt graph node that was executed\n        {% set node = run_result_dict.get('node') %}\n        {% set rows_affected = run_result_dict.get('adapter_response', {}).get('rows_affected', 0) %}\n        {%- if not rows_affected -%}\n            {% set rows_affected = 0 %}\n        {%- endif -%}\n        {% set parsed_result_dict = {\n                'result_id': invocation_id ~ '.' ~ node.get('unique_id'),\n                'invocation_id': invocation_id,\n                'unique_id': node.get('unique_id'),\n                'database_name': node.get('database'),\n                'schema_name': node.get('schema'),\n                'name': node.get('name'),\n                'resource_type': node.get('resource_type'),\n                'status': run_result_dict.get('status'),\n                'execution_time': run_result_dict.get('execution_time'),\n                'rows_affected': rows_affected\n                }%}\n        {% do parsed_results.append(parsed_result_dict) %}\n    {% endfor %}\n    {{ return(parsed_results) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Parsea resultados de las queries de dbt para luego logearlos.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "results", "type": null, "description": "Resultados a parsear"}], "created_at": 1681142229.327968, "supported_languages": null}, "macro.VoluntaryChurnABT.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/get_tables_by_pattern_sql.sql", "original_file_path": "macros/get_tables_by_pattern_sql.sql", "unique_id": "macro.VoluntaryChurnABT.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema like '{{ schema_pattern|lower }}'\n            and table_name like '{{ table_pattern|lower }}'\n            and table_name not like '{{ exclude|lower }}'\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "Permite obtener ciertas tablas seg\u00fan un patr\u00f3n dado.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "schema_pattern", "type": null, "description": "Colocar alg\u00fan patr\u00f3n de schema."}, {"name": "table_pattern", "type": null, "description": "Colocar alg\u00fan patr\u00f3n de tabla."}, {"name": "exclude=''", "type": null, "description": "Colocar alg\u00fan patr\u00f3n de tabla a excluir"}, {"name": "database", "type": null, "description": "Database donde buscar"}], "created_at": 1681142229.326271, "supported_languages": null}, "macro.VoluntaryChurnABT.get_avg_value": {"name": "get_avg_value", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/get_avg_max_value.sql", "original_file_path": "macros/get_avg_max_value.sql", "unique_id": "macro.VoluntaryChurnABT.get_avg_value", "macro_sql": "{% macro get_avg_value(columns_names) %}\n\n    {% for column in columns_names %}\n    avg(case when {{ column }} = -1 then 0 else {{ column }} end) as avg_{{ column.split('.')[1] if '.' in column else column }}, \n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene el promedio de los valores de una columna", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "column_names", "type": null, "description": "Lista de columnas donde se aplicara el macro"}], "created_at": 1681142229.322519, "supported_languages": null}, "macro.VoluntaryChurnABT.get_max_value": {"name": "get_max_value", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/get_avg_max_value.sql", "original_file_path": "macros/get_avg_max_value.sql", "unique_id": "macro.VoluntaryChurnABT.get_max_value", "macro_sql": "{% macro get_max_value(columns_names) %}\n\n    {% for column in columns_names %}\n    max(case when {{ column }} = -1 then 0 else {{ column }} end) as max_{{ column.split('.')[1] if '.' in column else column }}, \n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene el m\u00e1ximo de los valores de una columna", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "column_names", "type": "string", "description": "Lista de columnas donde se aplicara el macro"}], "created_at": 1681142229.323301, "supported_languages": null}, "macro.VoluntaryChurnABT.get_sum_value": {"name": "get_sum_value", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/get_avg_max_value.sql", "original_file_path": "macros/get_avg_max_value.sql", "unique_id": "macro.VoluntaryChurnABT.get_sum_value", "macro_sql": "{% macro get_sum_value(columns_names) %}\n\n    {% for column in columns_names %}\n    sum(case when {{ column }} = -1 then 0 else {{ column }} end) as sum_{{ column.split('.')[1] if '.' in column else column }}, \n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene la suma de los valores de una columna", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "column_names", "type": "string", "description": "Lista de columnas donde se aplicara el macro"}], "created_at": 1681142229.324071, "supported_languages": null}, "macro.VoluntaryChurnABT.partition": {"name": "partition", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/partition.sql", "original_file_path": "macros/partition.sql", "unique_id": "macro.VoluntaryChurnABT.partition", "macro_sql": "{% macro partition(date_column) %}\nYEAR(date_add('week', 1, {{ date_column }})) as year,\nMONTH(date_add('week', 1, {{ date_column }})) as month,\nDAY(date_add('week', 1, {{ date_column }})) as day \n{% endmacro %}", "depends_on": {"macros": []}, "description": "obtiene los datos de mes, semana y d\u00eda de una fecha.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "date_column", "type": null, "description": "Columna a la que se le aplicar\u00e1 el macro."}], "created_at": 1681142229.328516, "supported_languages": null}, "macro.VoluntaryChurnABT.get_last_partition": {"name": "get_last_partition", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/get_last_partition.sql", "original_file_path": "macros/get_last_partition.sql", "unique_id": "macro.VoluntaryChurnABT.get_last_partition", "macro_sql": "{% macro get_last_partition(db_name, table_name) %}\n    {% set sql_statement %}\n    SELECT particion FROM {{ ref('tablas_particiones')}}\n    WHERE tabla = lower('{{ table_name }}')\n    {% endset %}\n    (SELECT \n    *\n    FROM {{ db_name }}.{{ table_name }}\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = ({{ sql_statement }})\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Obtiene la \u00faltima partici\u00f3n de una tabla.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "VoluntaryChurnABT://macros/macros.yml", "arguments": [{"name": "db_name", "type": null, "description": "Base de datos donde se encuentra la tabla."}, {"name": "table_name", "type": null, "description": "Tabla de la que se desea la \u00faltima partici\u00f3n."}], "created_at": 1681142229.324876, "supported_languages": null}, "macro.VoluntaryChurnABT.get_last_partition_viejo": {"name": "get_last_partition_viejo", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "macros/get_last_partition.sql", "original_file_path": "macros/get_last_partition.sql", "unique_id": "macro.VoluntaryChurnABT.get_last_partition_viejo", "macro_sql": "{% macro get_last_partition_viejo(db_name, table_name) %}\n    {% set sql_statement %}\n    SELECT CAST(particion AS DATE) FROM {{ ref('ultimas_particiones')}}\n    WHERE tabla = '{{ table_name }}'\n    {% endset %}\n    (SELECT \n    *\n    FROM {{ db_name }}.{{ table_name }}\n    WHERE DATE(CONCAT(year, '-', month, '-', day)) = ({{ sql_statement }})\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9719942, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones01": {"name": "test_cant_particiones_stg_smy_pa__cancelaciones01", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/cant_particiones_stg_smy_pa__cancelaciones01.sql", "original_file_path": "tests/generic/cant_particiones_stg_smy_pa__cancelaciones01.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones01", "macro_sql": "{% test cant_particiones_stg_smy_pa__cancelaciones01(model, column_name) %}\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9723961, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_performances": {"name": "test_test_cant_null_performances", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/test_cant_null_perfonmances.sql", "original_file_path": "tests/generic/test_cant_null_perfonmances.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_performances", "macro_sql": "{% test test_cant_null_performances(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\n{{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.973238, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones02": {"name": "test_cant_particiones_stg_smy_pa__cancelaciones02", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/cant_particiones_stg_smy_pa__cancelaciones02.sql", "original_file_path": "tests/generic/cant_particiones_stg_smy_pa__cancelaciones02.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__cancelaciones02", "macro_sql": "{% test cant_particiones_stg_smy_pa__cancelaciones02(model, column_name) %}\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.97363, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_performances": {"name": "test_fecha_dentro_particion_performances", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/fecha_dentro_particion_performances.sql", "original_file_path": "tests/generic/fecha_dentro_particion_performances.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_performances", "macro_sql": "{% test fecha_dentro_particion_performances(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *,cast(date_parse(cast(cast({{column_name}} as int) as varchar),'%Y%m%d') as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nagrego_num as (select nodes,\n{{column_name}}_date as {{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.nodes,\nultima_particion.{{column_name}}\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.nodes = anteult_particion.nodes\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.974842, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_particion": {"name": "test_fecha_particion", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/test_fecha_particion.sql", "original_file_path": "tests/generic/test_fecha_particion.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_particion", "macro_sql": "{% test fecha_particion(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nSELECT *\nFROM {{ model }}\nwhere year = year(date_trunc('week',CURRENT_DATE))\n\tand month = month(date_trunc('week',CURRENT_DATE))\n\tand day = DAY(date_trunc('week',CURRENT_DATE))\n\tand {{ column_name }} != date_trunc('week',CURRENT_DATE)\n\tand tabla in (\n\t\t'cstmr_360_cncltrgt01_fix_dim',\n\t\t'cstmr_360_cncltrgt02_fix_dim',\n\t\t'cstmr_360_rtntrgt_fix_dim',\n\t\t'cstmr_360_data_fix_fct',\n\t\t'cstmr_360_perfhcf_fix_dim'\n    )\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.975341, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_retenciones": {"name": "test_test_cant_null_retenciones", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/test_cant_null_retenciones.sql", "original_file_path": "tests/generic/test_cant_null_retenciones.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_retenciones", "macro_sql": "{% test test_cant_null_retenciones(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\n{{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.976175, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__retenciones": {"name": "test_cant_particiones_stg_smy_pa__retenciones", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/cant_particiones_stg_smy_pa__retenciones.sql", "original_file_path": "tests/generic/cant_particiones_stg_smy_pa__retenciones.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__retenciones", "macro_sql": "{% test cant_particiones_stg_smy_pa__retenciones(model, column_name) %}\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9765482, "supported_languages": null}, "macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/expect_compound_columns_to_be_unique.sql", "original_file_path": "tests/generic/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.VoluntaryChurnABT.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n\n{{ config(severity = 'warn') }}\n\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.98002, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones01": {"name": "test_fecha_dentro_particion_cancelaciones01", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/fecha_dentro_particion_cancelaciones01.sql", "original_file_path": "tests/generic/fecha_dentro_particion_cancelaciones01.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones01", "macro_sql": "{% test fecha_dentro_particion_cancelaciones01(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *,cast({{column_name}} as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\n{{column_name}}_date as {{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.hh_cd,\nultima_particion.{{column_name}}\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.hh_cd = anteult_particion.hh_cd\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.981243, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02": {"name": "test_test_cant_null_cancelaciones02", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/test_cant_null_cancelaciones02.sql", "original_file_path": "tests/generic/test_cant_null_cancelaciones02.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones02", "macro_sql": "{% test test_cant_null_cancelaciones02(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\n{{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.982077, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones02": {"name": "test_fecha_dentro_particion_cancelaciones02", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/fecha_dentro_particion_cancelaciones02.sql", "original_file_path": "tests/generic/fecha_dentro_particion_cancelaciones02.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_cancelaciones02", "macro_sql": "{% test fecha_dentro_particion_cancelaciones02(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *,cast({{column_name}} as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt02_fix_dim\" ),\n\nagrego_num as (select hh_cd,\n{{column_name}}_date as {{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.hh_cd,\nultima_particion.{{column_name}}\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.hh_cd = anteult_particion.hh_cd\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.983278, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01": {"name": "test_test_cant_null_cancelaciones01", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/test_cant_null_cancelaciones01.sql", "original_file_path": "tests/generic/test_cant_null_cancelaciones01.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_cancelaciones01", "macro_sql": "{% test test_cant_null_cancelaciones01(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_cncltrgt01_fix_dim\" ),\n\nagrego_num as (select hh_cd,\n{{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where cant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) or cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9840991, "supported_languages": null}, "macro.VoluntaryChurnABT.test_test_cant_null_consumos": {"name": "test_test_cant_null_consumos", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/test_cant_null_consumos.sql", "original_file_path": "tests/generic/test_cant_null_consumos.sql", "unique_id": "macro.VoluntaryChurnABT.test_test_cant_null_consumos", "macro_sql": "{% test test_cant_null_consumos(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nagrego_num as (select id_ac,\n{{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select count(*) as cant_null_anteult, 1 as b from filtro \nwhere fecha_particion = anteult_particion and {{column_name}} is null ),\n\nult_particion as (select count(*) as cant_null_ult, 1 as b from filtro where fecha_particion = ult_particion and {{column_name}} is null),\n\njoins as(\nSELECT cant_null_anteult,cant_null_ult FROM anteult_particion\nLEFT JOIN ult_particion\nON ult_particion.b = anteult_particion.b\n)\n\nselect * from joins where \ncant_null_ult < (cant_null_anteult - (cant_null_anteult * 10 / 100)) \nor cant_null_ult > (cant_null_anteult + (cant_null_anteult * 10 / 100))\n\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.984921, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_retenciones": {"name": "test_fecha_dentro_particion_retenciones", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/fecha_dentro_particion_retenciones.sql", "original_file_path": "tests/generic/fecha_dentro_particion_retenciones.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_retenciones", "macro_sql": "{% test fecha_dentro_particion_retenciones(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *,cast({{column_name}} as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_rtntrgt_fix_dim\" ),\n\nagrego_num as (select hh_cd,\n{{column_name}}_date as {{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.hh_cd,\nultima_particion.{{column_name}}\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.hh_cd = anteult_particion.hh_cd\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9861178, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__performances": {"name": "test_cant_particiones_stg_smy_pa__performances", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/cant_particiones_stg_smy_pa__performances.sql", "original_file_path": "tests/generic/cant_particiones_stg_smy_pa__performances.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__performances", "macro_sql": "{% test cant_particiones_stg_smy_pa__performances(model, column_name) %}\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_perfhcf_fix_dim\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9865012, "supported_languages": null}, "macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal": {"name": "test_column_median_estadisticos_semanal", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/column_median_estadisticos_semanal.sql", "original_file_path": "tests/generic/column_median_estadisticos_semanal.sql", "unique_id": "macro.VoluntaryChurnABT.test_column_median_estadisticos_semanal", "macro_sql": "{% test column_median_estadisticos_semanal(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *,abs({{column_name}}) as {{column_name}}_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_semanal\"  ),\n\nagrego_num as (select hh_cd,{{column_name}}_abs as {{column_name}},year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when {{column_name}} = 0 then {{column_name}} + 0.1 end as {{column_name}}1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion),\n\njoins as(SELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.{{column_name}}1 < (anteult_particion.{{column_name}}1 - (anteult_particion.{{column_name}}1 * 10 / 100)) \nor ult_particion.{{column_name}}1 > (anteult_particion.{{column_name}}1 + (anteult_particion.{{column_name}}1 * 10 / 100)))\n\nselect * from joins\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9884741, "supported_languages": null}, "macro.VoluntaryChurnABT.test_fecha_dentro_particion_consumos": {"name": "test_fecha_dentro_particion_consumos", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/fecha_dentro_particion_consumos.sql", "original_file_path": "tests/generic/fecha_dentro_particion_consumos.sql", "unique_id": "macro.VoluntaryChurnABT.test_fecha_dentro_particion_consumos", "macro_sql": "{% test fecha_dentro_particion_consumos(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *,cast(date_parse(cast(cast({{column_name}} as int) as varchar),'%Y%m%d') as date) as {{column_name}}_date, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nagrego_num as (select id_ac,\n{{column_name}}_date as {{column_name}},\nyear_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nultima_particion as (select * from filtro where fecha_particion = ult_particion ),\n\njoins as(\nSELECT ultima_particion.fecha_particion,\nultima_particion.ult_particion,\nultima_particion.anteult_particion,\nultima_particion.id_ac,\nultima_particion.{{column_name}}\nFROM ultima_particion\nLEFT JOIN anteult_particion\nON ultima_particion.id_ac = anteult_particion.id_ac\n),\n\nconteo as (select count(*) as cant_dt_inf_particion from joins where {{column_name}} < ult_particion and {{column_name}} > anteult_particion)\n \nSELECT * FROM conteo where cant_dt_inf_particion = 0\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9896839, "supported_languages": null}, "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__consumos": {"name": "test_cant_particiones_stg_smy_pa__consumos", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/cant_particiones_stg_smy_pa__consumos.sql", "original_file_path": "tests/generic/cant_particiones_stg_smy_pa__consumos.sql", "unique_id": "macro.VoluntaryChurnABT.test_cant_particiones_stg_smy_pa__consumos", "macro_sql": "{% test cant_particiones_stg_smy_pa__consumos(model, column_name) %}\n\nWITH seleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_part, *\nFROM \"prod_raw_dwh_smy_pa\".\"cstmr_360_data_fix_fct\" ),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_part),\n\nult_particion as (select count(*) as cant_registros_ultpart , 1 as a \nFROM filtro\nwhere fecha_particion = ult_particion),\n\nanteult_particion as (select count(*) as cant_registros_anteultpart ,1 as b\nfrom seleccionar\nwhere fecha_particion = anteult_part),\n\ncomparacion as (SELECT cant_registros_ultpart,cant_registros_anteultpart\nFROM ult_particion\nleft JOIN anteult_particion\nON ult_particion.a = anteult_particion.b)\n\nselect * from comparacion \n--where fecha_particion != cast('2023-03-13' as date) and fecha_particion != cast('2023-03-06' as date)\nwhere cant_registros_ultpart > (cant_registros_anteultpart + (cant_registros_anteultpart * 20 / 100)) or cant_registros_ultpart < (cant_registros_anteultpart - (cant_registros_anteultpart * 20 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.9900641, "supported_languages": null}, "macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual": {"name": "test_column_median_estadisticos_mensual", "resource_type": "macro", "package_name": "VoluntaryChurnABT", "path": "tests/generic/column_median_estadisticos_mensual.sql", "original_file_path": "tests/generic/column_median_estadisticos_mensual.sql", "unique_id": "macro.VoluntaryChurnABT.test_column_median_estadisticos_mensual", "macro_sql": "{% test column_median_estadisticos_mensual(model, column_name) %}\n\n{{ config(severity = 'warn') }}\n\nWITH casteo as (select *, abs({{column_name}}) as {{column_name}}_abs, cast(year as varchar) as year_var, cast(month as varchar) as month_var, cast(day as varchar) as day_var\nFROM  \"dev_voluntary_churn_analytics\".\"estadisticos_mensual\"  ),\n\nagrego_num as (select hh_cd,{{column_name}}_abs as {{column_name}},year_var as year,\ncase when length(month_var) = 1 then concat('0',(month_var)) else (month_var) end as month,\ncase when length(day_var) = 1 then concat('0',(day_var)) else (day_var) end as day\nfrom casteo),\n\nseleccionar AS (SELECT \ndate_trunc('week', cast(date_parse(concat(year, month, day), '%Y%m%d') as date)) as fecha_particion,\ndate_trunc('week',current_date) as ult_particion, \ndate_add('day',-7,date_trunc('week',current_date)) as anteult_particion, *,\ncase when {{column_name}} = 0 then {{column_name}} + 0.1 end as {{column_name}}1\nFROM agrego_num),\n\nfiltro as (select * from seleccionar\nwhere fecha_particion = ult_particion or fecha_particion = anteult_particion),\n\nanteult_particion as (select * from filtro where fecha_particion = anteult_particion),\n\nult_particion as (select * from filtro where fecha_particion = ult_particion)\n\nSELECT *\nFROM ult_particion\nLEFT JOIN anteult_particion\nON ult_particion.hh_cd = anteult_particion.hh_cd\nWhere ult_particion.{{column_name}}1 < (anteult_particion.{{column_name}}1 - (anteult_particion.{{column_name}}1 * 10/ 100)) \nor ult_particion.{{column_name}}1 > (anteult_particion.{{column_name}}1 + (anteult_particion.{{column_name}}1 * 10 / 100))\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142227.99155, "supported_languages": null}, "macro.dbt_athena.athena__snapshot_hash_arguments": {"name": "athena__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.athena__snapshot_hash_arguments", "macro_sql": "{% macro athena__snapshot_hash_arguments(args) -%}\n    to_hex(md5(to_utf8({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.009852, "supported_languages": null}, "macro.dbt_athena.athena__snapshot_merge_sql": {"name": "athena__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.athena__snapshot_merge_sql", "macro_sql": "{% macro athena__snapshot_merge_sql(target, source) -%}\n    {%- set target_relation = adapter.get_relation(database=none, schema=target.schema, identifier=target.identifier) -%}\n    {%- if target_relation is not none -%}\n      {% do adapter.drop_relation(target_relation) %}\n    {%- endif -%}\n\n    {% set sql -%}\n      SELECT * FROM {{ source }};\n    {%- endset -%}\n\n    {{ create_table_as(False, target_relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0106518, "supported_languages": null}, "macro.dbt_athena.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, source_sql) %}\n    SELECT *\n      , {{ strategy.unique_key }} AS dbt_unique_key\n      , {{ strategy.updated_at }} AS dbt_valid_from\n      , {{ strategy.scd_id }} AS dbt_scd_id\n      , 'insert' AS dbt_change_type\n      , CAST('9999-01-01' as timestamp) AS dbt_valid_to\n      , True AS is_current_record\n      , {{ current_timestamp() }} AS dbt_snapshot_at\n    FROM ({{ source_sql }}) source;\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.011067, "supported_languages": null}, "macro.dbt_athena.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    WITH snapshot_query AS (\n        {{ source_sql }}\n    )\n    , snapshotted_data_base AS (\n        SELECT *\n          , ROW_NUMBER() OVER (\n              PARTITION BY dbt_unique_key\n              ORDER BY dbt_valid_from DESC\n            ) AS dbt_snapshot_rn\n        FROM {{ target_relation }}\n    )\n    , snapshotted_data AS (\n        SELECT *\n        FROM snapshotted_data_base\n        WHERE dbt_snapshot_rn = 1\n          AND dbt_change_type != 'delete'\n    )\n    , source_data AS (\n        SELECT *\n          , {{ strategy.unique_key }} AS dbt_unique_key\n          , {{ strategy.updated_at }} AS dbt_valid_from\n          , {{ strategy.scd_id }} AS dbt_scd_id\n        FROM snapshot_query\n    )\n    , upserts AS (\n        SELECT source_data.*\n          , CASE\n              WHEN snapshotted_data.dbt_unique_key IS NULL THEN 'insert'\n              ELSE 'update'\n            END as dbt_change_type\n          , CAST('9999-01-01' as timestamp) AS dbt_valid_to\n          , True AS is_current_record\n        FROM source_data\n        LEFT JOIN snapshotted_data\n               ON snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        WHERE snapshotted_data.dbt_unique_key IS NULL\n           OR (\n                snapshotted_data.dbt_unique_key IS NOT NULL\n            AND (\n                {{ strategy.row_changed }}\n            )\n        )\n    )\n    {%- if strategy.invalidate_hard_deletes -%}\n    {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n    , deletes AS (\n        SELECT\n        {% for column in target_columns if not column.name == 'dbt_snapshot_at' %}\n          {% if column.name == 'dbt_valid_from' %}\n            {{ current_timestamp() }} AS dbt_valid_from {%- if not loop.last -%},{%- endif -%}\n          {% elif column.name == 'dbt_change_type' %}\n            'delete' AS dbt_change_type {%- if not loop.last -%},{%- endif -%}\n          {% elif column.name == 'dbt_valid_to' %}\n            CAST('9999-01-01' as timestamp) AS dbt_valid_to {%- if not loop.last -%},{%- endif -%}\n          {% elif column.name == 'is_current_record' %}\n            True AS is_current_record {%- if not loop.last -%},{%- endif -%}\n          {% else %}\n            snapshotted_data.{{ column.name }} {%- if not loop.last -%},{%- endif -%}\n          {% endif %}\n        {% endfor %}\n        FROM snapshotted_data\n        LEFT JOIN source_data\n               ON snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        WHERE source_data.dbt_unique_key IS NULL\n    )\n    SELECT * FROM upserts\n    UNION ALL\n    SELECT * FROM deletes;\n    {% else %}\n    SELECT * FROM upserts;\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.013123, "supported_languages": null}, "macro.dbt_athena.athena__build_snapshot_staging_table": {"name": "athena__build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.athena__build_snapshot_staging_table", "macro_sql": "{% macro athena__build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {%- set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' -%}\n\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                  schema=target_relation.schema,\n                                                  database=none,\n                                                  type='table') -%}\n\n    {% do adapter.drop_relation(tmp_relation) %}\n\n    {%- set select = snapshot_staging_table(strategy, sql, target_relation) -%}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.014187, "supported_languages": null}, "macro.dbt_athena.athena__create_columns": {"name": "athena__create_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.athena__create_columns", "macro_sql": "{% macro athena__create_columns(relation, columns) -%}\n  {%- for column in columns -%}\n    {% if column.data_type|lower == 'boolean' %}\n    {% set query -%}\n      ALTER TABLE {{ relation }} ADD COLUMNS ({{ column.name }} BOOLEAN);\n    {%- endset -%}\n    {% elif column.data_type|lower == 'character varying(256)' %}\n    {% set query -%}\n      ALTER TABLE {{ relation }} ADD COLUMNS ({{ column.name }} VARCHAR);\n    {%- endset -%}\n    {% elif column.data_type|lower == 'integer' %}\n    {% set query -%}\n      ALTER TABLE {{ relation }} ADD COLUMNS ({{ column.name }} INT);\n    {%- endset -%}\n    {% elif column.data_type|lower == 'float' %}\n    {% set query -%}\n      ALTER TABLE {{ relation }} ADD COLUMNS ({{ column.name }} FLOAT);\n    {%- endset -%}\n    {% else %}\n      ALTER TABLE {{ relation }} ADD COLUMNS ({{ column.name }} {{ column.data_type }});\n    {% endif %}\n    {% do run_query(query) %}\n  {%- endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.015688, "supported_languages": null}, "macro.dbt_athena.athena__create_new_snapshot_table": {"name": "athena__create_new_snapshot_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.athena__create_new_snapshot_table", "macro_sql": "{% macro athena__create_new_snapshot_table(target, source) %}\n    {%- set tmp_identifier = target.identifier ~ '__dbt_tmp_1' -%}\n\n    {%- set tmp_relation = adapter.get_relation(database=none, schema=target.schema, identifier=tmp_identifier) -%}\n\n    {%- set target_relation = api.Relation.create(identifier=tmp_identifier,\n      schema=target.schema,\n      database=none,\n      type='table') -%}\n\n    {%- set source_columns = adapter.get_columns_in_relation(source) -%}\n\n    {% if tmp_relation is not none %}\n      {% do adapter.drop_relation(tmp_relation) %}\n    {% endif %}\n\n    {% set sql -%}\n      SELECT\n        {% for column in source_columns %}\n          {{ column.name }} {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}\n        ,dbt_snapshot_at\n      from {{ target }}\n      WHERE dbt_unique_key NOT IN ( SELECT dbt_unique_key FROM {{ source }} )\n      UNION ALL\n      SELECT\n        {% for column in source_columns %}\n              {% if column.name == 'dbt_valid_to' %}\n              CASE\n              WHEN dbt_valid_to=CAST('9999-01-01' as timestamp) AND is_current_record=True\n              THEN {{ current_timestamp() }}\n              ELSE dbt_valid_to\n              END AS dbt_valid_to {%- if not loop.last -%},{%- endif -%}\n              {% elif column.name == 'is_current_record' %}\n              CASE WHEN is_current_record=True THEN False ELSE is_current_record END\n              AS is_current_record {%- if not loop.last -%},{%- endif -%}\n              {% else %}\n                {{ column.name }} {%- if not loop.last -%},{%- endif -%}\n              {% endif %}\n        {% endfor %}\n        ,{{ current_timestamp() }} AS dbt_snapshot_at\n      from {{ target }}\n      WHERE dbt_unique_key IN ( SELECT dbt_unique_key FROM {{ source }} )\n      UNION ALL\n      SELECT\n        {% for column in source_columns %}\n            {{ column.name }} {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}\n        ,{{ current_timestamp() }} AS dbt_snapshot_at\n      FROM {{ source }};\n    {%- endset -%}\n\n    {% call statement('create_new_snapshot_table') %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do return(target_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.01855, "supported_languages": null}, "macro.dbt_athena.materialization_snapshot_athena": {"name": "materialization_snapshot_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt_athena.materialization_snapshot_athena", "macro_sql": "{% materialization snapshot, adapter='athena' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'parquet') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = athena__build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation) %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set new_snapshot_table = athena__create_new_snapshot_table(target = target_relation, source = staging_table) %}\n\n      {% set final_sql = athena__snapshot_merge_sql(\n            target = target_relation,\n            source = new_snapshot_table\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% if staging_table is defined %}\n      {% do adapter.drop_relation(staging_table) %}\n  {% endif %}\n\n  {% if new_snapshot_table is defined %}\n      {% do adapter.drop_relation(new_snapshot_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt_athena.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_athena.athena__build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt_athena.athena__create_new_snapshot_table", "macro.dbt_athena.athena__snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.022795, "supported_languages": ["sql"]}, "macro.dbt_athena.alter_relation_add_columns": {"name": "alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt_athena.alter_relation_add_columns", "macro_sql": "{% macro alter_relation_add_columns(relation, add_columns = none) -%}\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n      alter {{ relation.type }} {{ relation }}\n          add columns (\n            {%- for column in add_columns -%}\n                {{ column.name }} {{ ddl_data_type(column.data_type) }}{{ ', ' if not loop.last }}\n            {%- endfor -%}\n          )\n  {%- endset -%}\n\n  {% if (add_columns | length) > 0 %}\n    {{ return(run_query(sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.ddl_data_type", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.02592, "supported_languages": null}, "macro.dbt_athena.alter_relation_drop_columns": {"name": "alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt_athena.alter_relation_drop_columns", "macro_sql": "{% macro alter_relation_drop_columns(relation, remove_columns = none) -%}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {%- for column in remove_columns -%}\n    {% set sql -%}\n      alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n    {% endset %}\n    {% do run_query(sql) %}\n  {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.026613, "supported_languages": null}, "macro.dbt_athena.alter_relation_replace_columns": {"name": "alter_relation_replace_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt_athena.alter_relation_replace_columns", "macro_sql": "{% macro alter_relation_replace_columns(relation, replace_columns = none) -%}\n  {% if replace_columns is none %}\n    {% set replace_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n      alter {{ relation.type }} {{ relation }}\n          replace columns (\n            {%- for column in replace_columns -%}\n                {{ column.name }} {{ ddl_data_type(column.data_type) }}{{ ', ' if not loop.last }}\n            {%- endfor -%}\n          )\n  {%- endset -%}\n\n  {% if (replace_columns | length) > 0 %}\n    {{ return(run_query(sql)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.ddl_data_type", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.02762, "supported_languages": null}, "macro.dbt_athena.iceberg_merge": {"name": "iceberg_merge", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt_athena.iceberg_merge", "macro_sql": "{% macro iceberg_merge(on_schema_change, tmp_relation, target_relation, unique_key, existing_relation, statement_name=\"main\") %}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {% endif %}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    {% if unique_key is sequence and unique_key is not string %}\n      {%- set unique_key_cols = unique_key -%}\n    {% else %}\n      {%- set unique_key_cols = [unique_key] -%}\n    {% endif %}\n    {%- set src_columns = [] -%}\n    {%- set update_columns = [] -%}\n    {%- for col in dest_columns -%}\n      {%- do src_columns.append('src.\"' + col.name + '\"') -%}\n      {% if col.name not in unique_key_cols %}\n        {%- do update_columns.append(col.name) -%}\n      {% endif %}\n    {%- endfor -%}\n    {%- set src_cols_csv = src_columns | join(', ') -%}\n\n    merge into {{ target_relation }} as target using {{ tmp_relation }} as src\n    ON (\n      {% for key in unique_key_cols %}\n        target.{{ key }} = src.{{ key }}\n        {{ \"and \" if not loop.last }}\n      {% endfor %}\n    )\n    when matched\n      then update set\n        {% for col in update_columns %}\n          {{ '\"' + col + '\"' }} = {{ 'src.\"' + col + '\"' }} {{ \",\" if not loop.last }}\n        {% endfor %}\n    when not matched\n      then insert ({{ dest_cols_csv }})\n       values ({{ src_cols_csv }});\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.process_schema_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.031255, "supported_languages": null}, "macro.dbt_athena.validate_get_incremental_strategy": {"name": "validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/helpers.sql", "original_file_path": "macros/materializations/models/incremental/helpers.sql", "unique_id": "macro.dbt_athena.validate_get_incremental_strategy", "macro_sql": "{% macro validate_get_incremental_strategy(raw_strategy, table_type) %}\n  {%- if table_type == 'iceberg' -%}\n    {% set invalid_strategy_msg -%}\n      Invalid incremental strategy provided: {{ raw_strategy }}\n      Incremental models on Iceberg tables only work with 'append' or 'merge' (v3 only) strategy.\n    {%- endset %}\n    {% if raw_strategy not in ['append', 'merge'] %}\n      {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n    {% endif %}\n  {%- else -%}\n    {% set invalid_strategy_msg -%}\n      Invalid incremental strategy provided: {{ raw_strategy }}\n      Expected one of: 'append', 'insert_overwrite'\n    {%- endset %}\n\n    {% if raw_strategy not in ['append', 'insert_overwrite'] %}\n      {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.036598, "supported_languages": null}, "macro.dbt_athena.incremental_insert": {"name": "incremental_insert", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/helpers.sql", "original_file_path": "macros/materializations/models/incremental/helpers.sql", "unique_id": "macro.dbt_athena.incremental_insert", "macro_sql": "{% macro incremental_insert(on_schema_change, tmp_relation, target_relation, existing_relation, statement_name=\"main\") %}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {% endif %}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.process_schema_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.037448, "supported_languages": null}, "macro.dbt_athena.delete_overlapping_partitions": {"name": "delete_overlapping_partitions", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/helpers.sql", "original_file_path": "macros/materializations/models/incremental/helpers.sql", "unique_id": "macro.dbt_athena.delete_overlapping_partitions", "macro_sql": "{% macro delete_overlapping_partitions(target_relation, tmp_relation, partitioned_by) %}\n  {%- set partitioned_keys = partitioned_by | tojson | replace('\\\"', '') | replace('[', '') | replace(']', '') -%}\n  {% call statement('get_partitions', fetch_result=True) %}\n    select distinct {{partitioned_keys}} from {{ tmp_relation }};\n  {% endcall %}\n  {%- set table = load_result('get_partitions').table -%}\n  {%- set rows = table.rows -%}\n  {%- set partitions = [] -%}\n  {%- for row in rows -%}\n    {%- set single_partition = [] -%}\n    {%- for col in row -%}\n      {%- set column_type = adapter.convert_type(table, loop.index0) -%}\n      {%- if column_type == 'integer' -%}\n        {%- set value = col|string -%}\n      {%- elif column_type == 'string' -%}\n        {%- set value = \"'\" + col + \"'\" -%}\n      {%- elif column_type == 'date' -%}\n        {%- set value = \"'\" + col|string + \"'\" -%}\n      {%- elif column_type == 'timestamp' -%}\n        {%- set value = \"'\" + col|string + \"'\" -%}\n      {%- else -%}\n        {%- do exceptions.raise_compiler_error('Need to add support for column type ' + column_type) -%}\n      {%- endif -%}\n      {%- do single_partition.append(partitioned_by[loop.index0] + '=' + value) -%}\n    {%- endfor -%}\n    {%- set single_partition_expression = single_partition | join(' and ') -%}\n    {%- do partitions.append('(' + single_partition_expression + ')') -%}\n  {%- endfor -%}\n  {%- for i in range(partitions | length) %}\n    {%- do adapter.clean_up_partitions(target_relation.schema, target_relation.table, partitions[i]) -%}\n  {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.040211, "supported_languages": null}, "macro.dbt_athena.remove_partitions_from_columns": {"name": "remove_partitions_from_columns", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/helpers.sql", "original_file_path": "macros/materializations/models/incremental/helpers.sql", "unique_id": "macro.dbt_athena.remove_partitions_from_columns", "macro_sql": "{% macro remove_partitions_from_columns(columns_with_partitions, partition_keys) %}\n  {%- set columns = [] -%}\n  {%- for column in columns_with_partitions -%}\n    {%- if column.name not in partition_keys -%}\n      {%- do columns.append(column) -%}\n    {%- endif -%}\n  {%- endfor -%}\n  {{ return(columns) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.040763, "supported_languages": null}, "macro.dbt_athena.materialization_incremental_athena": {"name": "materialization_incremental_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt_athena.materialization_incremental_athena", "macro_sql": "{% materialization incremental, adapter='athena' -%}\n\n  {% set raw_strategy = config.get('incremental_strategy') or 'insert_overwrite' %}\n  {% set table_type = config.get('table_type', default='hive') | lower %}\n  {% set strategy = validate_get_incremental_strategy(raw_strategy, table_type) %}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set partitioned_by = config.get('partitioned_by', default=none) %}\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  -- If no partitions are used with insert_overwrite, we fall back to append mode.\n  {% if partitioned_by is none and strategy == 'insert_overwrite' %}\n    {% set strategy = 'append' %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) -%}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n    {% do drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) -%}\n  {% elif partitioned_by is not none and strategy == 'insert_overwrite' %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n    {% if tmp_relation is not none %}\n      {% do drop_relation(tmp_relation) %}\n    {% endif %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do delete_overlapping_partitions(target_relation, tmp_relation, partitioned_by) %}\n    {% set build_sql = incremental_insert(on_schema_change, tmp_relation, target_relation, existing_relation) %}\n    {% do to_drop.append(tmp_relation) %}\n  {% elif strategy == 'append' %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n    {% if tmp_relation is not none %}\n      {% do drop_relation(tmp_relation) %}\n    {% endif %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% set build_sql = incremental_insert(on_schema_change, tmp_relation, target_relation, existing_relation) %}\n    {% do to_drop.append(tmp_relation) %}\n  {% elif strategy == 'merge' and table_type == 'iceberg' %}\n    {% set unique_key = config.get('unique_key') %}\n    {% set empty_unique_key -%}\n      Merge strategy must implement unique_key as a single column or a list of columns.\n    {%- endset %}\n    {% if unique_key is none %}\n      {% do exceptions.raise_compiler_error(empty_unique_key) %}\n    {% endif %}\n\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n    {% if tmp_relation is not none %}\n      {% do drop_relation(tmp_relation) %}\n    {% endif %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% set build_sql = iceberg_merge(on_schema_change, tmp_relation, target_relation, unique_key, existing_relation) %}\n    {% do to_drop.append(tmp_relation) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n    {{ build_sql }}\n  {% endcall %}\n\n  -- set table properties\n  {% if not to_drop and table_type != 'iceberg' %}\n    {{ set_table_classification(target_relation) }}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n    {% do drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_athena.validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.drop_relation", "macro.dbt.run_query", "macro.dbt_athena.delete_overlapping_partitions", "macro.dbt_athena.incremental_insert", "macro.dbt_athena.iceberg_merge", "macro.dbt.statement", "macro.dbt_athena.set_table_classification", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0509849, "supported_languages": ["sql"]}, "macro.dbt_athena.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt_athena.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  {%- set partitioned_by = config.get('partitioned_by', default=none) -%}\n  {% set table_type = config.get('table_type', default='hive') | lower %}\n  {%- if partitioned_by is none -%}\n      {%- set partitioned_by = [] -%}\n  {%- endif %}\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_columns(target_relation, add_to_target_arr) -%}\n     {%- endif -%}\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n     {% if table_type == 'iceberg' %}\n       {% if add_to_target_arr | length > 0 %}\n         {%- do alter_relation_add_columns(target_relation, add_to_target_arr) -%}\n       {% endif %}\n       {% if remove_from_target_arr | length > 0 %}\n         {%- do alter_relation_drop_columns(target_relation, remove_from_target_arr) -%}\n       {% endif %}\n     {% else %}\n       {%- set replace_with_target_arr = remove_partitions_from_columns(schema_changes_dict['source_columns'], partitioned_by) -%}\n       {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 or new_target_types | length > 0 %}\n         {%- do alter_relation_replace_columns(target_relation, replace_with_target_arr) -%}\n       {% endif %}\n     {% endif %}\n  {% endif %}\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  {% do log(schema_change_message) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.alter_relation_add_columns", "macro.dbt_athena.alter_relation_drop_columns", "macro.dbt_athena.remove_partitions_from_columns", "macro.dbt_athena.alter_relation_replace_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0551429, "supported_languages": null}, "macro.dbt_athena.materialization_table_athena": {"name": "materialization_table_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt_athena.materialization_table_athena", "macro_sql": "{% materialization table, adapter='athena' -%}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set table_type = config.get('table_type', default='hive') | lower -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- cleanup\n  {%- if old_relation is not none -%}\n    {{ drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {%- endcall %}\n\n  {% if table_type != 'iceberg' %}\n    {{ set_table_classification(target_relation) }}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_athena.set_table_classification", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0575, "supported_languages": ["sql"]}, "macro.dbt_athena.athena__create_table_as": {"name": "athena__create_table_as", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt_athena.athena__create_table_as", "macro_sql": "{% macro athena__create_table_as(temporary, relation, sql) -%}\n  {%- set external_location = config.get('external_location', default=none) -%}\n  {%- set partitioned_by = config.get('partitioned_by', default=none) -%}\n  {%- set bucketed_by = config.get('bucketed_by', default=none) -%}\n  {%- set bucket_count = config.get('bucket_count', default=none) -%}\n  {%- set field_delimiter = config.get('field_delimiter', default=none) -%}\n  {%- set table_type = config.get('table_type', default='hive') | lower -%}\n  {%- set format = config.get('format', default='parquet') -%}\n  {%- set write_compression = config.get('write_compression', default=none) -%}\n  {%- set s3_data_dir = config.get('s3_data_dir', default=target.s3_data_dir) -%}\n  {%- set s3_data_naming = config.get('s3_data_naming', default=target.s3_data_naming) -%}\n  {%- set extra_table_properties = config.get('table_properties', default=none) -%}\n\n  {%- set location_property = 'external_location' -%}\n  {%- set partition_property = 'partitioned_by' -%}\n  {%- set location = adapter.s3_table_location(s3_data_dir, s3_data_naming, relation.schema, relation.identifier, external_location, temporary) -%}\n\n  {%- if table_type == 'iceberg' -%}\n    {%- set location_property = 'location' -%}\n    {%- set partition_property = 'partitioning' -%}\n    {%- if bucketed_by is not none or bucket_count is not none -%}\n      {%- set ignored_bucket_iceberg -%}\n      bucketed_by or bucket_count cannot be used with Iceberg tables. You have to use the bucket function\n      when partitioning. Will be ignored\n      {%- endset -%}\n      {%- set bucketed_by = none -%}\n      {%- set bucket_count = none -%}\n      {% do log(ignored_bucket_iceberg) %}\n    {%- endif -%}\n    {%- if s3_data_naming in ['table', 'table_schema'] or external_location is not none -%}\n      {%- set error_unique_location_iceberg -%}\n        You need to have an unique table location when creating Iceberg table. Right now we are building tables in\n        a destructive way but in the near future we will be using the RENAME feature to provide near-zero downtime.\n      {%- endset -%}\n      {% do exceptions.raise_compiler_error(error_unique_location_iceberg) %}\n    {%- endif -%}\n  {%- endif %}\n\n  {% do adapter.delete_from_s3(location) %}\n\n  create table\n    {{ relation }}\n  with (\n    table_type='{{ table_type }}',\n    is_external={%- if table_type == 'iceberg' -%}false{%- else -%}true{%- endif %},\n    {{ location_property }}='{{ location }}',\n  {%- if partitioned_by is not none %}\n    {{ partition_property }}=ARRAY{{ partitioned_by | tojson | replace('\\\"', '\\'') }},\n  {%- endif %}\n  {%- if bucketed_by is not none %}\n    bucketed_by=ARRAY{{ bucketed_by | tojson | replace('\\\"', '\\'') }},\n  {%- endif %}\n  {%- if bucket_count is not none %}\n    bucket_count={{ bucket_count }},\n  {%- endif %}\n  {%- if field_delimiter is not none %}\n    field_delimiter='{{ field_delimiter }}',\n  {%- endif %}\n  {%- if write_compression is not none %}\n    write_compression='{{ write_compression }}',\n  {%- endif %}\n    format='{{ format }}'\n  {%- if extra_table_properties is not none -%}\n    {%- for prop_name, prop_value in extra_table_properties.items() -%}\n    ,\n    {{ prop_name }}={{ prop_value }}\n    {%- endfor -%}\n  {% endif %}\n  )\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.065475, "supported_languages": null}, "macro.dbt_athena.materialization_view_athena": {"name": "materialization_view_athena", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt_athena.materialization_view_athena", "macro_sql": "{% materialization view, adapter='athena' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% do return(to_return) %}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_athena.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.066176, "supported_languages": ["sql"]}, "macro.dbt_athena.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt_athena.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.068875, "supported_languages": null}, "macro.dbt_athena.athena__create_view_as": {"name": "athena__create_view_as", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt_athena.athena__create_view_as", "macro_sql": "{% macro athena__create_view_as(relation, sql) -%}\n  create or replace view\n    {{ relation }}\n  as\n    {{ sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0691662, "supported_languages": null}, "macro.dbt_athena.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_athena.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    -- No truncate in Athena so always drop CSV table and recreate\n    {{ drop_relation(old_relation) }}\n    {% set sql = create_csv_table(model, agate_table) %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation", "macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0707011, "supported_languages": null}, "macro.dbt_athena.athena__create_csv_table": {"name": "athena__create_csv_table", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt_athena.athena__create_csv_table", "macro_sql": "{% macro athena__create_csv_table(model, agate_table) %}\n  {%- set column_override = config.get('column_types', {}) -%}\n  {%- set quote_seed_column = config.get('quote_columns', None) -%}\n  {%- set s3_data_dir = config.get('s3_data_dir', default=target.s3_data_dir) -%}\n  {%- set s3_data_naming = config.get('s3_data_naming', target.s3_data_naming) -%}\n  {%- set external_location = config.get('external_location', default=none) -%}\n\n  {% set sql %}\n    create external table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {% endif -%}\n        {%- endfor -%}\n    )\n    stored as parquet\n    location '{{ adapter.s3_table_location(s3_data_dir, s3_data_naming, model[\"schema\"], model[\"alias\"], external_location) }}'\n    tblproperties ('classification'='parquet')\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.072763, "supported_languages": null}, "macro.dbt_athena.ddl_data_type": {"name": "ddl_data_type", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/ddl_data_type.sql", "original_file_path": "macros/utils/ddl_data_type.sql", "unique_id": "macro.dbt_athena.ddl_data_type", "macro_sql": "{% macro ddl_data_type(col_type) -%}\n    -- transform varchar\n  {% set re = modules.re %}\n  {% set data_type = re.sub('(?:varchar|character varying)(?:\\(\\d+\\))?', 'string', col_type) %}\n\n  -- transform array and map\n  {%- if 'array' in data_type or 'map' in data_type -%}\n    {% set data_type = data_type.replace('(', '<').replace(')', '>') -%}\n  {%- endif -%}\n\n  -- transform int\n  {%- if 'integer' in data_type -%}\n    {% set data_type = data_type.replace('integer', 'int') -%}\n  {%- endif -%}\n\n  {{ return(data_type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.07499, "supported_languages": null}, "macro.dbt_athena.athena__type_float": {"name": "athena__type_float", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_float", "macro_sql": "\n\n{%- macro athena__type_float() -%}\n    DOUBLE\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.075278, "supported_languages": null}, "macro.dbt_athena.athena__type_numeric": {"name": "athena__type_numeric", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_numeric", "macro_sql": "{%- macro athena__type_numeric() -%}\n    DECIMAL(38,6)\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.075406, "supported_languages": null}, "macro.dbt_athena.athena__type_int": {"name": "athena__type_int", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_int", "macro_sql": "{%- macro athena__type_int() -%}\n    INTEGER\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.07552, "supported_languages": null}, "macro.dbt_athena.athena__type_string": {"name": "athena__type_string", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_athena.athena__type_string", "macro_sql": "{%- macro athena__type_string() -%}\n    VARCHAR\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0756311, "supported_languages": null}, "macro.dbt_athena.athena__dateadd": {"name": "athena__dateadd", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_athena.athena__dateadd", "macro_sql": "{% macro athena__dateadd(datepart, interval, from_date_or_timestamp) -%}\n    date_add('{{ datepart }}', {{ interval }}, {{ from_date_or_timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.075959, "supported_languages": null}, "macro.dbt_athena.athena__current_timestamp": {"name": "athena__current_timestamp", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_athena.athena__current_timestamp", "macro_sql": "{% macro athena__current_timestamp() -%}\n    -- pyathena converts time zoned timestamps to strings so lets avoid them\n    -- now()\n    cast(now() as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.076134, "supported_languages": null}, "macro.dbt_athena.athena__right": {"name": "athena__right", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_athena.athena__right", "macro_sql": "{% macro athena__right(string_text, length_expression) %}\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr({{ string_text }}, -1 * ({{ length_expression }}))\n    end\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.076457, "supported_languages": null}, "macro.dbt_athena.athena__datediff": {"name": "athena__datediff", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_athena.athena__datediff", "macro_sql": "{% macro athena__datediff(first_date, second_date, datepart) -%}\n    {%- if datepart == 'year' -%}\n        (year(CAST({{ second_date }} AS TIMESTAMP)) - year(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'quarter' -%}\n        ({{ datediff(first_date, second_date, 'year') }} * 4) + quarter(CAST({{ second_date }} AS TIMESTAMP)) - quarter(CAST({{ first_date }} AS TIMESTAMP))\n    {%- elif datepart == 'month' -%}\n        ({{ datediff(first_date, second_date, 'year') }} * 12) + month(CAST({{ second_date }} AS TIMESTAMP)) - month(CAST({{ first_date }} AS TIMESTAMP))\n    {%- elif datepart == 'day' -%}\n        ((to_milliseconds((CAST(CAST({{ second_date }} AS TIMESTAMP) AS DATE) - CAST(CAST({{ first_date }} AS TIMESTAMP) AS DATE)))) / 86400000)\n    {%- elif datepart == 'week' -%}\n         ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when dow(CAST({{first_date}} AS TIMESTAMP)) <= dow(CAST({{second_date}} AS TIMESTAMP)) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {%- elif datepart == 'hour' -%}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + hour(CAST({{ second_date }} AS TIMESTAMP)) - hour(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'minute' -%}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + minute(CAST({{ second_date }} AS TIMESTAMP)) - minute(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'second' -%}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + second(CAST({{ second_date }} AS TIMESTAMP)) - second(CAST({{ first_date }} AS TIMESTAMP)))\n    {%- elif datepart == 'millisecond' -%}\n        (to_milliseconds((CAST({{ second_date }} AS TIMESTAMP) - CAST({{ first_date }} AS TIMESTAMP))))\n    {%- else -%}\n        {% if execute %}{{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in Athena: {!r}\".format(datepart)) }}{% endif %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0808709, "supported_languages": null}, "macro.dbt_athena.athena__safe_cast": {"name": "athena__safe_cast", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_athena.athena__safe_cast", "macro_sql": "{% macro athena__safe_cast(field, type) -%}\n    try_cast({{field}} as {{type}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0811431, "supported_languages": null}, "macro.dbt_athena.athena__hash": {"name": "athena__hash", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_athena.athena__hash", "macro_sql": "{% macro athena__hash(field) -%}\n    lower(to_hex(md5(to_utf8(cast({{field}} as varchar)))))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0813508, "supported_languages": null}, "macro.dbt_athena.athena__any_value": {"name": "athena__any_value", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_athena.athena__any_value", "macro_sql": "{% macro athena__any_value(expression) -%}\n    arbitrary({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.081555, "supported_languages": null}, "macro.dbt_athena.athena__array_concat": {"name": "athena__array_concat", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_athena.athena__array_concat", "macro_sql": "{% macro athena__array_concat(array_1, array_2) -%}\n    {{ array_1 }} || {{ array_2 }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.081803, "supported_languages": null}, "macro.dbt_athena.athena__bool_or": {"name": "athena__bool_or", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_athena.athena__bool_or", "macro_sql": "{% macro athena__bool_or(expression) -%}\n    bool_or({{ expression }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0819998, "supported_languages": null}, "macro.dbt_athena.athena__date_trunc": {"name": "athena__date_trunc", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_athena.athena__date_trunc", "macro_sql": "{% macro athena__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.082249, "supported_languages": null}, "macro.dbt_athena.athena__array_construct": {"name": "athena__array_construct", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_athena.athena__array_construct", "macro_sql": "{% macro athena__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    {{ safe_cast('array[]', 'array(' ~ data_type ~ ')') }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0828412, "supported_languages": null}, "macro.dbt_athena.athena__array_append": {"name": "athena__array_append", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_athena.athena__array_append", "macro_sql": "{% macro athena__array_append(array, new_element) -%}\n    {{ array }} || {{ new_element }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.083091, "supported_languages": null}, "macro.dbt_athena.athena__drop_relation": {"name": "athena__drop_relation", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_athena.athena__drop_relation", "macro_sql": "{% macro athena__drop_relation(relation) -%}\n  {% set rel_type = adapter.get_table_type(relation.schema, relation.table) %}\n  {%- if rel_type is not none %}\n    {%- if rel_type == 'table' %}\n      {%- do adapter.clean_up_table(relation.schema, relation.table) -%}\n    {%- endif %}\n    {% call statement('drop_relation', auto_begin=False) -%}\n      drop {{ relation.type }} if exists {{ relation }}\n    {%- endcall %}\n  {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0842829, "supported_languages": null}, "macro.dbt_athena.set_table_classification": {"name": "set_table_classification", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt_athena.set_table_classification", "macro_sql": "{% macro set_table_classification(relation) -%}\n  {%- set format = config.get('format', default='parquet') -%}\n  {% call statement('set_table_classification', auto_begin=False) -%}\n    alter table {{ relation }} set tblproperties ('classification' = '{{ format }}')\n  {%- endcall %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.084747, "supported_languages": null}, "macro.dbt_athena.athena__get_catalog": {"name": "athena__get_catalog", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_athena.athena__get_catalog", "macro_sql": "{% macro athena__get_catalog(information_schema, schemas) -%}\n    {%- set query -%}\n        select * from (\n            (\n                with tables as (\n\n                    select\n                        tables.table_catalog as table_database,\n                        tables.table_schema as table_schema,\n                        tables.table_name as table_name,\n\n                        case\n                            when views.table_name is not null\n                                then 'view'\n                            when table_type = 'BASE TABLE'\n                                then 'table'\n                            else table_type\n                        end as table_type,\n\n                        null as table_comment\n\n                    from {{ information_schema }}.tables\n                    left join {{ information_schema }}.views\n                        on tables.table_catalog = views.table_catalog\n                        and tables.table_schema = views.table_schema\n                        and tables.table_name = views.table_name\n\n                ),\n\n                columns as (\n\n                    select\n                        table_catalog as table_database,\n                        table_schema as table_schema,\n                        table_name as table_name,\n                        column_name as column_name,\n                        ordinal_position as column_index,\n                        data_type as column_type,\n                        comment as column_comment\n\n                    from {{ information_schema }}.columns\n\n                ),\n\n                catalog as (\n\n                    select\n                        tables.table_database,\n                        tables.table_schema,\n                        tables.table_name,\n                        tables.table_type,\n                        tables.table_comment,\n                        columns.column_name,\n                        columns.column_index,\n                        columns.column_type,\n                        columns.column_comment\n\n                    from tables\n                    join columns\n                        on tables.\"table_database\" = columns.\"table_database\"\n                        and tables.\"table_schema\" = columns.\"table_schema\"\n                        and tables.\"table_name\" = columns.\"table_name\"\n\n                )\n\n                {%- for schema, relations in schemas.items() -%}\n                  {%- for relation_batch in relations|batch(100) %}\n                    select * from catalog\n                    where \"table_schema\" = lower('{{ schema }}')\n                      and (\n                        {%- for relation in relation_batch -%}\n                          \"table_name\" = lower('{{ relation }}')\n                        {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                      )\n\n                    {%- if not loop.last %} union all {% endif -%}\n                  {%- endfor -%}\n\n                  {%- if not loop.last %} union all {% endif -%}\n                {%- endfor -%}\n            )\n        )\n  {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.089537, "supported_languages": null}, "macro.dbt_athena.athena__list_schemas": {"name": "athena__list_schemas", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_athena.athena__list_schemas", "macro_sql": "{% macro athena__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True) %}\n    select\n        distinct schema_name\n\n    from {{ information_schema_name(database) }}.schemata\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.089988, "supported_languages": null}, "macro.dbt_athena.athena__list_relations_without_caching": {"name": "athena__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt_athena.athena__list_relations_without_caching", "macro_sql": "{% macro athena__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    WITH views AS (\n      select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema\n      from {{ schema_relation.information_schema() }}.views\n      where table_schema = LOWER('{{ schema_relation.schema }}')\n    ), tables AS (\n      select\n        table_catalog as database,\n        table_name as name,\n        table_schema as schema\n\n      from {{ schema_relation.information_schema() }}.tables\n      where table_schema = LOWER('{{ schema_relation.schema }}')\n\n      -- Views appear in both `tables` and `views`, so excluding them from tables\n      EXCEPT\n\n      select * from views\n    )\n    select views.*, 'view' AS table_type FROM views\n    UNION ALL\n    select tables.*, 'table' AS table_type FROM tables\n  {% endcall %}\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.090654, "supported_languages": null}, "macro.dbt_athena.athena__get_columns_in_relation": {"name": "athena__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_athena", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_athena.athena__get_columns_in_relation", "macro_sql": "{% macro athena__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n      select\n          column_name,\n          data_type,\n          null as character_maximum_length,\n          null as numeric_precision,\n          null as numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = LOWER('{{ relation.identifier }}')\n        {% if relation.schema %}\n            and table_schema = LOWER('{{ relation.schema }}')\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n\n  {% set table = load_result('get_columns_in_relation').table %}\n  {% do return(sql_convert_columns_in_relation(table)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0916858, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.093384, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.093686, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.09391, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0941288, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0943549, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.09492, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.095493, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.0959759, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.096632, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.097055, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1023722, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.102633, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.102985, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1041338, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.104392, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.10466, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.106892, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1091049, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.115333, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1158311, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.116138, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.116302, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.116543, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.116744, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.117104, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.118738, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.119086, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1195781, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.120384, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.130831, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.134644, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.135443, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.135991, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.136651, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1373398, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.140131, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.141152, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.142379, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1428092, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.144118, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.154063, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1571991, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.157668, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.159392, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.159842, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.160952, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.162018, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.163519, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.164064, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.164459, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.165049, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.165395, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.165998, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1663628, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.166881, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.167229, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.167519, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.168045, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.177978, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1871018, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1893508, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.191541, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.193096, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.1976728, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.198647, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.19897, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.199734, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.200483, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.204969, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2055502, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.205937, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2085938, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.209337, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.209619, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2099159, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.21034, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.215895, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.223917, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.225399, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.225777, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.226557, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.226864, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.227072, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.227294, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2274802, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.227736, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.227922, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2286909, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.228982, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.23103, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.231638, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.232009, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.232811, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.233235, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.233709, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.234354, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.234786, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.235347, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2358122, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.236192, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.237089, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.239413, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.240352, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2408152, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2436, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2456162, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2468312, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.247206, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.247564, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2476811, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.248193, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.248449, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.248843, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.249034, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.249426, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.24959, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.250114, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2503722, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.250725, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.250842, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2512472, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.25147, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.251934, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.252148, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.253129, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.253875, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.254411, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.254668, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.255113, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.255332, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.25573, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.25598, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2563572, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2566028, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.256984, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2571461, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.257591, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2578108, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.258194, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.258353, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.259779, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2600188, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.260271, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.260504, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.26084, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.261085, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.261337, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.261618, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.261873, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2621078, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.262357, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2625878, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2628381, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2630668, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.263498, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.263704, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.264085, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.264246, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.264767, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.265184, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.265414, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.266218, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.266477, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.266828, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.267255, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.267477, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2681549, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2685409, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.268984, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2691898, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.269758, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.270048, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.270303, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.270591, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_athena.athena__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.271328, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.271564, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2717812, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.271942, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.272199, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.272316, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2725718, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.272831, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.27353, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2737439, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.273987, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.274621, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.279516, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.279868, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.280212, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.280677, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.281066, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2815769, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.281864, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2821991, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.282482, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.282736, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.283055, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.283505, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.283909, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.284805, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2851682, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.285391, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.285698, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.286345, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.287015, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.289592, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.289772, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.290036, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.29031, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.290856, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.291141, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.291303, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2916548, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2919512, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.29231, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2926028, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.292966, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2940412, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.294336, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.294718, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2950752, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.296896, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.29793, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.298193, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.2985091, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.298774, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.299202, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.300071, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.302303, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.302707, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3030012, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.303244, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3035321, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3039129, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.30423, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3047, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.304988, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.305239, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_athena.athena__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.307785, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.308034, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.308536, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3088288, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.309365, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.309727, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.310772, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.311181, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.312434, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.314701, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.315464, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.316401, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.317052, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.317163, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3179252, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.318284, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3187342, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3191628, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.319705, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.320471, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.321205, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.32225, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.322738, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3232472, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3248582, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.326953, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.328351, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.330196, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3312519, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.33182, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3330078, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.334458, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3351822, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3359869, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.336968, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.337794, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3386939, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.339336, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.340084, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.340877, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.341897, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.342988, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3438709, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.344436, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.345074, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.379262, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3804202, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3818629, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.383332, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.384867, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.386029, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.38753, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3883462, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3888419, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.394083, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.396735, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3971798, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.397453, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.398189, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.398633, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.398952, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.399364, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.3996449, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.400662, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4020228, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.403141, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4041321, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4045079, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4051042, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.405608, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.406181, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.407281, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.408802, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4101288, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.410819, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.411134, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.411999, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4131021, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4145129, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.41517, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4156501, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.417639, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.420002, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4221299, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4248981, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4253728, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4255931, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4305978, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.436386, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.436877, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4372869, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.438443, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4387991, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4391308, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.439441, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.43971, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.439986, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.440601, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4409878, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.441599, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4424992, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.443039, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4435918, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.44627, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.446868, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.448153, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.448999, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.450793, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.453307, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.455018, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4564328, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.457182, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4583979, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.460669, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.461437, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.462186, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.46249, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.463109, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.464092, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4648252, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.465929, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.466553, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.466783, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4670038, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.467833, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.469159, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4708219, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4712791, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.473789, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.475135, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.487635, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.491363, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.495326, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4969149, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.4981718, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.499302, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.500424, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5014038, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.501782, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.502378, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.503686, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.504372, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.504682, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5055418, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5081532, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.509171, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5105972, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.510943, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.511229, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.51161, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.511895, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5128698, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.513301, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.513639, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.513961, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.514295, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5147781, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.514997, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.515213, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5153751, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.515775, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.516536, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5167801, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.51727, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.517707, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.51849, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.518749, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5189729, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5191941, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.519412, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.52009, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.520389, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.520712, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.521133, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5215218, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5218182, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.522327, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.522551, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.522772, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5230641, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.523458, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.52542, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5258539, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.526292, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.527116, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.527812, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5284412, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.528939, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.529165, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.529388, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.530001, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.53035, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.530729, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.531143, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.534115, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.534775, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5355031, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5360131, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.536766, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5374222, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.538214, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.538574, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.538815, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.539424, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.540114, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.54096, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.541339, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5417101, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.542078, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.542453, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.542909, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5436642, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.543999, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5442529, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.545855, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.546405, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5466912, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.546995, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5474079, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.54774, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.548393, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5493271, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.549686, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.549937, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.550176, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5504289, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.551231, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.551456, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5518, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.552145, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.552525, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.552893, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.553524, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5536509, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.553778, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.553903, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.554173, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.554762, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.554889, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.55501, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5554938, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.555956, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5576599, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5582988, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.559098, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ exceptions.warn(\n            \"The flags option is not supported for BigQuery and is being ignored.\"\n    ) }}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.559853, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.560388, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.560977, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {{ exceptions.raise_compiler_error(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5615911, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5621161, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.562295, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.562463, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.562634, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5631511, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.563282, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5634072, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.563549, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.563675, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.563796, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.564408, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5651479, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.565509, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5658739, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.566677, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5677729, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.569841, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.571187, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.57284, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.573356, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.574464, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.585433, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.586826, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5876548, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5899782, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.590434, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5906072, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5915148, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5932531, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.594451, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.595326, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5966458, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.597824, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.5996192, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.601452, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.603185, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.603636, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6045399, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.606418, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.607462, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.609334, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.610914, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6116228, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6134348, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.617198, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.61889, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.620784, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.621838, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.622294, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6237152, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6242769, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.626082, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.626581, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.628511, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.62913, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.63136, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6323829, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.633037, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6337888, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6343622, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.636013, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.637404, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.638829, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.641013, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6417239, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.642116, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6433039, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6451788, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.646857, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6472142, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.647861, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6485682, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6497972, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.651059, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6524239, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.653703, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.655067, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.656459, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.659234, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.660579, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.662004, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.662949, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.663897, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6651251, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.667258, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.667881, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6691148, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.67034, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6712909, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.672694, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6738691, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.680165, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.686883, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.687789, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.690248, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.691608, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.692519, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6948102, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6966138, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.6998, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.701206, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.7021592, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.703229, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1681142228.7054029, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.VoluntaryChurnABT.stg__intenciones": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "model.VoluntaryChurnABT.stg_dtl_pa__nodos": [], "model.VoluntaryChurnABT.stg_360_staging__facturas": [], "model.VoluntaryChurnABT.stg_360_analytics__metricas": [], "model.VoluntaryChurnABT.stg_smy_pa__performances": ["model.VoluntaryChurnABT.tablas_particiones"], "model.VoluntaryChurnABT.stg_smy_pa__retenciones": ["model.VoluntaryChurnABT.tablas_particiones"], "model.VoluntaryChurnABT.stg_smy_pa__consumos": ["model.VoluntaryChurnABT.tablas_particiones"], "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones": ["model.VoluntaryChurnABT.tablas_particiones", "model.VoluntaryChurnABT.tablas_particiones"], "model.VoluntaryChurnABT.dbt_results": [], "model.VoluntaryChurnABT.tablas_particiones": [], "model.VoluntaryChurnABT.int_facturas_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_staging__facturas"], "model.VoluntaryChurnABT.int_consumos_aggregated_to_week": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "model.VoluntaryChurnABT.int_metricas_aggregated_to_week": ["model.VoluntaryChurnABT.stg_360_analytics__metricas"], "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "model.VoluntaryChurnABT.int_nodos_aggregated_to_week": ["model.VoluntaryChurnABT.stg_dtl_pa__nodos", "model.VoluntaryChurnABT.stg_smy_pa__performances"], "model.VoluntaryChurnABT.estadisticos_mensual": ["model.VoluntaryChurnABT.estadisticos_semanal"], "model.VoluntaryChurnABT.estadisticos_semanal": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "model.VoluntaryChurnABT.int_facturas_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_metricas_aggregated_to_week", "model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "model.VoluntaryChurnABT.target_semanal": ["model.VoluntaryChurnABT.stg__intenciones"], "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0": ["model.VoluntaryChurnABT.dbt_results"], "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a": ["model.VoluntaryChurnABT.stg_smy_pa__performances"], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones"], "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1": ["model.VoluntaryChurnABT.stg_smy_pa__consumos"], "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa": ["model.VoluntaryChurnABT.stg_smy_pa__retenciones"], "test.VoluntaryChurnABT.fecha_particion_tablas_particiones_particion.a25bc4d8e4": ["model.VoluntaryChurnABT.tablas_particiones"], "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_hh_cd.1be266aef7": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.c77e3b3d7e": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana.b844623204": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17": ["model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9": ["model.VoluntaryChurnABT.estadisticos_semanal"], "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a": ["model.VoluntaryChurnABT.estadisticos_mensual"], "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9": ["model.VoluntaryChurnABT.target_semanal"], "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e": ["model.VoluntaryChurnABT.target_semanal"], "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9": ["model.VoluntaryChurnABT.target_semanal"]}, "child_map": {"model.VoluntaryChurnABT.stg__intenciones": ["model.VoluntaryChurnABT.target_semanal"], "model.VoluntaryChurnABT.stg_dtl_pa__nodos": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week"], "model.VoluntaryChurnABT.stg_360_staging__facturas": ["model.VoluntaryChurnABT.int_facturas_aggregated_to_week"], "model.VoluntaryChurnABT.stg_360_analytics__metricas": ["model.VoluntaryChurnABT.int_metricas_aggregated_to_week"], "model.VoluntaryChurnABT.stg_smy_pa__performances": ["model.VoluntaryChurnABT.int_nodos_aggregated_to_week", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a", "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd", "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93"], "model.VoluntaryChurnABT.stg_smy_pa__retenciones": ["model.VoluntaryChurnABT.stg__intenciones", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa", "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3", "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37"], "model.VoluntaryChurnABT.stg_smy_pa__consumos": ["model.VoluntaryChurnABT.int_consumos_aggregated_to_week", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1", "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498", "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19", "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3", "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4"], "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones": ["model.VoluntaryChurnABT.stg__intenciones", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b", "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da", "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8", "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b", "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08", "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f"], "model.VoluntaryChurnABT.dbt_results": ["operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0"], "model.VoluntaryChurnABT.tablas_particiones": ["model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "model.VoluntaryChurnABT.stg_smy_pa__cancelaciones", "model.VoluntaryChurnABT.stg_smy_pa__consumos", "model.VoluntaryChurnABT.stg_smy_pa__performances", "model.VoluntaryChurnABT.stg_smy_pa__retenciones", "test.VoluntaryChurnABT.fecha_particion_tablas_particiones_particion.a25bc4d8e4"], "model.VoluntaryChurnABT.int_facturas_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d", "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6", "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d"], "model.VoluntaryChurnABT.int_consumos_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc", "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a", "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9"], "model.VoluntaryChurnABT.int_metricas_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana.b844623204", "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.c77e3b3d7e", "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_hh_cd.1be266aef7"], "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.estadisticos_semanal", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17", "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310", "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c"], "model.VoluntaryChurnABT.int_nodos_aggregated_to_week": ["model.VoluntaryChurnABT.estadisticos_semanal", "model.VoluntaryChurnABT.int_features_engineering_aggregated_to_week", "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f", "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f", "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d"], "model.VoluntaryChurnABT.estadisticos_mensual": ["test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97", "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764", "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9"], "model.VoluntaryChurnABT.estadisticos_semanal": ["model.VoluntaryChurnABT.estadisticos_mensual", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049", "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f"], "model.VoluntaryChurnABT.target_semanal": ["test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e", "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9", "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9"], "operation.VoluntaryChurnABT.VoluntaryChurnABT-on-run-end-0": [], "test.VoluntaryChurnABT.fecha_dentro_particion_performances_stg_smy_pa__performances_dt_inf.0e3e42cbab": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_ucer.882b76b8a5": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_pct_npa.65279c69dc": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_snr_deg.39a0bb4edd": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_ucer_deg.5f0a457b93": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_samp.db3e60727b": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_numr.7f4ba0741d": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_cm_us.4caf2a8c11": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_ut_us.546f84170d": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_npa.1ddca2ad62": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_ucer.4ee039c10a": [], "test.VoluntaryChurnABT.test_cant_null_performances_stg_smy_pa__performances_desc_clss_snr.33ecac005a": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__performances_stg_smy_pa__performances_.fbe57d612a": [], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.4a7031b8d8": [], "test.VoluntaryChurnABT.fecha_dentro_particion_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.13b997956b": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_inf.125fdd8100": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_ini_pcs.3d73ea3e88": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_fm.90e47bf506": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_ctrtd_to.b3ac841d09": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_pd.241f169b5b": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_id_tp_clnt.6bc684d6f3": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones01_stg_smy_pa__cancelaciones_dt_load.fa49b892d2": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pcs.ce0a18135f": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_dt_ini_pcs.2adc1079bc": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_fm.5a254bf64e": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_ctrtd_to.c1a2136395": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_pd.a4f98dbe08": [], "test.VoluntaryChurnABT.test_cant_null_cancelaciones02_stg_smy_pa__cancelaciones_id_tp_clnt.f8f5688e0f": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones01_stg_smy_pa__cancelaciones_.011e6d936b": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__cancelaciones02_stg_smy_pa__cancelaciones_.585bddf4da": [], "test.VoluntaryChurnABT.fecha_dentro_particion_consumos_stg_smy_pa__consumos_dt_inf.5bfc195498": [], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_dt_inf.68a22d5d19": [], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_dwld.90fea8a5f3": [], "test.VoluntaryChurnABT.test_cant_null_consumos_stg_smy_pa__consumos_trfc_upld.9083bc1ac4": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__consumos_stg_smy_pa__consumos_.8a381523f1": [], "test.VoluntaryChurnABT.fecha_dentro_particion_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.74492928d9": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_inf.f9c0e21a02": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_ini_pcs.dc44f95dfc": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_fm.196d9dc9d1": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_ctrtd_to.4bdf664626": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_pd.6d50f5ebe3": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_id_tp_clnt.963e3e9d37": [], "test.VoluntaryChurnABT.test_cant_null_retenciones_stg_smy_pa__retenciones_dt_load.f9a3d7941e": [], "test.VoluntaryChurnABT.cant_particiones_stg_smy_pa__retenciones_stg_smy_pa__retenciones_.8c498beafa": [], "test.VoluntaryChurnABT.fecha_particion_tablas_particiones_particion.a25bc4d8e4": [], "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_hh_cd.1be266aef7": [], "test.VoluntaryChurnABT.not_null_int_metricas_aggregated_to_week_fecha_inicio_semana.c77e3b3d7e": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_metricas_aggregated_to_week_hh_cd__fecha_inicio_semana.b844623204": [], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_hh_cd.db810c65a9": [], "test.VoluntaryChurnABT.not_null_int_consumos_aggregated_to_week_fecha_inicio_semana.a96e73555a": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_consumos_aggregated_to_week_hh_cd__fecha_inicio_semana.9045d482fc": [], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_hh_cd.b973c38a1d": [], "test.VoluntaryChurnABT.not_null_int_nodos_aggregated_to_week_fecha_inicio_semana.68c5d88b6f": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_nodos_aggregated_to_week_hh_cd__fecha_inicio_semana.ed9d77c76f": [], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_hh_cd.6b4c7f5b2d": [], "test.VoluntaryChurnABT.not_null_int_facturas_aggregated_to_week_fecha_inicio_semana.ad14e96ac6": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_facturas_aggregated_to_week_hh_cd__fecha_inicio_semana.0116fdc06d": [], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_hh_cd.30b7d8912c": [], "test.VoluntaryChurnABT.not_null_int_features_engineering_aggregated_to_week_fecha_inicio_semana.352f2c4310": [], "test.VoluntaryChurnABT.dbt_expectations_expect_compound_columns_to_be_unique_int_features_engineering_aggregated_to_week_hh_cd__fecha_inicio_semana.f36b099f17": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_cm_us.ba1c5922fd": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_numr.c112f6a1bb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_samp.0c854ed303": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_ucer_deg.facd6f4690": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_snr_deg.37d4473f8a": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_npa.a5da6d6734": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_pct_ucer.1a9a9d9934": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_es_gold.0b951b5e53": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_dwld.8f4021aeee": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_trfc_dwld.200f210ff9": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_trfc_dwld.4478c40bcc": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_trfc_upld.5fca20d1b7": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_max_trfc_upld.73d1e65fc4": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_sum_max_trfc_upld.12d645444c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_snr_deg.f1a4b28aa5": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_trfc_dwld_cm_us.1c2bed4be8": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_rel.5f4bc20049": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_unexp_amt_ttl.38ddd3058f": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt.1dca47aba0": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_amt_due.54100e5647": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_unexp_amt.0f51622b35": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_30_amt.4070422589": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_60_amt.e4278b901c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_90_amt.f6fe24f305": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_120_amt.d3c3179d4c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_150_amt.90a7378fe4": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_180_amt.fc38e04b45": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_210_amt.382472f8d7": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_240_amt.09351a8dc6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_270_amt.6392947ed3": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_300_amt.237a17d7b9": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_330_amt.4f51061205": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_at_360_amt.96bb29ad19": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tel.8686497a1f": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_int.e5be5ec8a3": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ctt_producto_tv.c7a1abdda9": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_int.2bbb945582": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tel.66103ac1fb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_tiene_descuento_tv.009196cba6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_cliente_arreglo_pago.4091457d8f": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_int.f5f77ae57e": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tv.da08e792cb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_intencion_producto_tel.81faae05b6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tel.c5eed77137": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_int.8a37de2757": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_antiguedad_ultimo_ctt_tv.49dcea327c": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_max_ar_actvn_dt.2a0938c7a6": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt.bbcb978453": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_amt_due.7756433ad3": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_unexp_amt.33bc100afd": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tel.01da60dadb": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_int.3a3e8e38a0": [], "test.VoluntaryChurnABT.column_median_estadisticos_semanal_estadisticos_semanal_avg_ctt_producto_tv.aa14a082a9": [], "test.VoluntaryChurnABT.not_null_estadisticos_mensual_hh_cd.04dcbaf3e9": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_ttl.f8c9096698": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_amt_due.c2b131ab62": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_unexp_amt.19afdea3aa": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_snr_deg.74d36d46ea": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_trfc_dwld_cm_us.8b6fa3efb1": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_rel.437bea510b": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_unexp_amt_ttl.089fbae35f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_dwld.36b1419c5b": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_trfc_dwld.b55e929ccd": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_trfc_dwld.9acaf7bf63": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_max_trfc_upld.aa39096d48": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_avg_max_trfc_upld.684b517488": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_avg_sum_max_trfc_upld.9f3c61ebd5": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_ttl.0332ce9550": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_amt_due.54a6b0c3c3": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_unexp_amt.f039e72278": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_snr_deg.c9015b80ee": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_trfc_dwld_cm_us.9ed4689f08": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_rel.c698e16ab2": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_unexp_amt_ttl.9c0e6563f9": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_dwld.90c10c81d9": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_trfc_dwld.401f7aee26": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_trfc_dwld.9b3baf019f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_max_trfc_upld.e3da09ce3f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_avg_max_trfc_upld.99d1dc7eb7": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_max_sum_max_trfc_upld.71721f1ea6": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_ttl.5cf5e8e929": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_amt_due.b8f8f0f094": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_unexp_amt.282900073f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_snr_deg.cb25be825f": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_trfc_dwld_cm_us.55e522fa90": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_rel.2627e8dc97": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_unexp_amt_ttl.6a2fcd2764": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_dwld.2dfc34036a": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_trfc_dwld.a4b5ec0dc7": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_trfc_dwld.d737c8ccc2": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_max_trfc_upld.cbcbf9cfe0": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_avg_max_trfc_upld.e3b75ddcbd": [], "test.VoluntaryChurnABT.column_median_estadisticos_mensual_estadisticos_mensual_sum_sum_max_trfc_upld.93270ee05a": [], "test.VoluntaryChurnABT.not_null_target_semanal_hh_cd.de6f55c1b9": [], "test.VoluntaryChurnABT.not_null_target_semanal_fecha_inicio_semana.3187a3161e": [], "test.VoluntaryChurnABT.not_null_target_semanal_target.d080868cb9": []}}